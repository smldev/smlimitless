SML Physics Branch Plan:

Everything not included in this document will not be included in the physics branch. All 2D vectors are expressed as Vector2 unless otherwise noted. All rectangles are BoundingRectangles unless otherwise noted.

Tiles:
- Tiles have a position and size in the world.
- Tiles have a "bounds" which is the smallest rectangle that can contain the entire tile.
- Tiles may be rectangular or they may be right triangles, which are henceforth referred to as sloped tiles.
- Rectangular (henceforth, "normal") tiles have four sides. Each side is parallel to its opposite and perpendicular to the other two sides.
- Normal tiles possess a rectangular hitbox equal to the bounds.
- Normal tiles have four named sides: Top, Bottom, Left, Right.
- Sloped tiles have three sides - two "straight" sides that are parallel to the coordinate axes, and one "sloped" side that connects the straight sides together.
- Sloped tiles may be rotated so that any side may be oriented in any direction.
- There are four such rotations, henceforth referred to as "top-left", "top-right", "bottom-left", and "bottom-right", referring to which two sides of a rectangle are replaced by the sloped side.
- Sloped tiles have three named sides - Slope, XSide (the horizontal side), YSide (the vertical side).
- Sloped tiles possess a hitbox that is a right triangle. Their bounds is still a rectangle.
- Tiles may be solid on all sides or on select sides.
- The solidity of each side may be determined independently of all other sides.
- Tiles may be solid on no sides.
- Collisions on sides that are not solid are ignored.
- The size of tiles must be a multiple of the default object size on each axis.

Sprites:
- Sprites have a position and size in the world.
- Sprites have a velocity, expressed in pixels per second, which is multiplied by the delta-time and added to their position on each frame.
- Sprites have an acceleration, expressed in pixels per second squared, which is multiplied by the delta-time and added to their velocity on each frame.
- Sprites have a previous position and velocity, each of which are assigned with the current values of position or velocity upon any assignment to the position or velocity.
- Sprites have a "bounds" which is the smallest rectangle that can contain the sprite.
- Sprites have a "normal hitbox" which is equivalent to the bounds.
- Sprites have a "sloped hitbox" which is a rectangle with width equal to one-half width and full height of the bounds. It is placed on the side as follows:
		{ Slope Type	Side  }
		{ Top-Left		Left  }
		{ Top-Right		Right }
		{ Bottom-Left	Left  }
		{ Bottom-Right	Right }
- When determining collision resolutions, normal tiles use the normal hitbox and sloped tiles use the slope hitbox.
- The size of sprites must be a multiple of the default object size on each axis.

Sections and Layers:
- A section is a two-dimensional plane.
- A section has a rectangular bounds which contains the view of the camera but outside which things can exist.
- Positionables (tiles and sprites, among others) have their position as an absolute distance from the top and left edges of the section bounds.
- Objects in sections are contained within layers.
- A layer is a rectangular space within a section; each side length is a multiple of the default object size.
- A layer is divided into grid cells, with each grid cell the size of the default object size.
- A layer's cells are notated through their coordinates, expressed as "cells from left edge of layer" (X) and "cells from top edge of layer" (Y).
- A layer may contain tiles and sprites.
- Tiles and sprites may not be assigned to other layers.
- Layers may be placed at any position in the section.
- Sections possess one fundamental layer, named the main layer.
- Any tile or sprite not assigned to other layers exists in the main layer.
- Any tile or sprites assigned to other layers do not exist in the main layer.
- Each grid cell may store exactly one tile.
- Tiles may only be initially placed at multiples of grid cell size.
- The illusion of placing multiple tiles in a cell is achieved through placing inert background objects with tile graphics within the layer.
- Layers do not apply relative positioning on their tiles.
- Tiles larger than the default object size are assigned to multiple grid cells. Each grid cell may still only store one tile, despite it potentially being placed within other grid cells.
- Sprites belong to layers but are not restricted by the grid; they may be placed anywhere in the layer or section.
- Sprites may interact with tiles or sprites of its own layer or any other layer.
- Layers have a velocity which permits every tile in a layer to be moved across the world.
- Each frame, all tiles are moved by the velocity.
- Layers may intersect other layers; sprite interaction in such cases is determined below.
- Layers may be disabled or enabled, temporarily removing them from or restoring them to the section.
- Layers may be destroyed, eliminating all members.
- Sprites or tiles can be added to or removed from a layer at any time.
- Adding a sprite to a layer removes it from the main layer.
- Removing a sprite from a layer adds it to the main layer.

Sprite Quadtree:
- A lazy QuadTree is a two-dimensional space partitioning method.
- The lazy QuadTree is a grouping of cells of a certain rectangular size.
- A cell only exists if a sprite intersects a cell's rectangle.
- Cells are notated by coordinates expressed as "cells from left edge" (X) and "cells from top edge" (Y).
- Sprites occupy any cells they intersect.
- The lazy QuadTree is used to determine "nearness" of sprites to other sprites.
- Two sprites is considered "near" to each other if they occupy any of the same cells.

Collision:
- Sprites, through their motion, may intersect tiles.
- An intersection of a sprite through one or more tiles is a collision.
- It is the responsibility of the section to resolve collisions of sprites.
- A resolution of a collision is the distance to move the sprite to resolve a collision.
- Expressed below is the sprite collision resolution in pseudocode:
	For each sprite in the section,
		If the sprite is embedded, follow the normal sprite embedding resolution and continue to the next sprite.
		Let M be an integer that stores either {-1, 0, +1} to indicate whether and in which direction a resolution has occurred.
		Let S be an integer that stores either {-1, 0, +1}. S is 0 unless the sprite collides with the sloped edge of a sloped tile and a vertical resolution occurs.
		Let Sc be a Vector2. Sc is (float.NaN, float.NaN) unless the sprite collides with the sloped edge of a sloped tile and a vertical resolution occurs.
		Move the sprite by its Y velocity.
		For each layer the sprite intersects,
			Let Ax be the X-coordinate of the leftmost grid cell the sprite intersects, or zero if the sprite's left edge is to the left of the left edge of the grid.
			Let Ay be the Y-coordinate of the topmost grid cell the sprite intersects, or zero if the sprite's top edge is above the top edge of the grid.
			Let Bx be the X-coordinate of the rightmost grid cell the sprite intersects, or (grid width - 1) if the sprite's right edge is to the right of the right edge of the grid.
			Let By be the Y-coordinate of the bottommost grid cell the sprite intersects, or (grid height - 1) if the sprite's bottom edge is below the bottom edge of the grid.		
			For Gy from Ay to By,
				For Gx from Ax to Bx,
					If there is a tile in the cell (Gx, Gy),
						Let R be the resolution distance for the sprite and tile.
						If the vertical resolution direction is the same as a non-solid side of the tile, continue to the next Gx or Gy.
						If M is 0 or if Ry and M have the same sign,
							If the tile is a sloped tile and is of type { Top-Left Top-Right },
								Assign to S -1 for type Top-Right or +1 for type Top-Left.
								Assign to Sc (Gx + S, Gy).
							Assign to M the sign of Ry.
							Move the sprite vertically by a distance of Ry.
						Else,
							The tile is embedded. Set the embedded flag and continue to the next sprite.
		Assign 0 to M.
		Move the sprite horizontally by its X velocity.
		For each layer the sprite intersects,
			Let Ax be the X-coordinate of the leftmost grid cell the sprite intersects, or zero if the sprite's left edge is to the left of the left edge of the grid.
			Let Ay be the Y-coordinate of the topmost grid cell the sprite intersects, or zero if the sprite's top edge is above the top edge of the grid.
			Let Bx be the X-coordinate of the rightmost grid cell the sprite intersects, or (grid width - 1) if the sprite's right edge is to the right of the right edge of the grid.
			Let By be the Y-coordinate of the bottommost grid cell the sprite intersects, or (grid height - 1) if the sprite's bottom edge is below the bottom edge of the grid.
			For Gy from Ay to By,
				For Gx from Ax to Bx,
					If there is a tile in the cell (Gx, Gy),
						Let R be the resolution distance for the sprite and tile.
						Let H be the horizontal resolution direction of Rx.
						If H is the same as a non-solid side of the tile, continue to the next Gx or Gy.
						If (S is not zero and Scx = Gx and H = -S), continue to the next Gx or Gy.
						If M is 0 or if Rx and M have the same sign,
							Assign to M the sign of Rx.
							Move the sprite horizontally by a distance of Rx.
						Else,
							The sprite is embedded. Set the embedded flag and continue to the next sprite.

Embedding:
- A sprite may be embedded within two or more tiles such that it cannot be individually resolved.
- A sprite is embedded if it collides with two or more tiles in a way that their resolutions are in opposite directions.
- An embedded sprite has a flag set to indicate that it is embedded.
- An embedded sprite is not tested for collision.
- An embedded sprite is forced against the direction of the nearest LevelExit at a constant speed until it intersects no tiles.
- Once an embedded sprite is removed from any tiles, the embedded flag is cleared and collision detection resumes.