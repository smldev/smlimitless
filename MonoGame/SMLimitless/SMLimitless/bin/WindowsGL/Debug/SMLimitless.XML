<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SMLimitless</name>
    </assembly>
    <members>
        <member name="T:SMLimitless.Collections.Grid`1">
            <summary>
            Represents a two-dimensional grid of values.
            </summary>
            <typeparam name="T">The type of the elements in the grid.</typeparam>
        </member>
        <member name="F:SMLimitless.Collections.Grid`1.values">
            <summary>
            A two-dimensional array containing the values.
            </summary>
        </member>
        <member name="F:SMLimitless.Collections.Grid`1.valueList">
            <summary>
            A list containing the values. Makes for faster enumeration.
            </summary>
        </member>
        <member name="P:SMLimitless.Collections.Grid`1.Width">
            <summary>
            Gets the one-based width of this grid, measured in grid cells.
            </summary>
        </member>
        <member name="P:SMLimitless.Collections.Grid`1.Height">
            <summary>
            Gets the one-based height of this grid, measured in grid cells.
            </summary>
        </member>
        <member name="P:SMLimitless.Collections.Grid`1.Item(System.Int32,System.Int32)">
            <summary>
            Gets or sets a value in the grid.
            </summary>
            <param name="x">The zero-based X-position of the grid cell.</param>
            <param name="y">The zero-based Y-position of the grid cell.</param>
            <returns>The value in the grid cell.</returns>
        </member>
        <member name="M:SMLimitless.Collections.Grid`1.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SMLimitless.Collections.Grid`1"/> class.
            </summary>
            <param name="width">The one-based width of the grid, measured in grid cells.</param>
            <param name="height">The one-based height of the grid, measured in grid cells.</param>
        </member>
        <member name="M:SMLimitless.Collections.Grid`1.GetSubgrid(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns a portion of this grid.
            </summary>
            <param name="x">The zero-based X-position on this grid of the top-left corner of the subgrid.</param>
            <param name="y">The zero-based Y-position on this grid of the top-left corner of the subgrid.</param>
            <param name="width">The one-based width of the subgrid.</param>
            <param name="height">The one-based height of the subgrid.</param>
            <returns>A portion of this grid.</returns>
        </member>
        <member name="M:SMLimitless.Collections.Grid`1.IndexWithinBounds(System.Int32,System.Int32)">
            <summary>
            Checks whether a given grid cell coordinate is within the bounds of the grid.
            </summary>
            <param name="x">The X-position of the grid cell.</param>
            <param name="y">The Y-position of the grid cell.</param>
            <returns>True if the cell is within the bounds of the grid, false if otherwise.</returns>
        </member>
        <member name="M:SMLimitless.Collections.Grid`1.GetEnumerator">
            <summary>
            Gets the enumerator for the items of this grid.
            </summary>
            <returns>An enumerator for the items of this grid.</returns>
            <remarks>There is no guaranteed order.</remarks>
        </member>
        <member name="T:SMLimitless.Collections.ReadOnlyDictionary`2">
            <summary>
            Represents a strongly-typed, read-only dictionaries mapping unique keys to values.
            </summary>
            <typeparam name="TKey">The type of the keys.</typeparam>
            <typeparam name="TValue">The type of the values.</typeparam>
        </member>
        <member name="F:SMLimitless.Collections.ReadOnlyDictionary`2._dictionary">
            <summary>
            An internal dictionary which contains the values exposed as read-only.
            </summary>
        </member>
        <member name="P:SMLimitless.Collections.ReadOnlyDictionary`2.Count">
            <summary>
            Gets the number of items in this dictionary.
            </summary>
        </member>
        <member name="P:SMLimitless.Collections.ReadOnlyDictionary`2.Keys">
            <summary>
            Gets a collection of all the keys in this dictionary.
            </summary>
        </member>
        <member name="P:SMLimitless.Collections.ReadOnlyDictionary`2.IsReadOnly">
            <summary>
            Gets a value indicating whether this dictionary is read-only.
            </summary>
        </member>
        <member name="P:SMLimitless.Collections.ReadOnlyDictionary`2.Values">
            <summary>
            Gets a collection of the values in this dictionary.
            </summary>
        </member>
        <member name="P:SMLimitless.Collections.ReadOnlyDictionary`2.Item(`0)">
            <summary>
            Gets a value from this dictionary for a given key.
            </summary>
            <param name="key">The key for which to get the value.</param>
            <returns>The value for the given key.</returns>
        </member>
        <member name="P:SMLimitless.Collections.ReadOnlyDictionary`2.System#Collections#Generic#IDictionary{TKey,TValue}#Item(`0)">
            <summary>
            Gets a value from this dictionary for a given key.
            Attempting to set a value will throw a NotSupportedException.
            </summary>
            <param name="key">The key for which to get the value.</param>
            <returns>The value for the given key.</returns>
        </member>
        <member name="M:SMLimitless.Collections.ReadOnlyDictionary`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SMLimitless.Collections.ReadOnlyDictionary`2"/> type.
            </summary>
        </member>
        <member name="M:SMLimitless.Collections.ReadOnlyDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:SMLimitless.Collections.ReadOnlyDictionary`2"/> type.
            </summary>
            <param name="dictionary">The dictionary to wrap as read-only.</param>
        </member>
        <member name="M:SMLimitless.Collections.ReadOnlyDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Determines if this dictionary contains a given key/value pair.
            </summary>
            <param name="item">The key/value pair to search for.</param>
            <returns>True if the given key/value pair is present in the dictionary, False if it is not.</returns>
        </member>
        <member name="M:SMLimitless.Collections.ReadOnlyDictionary`2.ContainsKey(`0)">
            <summary>
            Determines if this dictionary contains a given key.
            </summary>
            <param name="key">The key to search for.</param>
            <returns>True if the dictionary contains this key, false if it does not.</returns>
        </member>
        <member name="M:SMLimitless.Collections.ReadOnlyDictionary`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <summary>
            Copies the key-value pairs in this dictionary to an array of key-value pairs at a given index.
            </summary>
            <param name="array">The array to copy to.</param>
            <param name="arrayIndex">The index in the array to start copying at.</param>
        </member>
        <member name="M:SMLimitless.Collections.ReadOnlyDictionary`2.GetEnumerator">
            <summary>
            Gets an enumerator over every key-value pair in this dictionary.
            </summary>
            <returns>An enumerator for this dictionary.</returns>
        </member>
        <member name="M:SMLimitless.Collections.ReadOnlyDictionary`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets a non-generic enumerator over every key-value pair in this dictionary.
            </summary>
            <returns>A non-generic enumerator for this dictionary.</returns>
        </member>
        <member name="M:SMLimitless.Collections.ReadOnlyDictionary`2.ReadOnlyException">
            <summary>
            Creates a NotSupportedException to throw.
            </summary>
            <returns>A NotSupportedException.</returns>
        </member>
        <member name="M:SMLimitless.Collections.ReadOnlyDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            Attempts to get a value from this dictionary for a given key.
            </summary>
            <param name="key">The key to retrieve the value for.</param>
            <param name="value">An out parameter that will contain the requested value if the key is present in the dictionary, or default(TValue) if the key is not present.</param>
            <returns>True if the dictionary contains the given key, false if it does not.</returns>
        </member>
        <member name="M:SMLimitless.Collections.ReadOnlyDictionary`2.System#Collections#Generic#IDictionary{TKey,TValue}#Add(`0,`1)">
            <summary>
            To implement the <see cref="T:System.Collections.Generic.IDictionary`2"/> interface, this method is required.
            However, it only throws a NotSupportedException.
            </summary>
            <param name="key">The key to add.</param>
            <param name="value">The value to add.</param>
        </member>
        <member name="M:SMLimitless.Collections.ReadOnlyDictionary`2.System#Collections#Generic#IDictionary{TKey,TValue}#Remove(`0)">
            <summary>
            To implement the <see cref="T:System.Collections.Generic.IDictionary`2"/> interface, this method is required.
            However, it only throws a NotSupportedException.
            </summary>
            <param name="key">The key to remove.</param>
            <returns>Nothing.</returns>
        </member>
        <member name="M:SMLimitless.Collections.ReadOnlyDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            To implement the <see cref="T:System.Collections.Generic.ICollection`1"/> interface, this method is required.
            However, it only throws a NotSupportedException.
            </summary>
            <param name="item">The item to add.</param>
        </member>
        <member name="M:SMLimitless.Collections.ReadOnlyDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Clear">
            <summary>
            To implement the <see cref="T:System.Collections.Generic.ICollection`1"/> interface, this method is required.
            However, it only throws a NotSupportedException.
            </summary>
        </member>
        <member name="M:SMLimitless.Collections.ReadOnlyDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            To implement the <see cref="T:System.Collections.Generic.ICollection`1"/> interface, this method is required.
            However, it only throws a NotSupportedException.
            </summary>
            <param name="item">The item to add.</param>
            <returns>Nothing.</returns>
        </member>
        <member name="T:SMLimitless.Collections.SizedGrid`1">
            <summary>
            Represents a grid made of cells of a specified size.
            </summary>
            <typeparam name="T">A type that derives from the <see cref="T:SMLimitless.Interfaces.IPositionable"/> interface.</typeparam>
        </member>
        <member name="F:SMLimitless.Collections.SizedGrid`1.grid">
            <summary>
            The internal grid.
            </summary>
        </member>
        <member name="P:SMLimitless.Collections.SizedGrid`1.Position">
            <summary>
            Gets the position of the top-left corner of this grid.
            </summary>
        </member>
        <member name="P:SMLimitless.Collections.SizedGrid`1.CellWidth">
            <summary>
            Gets the width of a grid cell, usually in pixels.
            </summary>
        </member>
        <member name="P:SMLimitless.Collections.SizedGrid`1.CellHeight">
            <summary>
            Gets the height of a grid cell, usually in pixels.
            </summary>
        </member>
        <member name="P:SMLimitless.Collections.SizedGrid`1.Width">
            <summary>
            Gets the width of the grid in cells.
            </summary>
        </member>
        <member name="P:SMLimitless.Collections.SizedGrid`1.Height">
            <summary>
            Gets the height of the grid in cells.
            </summary>
        </member>
        <member name="P:SMLimitless.Collections.SizedGrid`1.Bounds">
            <summary>
            Gets a rectangle that can completely contain this sized grid.
            </summary>
        </member>
        <member name="M:SMLimitless.Collections.SizedGrid`1.#ctor(Microsoft.Xna.Framework.Vector2,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SMLimitless.Collections.SizedGrid`1"/> class.
            </summary>
            <param name="position">The position of the top-left corner of the grid.</param>
            <param name="cellWidth">The width of the grid cells.</param>
            <param name="cellHeight">The height of the grid cells.</param>
            <param name="gridWidth">The width of the grid in cells.</param>
            <param name="gridHeight">The height of the grid in cells.</param>
        </member>
        <member name="P:SMLimitless.Collections.SizedGrid`1.Item(System.Int32,System.Int32)">
            <summary>
            Gets an object on the grid from the specified cell.
            To add objects to the grid, use the Add method.
            </summary>
            <param name="x">The X-coordinate of the cell.</param>
            <param name="y">The Y-coordinate of the cell.</param>
            <returns>The object at the specified grid cell, or null if there is no object in the cell.</returns>
        </member>
        <member name="M:SMLimitless.Collections.SizedGrid`1.Add(SMLimitless.Interfaces.IPositionable2)">
            <summary>
            Adds an item to the grid.
            WARNING: This will overwrite any items that are
            already present where the item will be placed.
            </summary>
            <param name="item">The item to add to the grid.</param>
        </member>
        <member name="M:SMLimitless.Collections.SizedGrid`1.AddWithResize(`0)">
            <summary>
            This method is not implemented.
            </summary>
            <param name="item">The item to add.</param>
        </member>
        <member name="M:SMLimitless.Collections.SizedGrid`1.Remove(SMLimitless.Interfaces.IPositionable2)">
            <summary>
            Removes an item from the grid.
            </summary>
            <param name="item">The item to be removed from the grid.</param>
        </member>
        <member name="M:SMLimitless.Collections.SizedGrid`1.GetSubgrid(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns a portion of this grid.
            </summary>
            <param name="x">The X-position on this grid of the top-left corner of the subgrid.</param>
            <param name="y">The Y-position on this grid of the top-left corner of the subgrid.</param>
            <param name="width">The width of the subgrid.</param>
            <param name="height">The height of the subgrid.</param>
            <returns>A portion of this grid.</returns>
        </member>
        <member name="M:SMLimitless.Collections.SizedGrid`1.GetCellAtPosition(Microsoft.Xna.Framework.Vector2)">
            <summary>
            Returns the cell number for a given position.
            </summary>
            <param name="position">The position to return for.</param>
            <returns>The cell number for the given position.</returns>
        </member>
        <member name="M:SMLimitless.Collections.SizedGrid`1.GetObjectAtPosition(Microsoft.Xna.Framework.Vector2)">
            <summary>
            Returns the object at the given position on the grid.
            </summary>
            <param name="position">The position to return for.</param>
            <returns>The object at the position, or null if there is no object.</returns>
        </member>
        <member name="M:SMLimitless.Collections.SizedGrid`1.DoesRangeAlignToGrid(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Returns a value indicating whether all items in an enumerable align to the grid.
            </summary>
            <param name="items">The items to check for alignment.</param>
            <returns>True if all items align to the grid, false if they don't.</returns>
        </member>
        <member name="M:SMLimitless.Collections.SizedGrid`1.IndexWithinBounds(System.Int32,System.Int32)">
            <summary>
            Checks if a grid cell coordinate falls within the bounds of the grid.
            </summary>
            <param name="x">The X-coordinate of the coordinate to check.</param>
            <param name="y">The Y-coordinate of the coordinate to check.</param>
            <returns>True if the cell falls within the grid, false if otherwise.</returns>
        </member>
        <member name="M:SMLimitless.Collections.SizedGrid`1.PointWithinBounds(Microsoft.Xna.Framework.Vector2)">
            <summary>
            Checks if a point in space falls within the bounds of the grid.
            </summary>
            <param name="point">The point to check.</param>
            <returns>True if the point falls within the grid, false if otherwise.</returns>
        </member>
        <member name="M:SMLimitless.Collections.SizedGrid`1.Draw(Microsoft.Xna.Framework.Color)">
            <summary>
            Draws the cell borders of this grid.
            </summary>
            <param name="lineColor">The color of the cell lines.</param>
        </member>
        <member name="M:SMLimitless.Collections.SizedGrid`1.GetEnumerator">
            <summary>
            Gets the enumerator for this grid.
            </summary>
            <returns>An enumerator that enumerates over each grid cell.</returns>
        </member>
        <member name="M:SMLimitless.Collections.SizedGrid`1.EnumerateItemsWithGridCells">
            <summary>
            Returns an enumerable that enumerates over the grid.
            </summary>
            <returns>An enumerable that returns the contents of each grid cell, as well as the coordinates of each grid cell in X, Y order.</returns>
        </member>
        <member name="M:SMLimitless.Collections.SizedGrid`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            The explicit interface implementation of IEnumerable.GetEnumerator().
            </summary>
            <returns>The enumerator returned by the GetEnumerator() method.</returns>
        </member>
        <member name="T:SMLimitless.Collections.SparseCell`1">
            <summary>
            Represents a single cell in a <see cref="T:SMLimitless.Collections.SparseCellGrid`1"/> instance.
            </summary>
            <typeparam name="T">A type implementing the <see cref="T:SMLimitless.Interfaces.IPositionable2"/> interface.</typeparam>
        </member>
        <member name="F:SMLimitless.Collections.SparseCell`1.cellItems">
            <summary>
            A collection of all the items intersecting this cell.
            </summary>
        </member>
        <member name="F:SMLimitless.Collections.SparseCell`1.cellSize">
            <summary>
            The size of this cell.
            </summary>
        </member>
        <member name="F:SMLimitless.Collections.SparseCell`1.cellNumber">
            <summary>
            The two-dimensional, zero-based index of this cell.
            </summary>
        </member>
        <member name="P:SMLimitless.Collections.SparseCell`1.Items">
            <summary>
            Gets a collection of all the items intersecting this cell.
            </summary>
        </member>
        <member name="P:SMLimitless.Collections.SparseCell`1.Bounds">
            <summary>
            Gets the bounding rectangle enclosing this cell.
            </summary>
        </member>
        <member name="P:SMLimitless.Collections.SparseCell`1.IsEmpty">
            <summary>
            Gets a value indicating whether this cell has no items.
            </summary>
        </member>
        <member name="M:SMLimitless.Collections.SparseCell`1.#ctor(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Point)">
            <summary>
            Initializes a new instance of the <see cref="T:SMLimitless.Collections.SparseCell`1"/> class.
            </summary>
            <param name="cCellSize">The size of this cell.</param>
            <param name="cCellNumber">The two-dimensional, zero-based index of this cell.</param>
        </member>
        <member name="M:SMLimitless.Collections.SparseCell`1.#ctor(System.Collections.Generic.IEnumerable{`0},Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Point)">
            <summary>
            Initializes a new instance of the <see cref="T:SMLimitless.Collections.SparseCell`1"/> class.
            </summary>
            <param name="items">A collection of items to place within this cell.</param>
            <param name="cCellSize">The size of this cell.</param>
            <param name="cCellNumber">The two-dimensional, zero-based index of this cell.</param>
        </member>
        <member name="M:SMLimitless.Collections.SparseCell`1.Add(`0)">
            <summary>
            Adds an item to this cell.
            </summary>
            <param name="item">The item to add.</param>
        </member>
        <member name="M:SMLimitless.Collections.SparseCell`1.Remove(`0)">
            <summary>
            Removes an item from this cell.
            </summary>
            <param name="item">The item to remove.</param>
        </member>
        <member name="M:SMLimitless.Collections.SparseCell`1.CreateBounds">
            <summary>
            Creates the bounding rectangle of this cell.
            </summary>
            <returns>The bounding rectangle of this cell.</returns>
        </member>
        <member name="M:SMLimitless.Collections.SparseCell`1.ItemIntersectsCell(`0)">
            <summary>
            Returns a value indicating whether a given item intersects this cell.
            </summary>
            <param name="item">The item to check for intersection.</param>
            <returns>True if the item intersects this cell (including a tangent, edges-only intersection), False if it does not.</returns>
        </member>
        <member name="T:SMLimitless.Collections.SparseCellGrid`1">
            <summary>
            Represents a grid composed of sized cells that can contain items.
            The grid is "sparse" - cells only exist if they contains items.
            </summary>
            <typeparam name="T">A type implementing the <see cref="T:SMLimitless.Interfaces.IPositionable2"/> interface.</typeparam>
        </member>
        <member name="F:SMLimitless.Collections.SparseCellGrid`1.DefaultCellSize">
            <summary>
            The default size, in pixels, of a sparse cell.
            </summary>
        </member>
        <member name="F:SMLimitless.Collections.SparseCellGrid`1.cells">
            <summary>
            A dictionary of all the cell indices as keys and the corresponding cells as values.
            </summary>
        </member>
        <member name="F:SMLimitless.Collections.SparseCellGrid`1.items">
            <summary>
            A collection of all items within any of the cells in the grid.
            </summary>
        </member>
        <member name="P:SMLimitless.Collections.SparseCellGrid`1.Cells">
            <summary>
            Gets a read-only dictionary of the cells in this grid.
            </summary>
        </member>
        <member name="P:SMLimitless.Collections.SparseCellGrid`1.Items">
            <summary>
            Gets a read-only collection of the items in this grid.
            </summary>
        </member>
        <member name="P:SMLimitless.Collections.SparseCellGrid`1.CellSize">
            <summary>
            Gets the size of all cells.
            </summary>
        </member>
        <member name="M:SMLimitless.Collections.SparseCellGrid`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SMLimitless.Collections.SparseCellGrid`1"/> class.
            </summary>
        </member>
        <member name="M:SMLimitless.Collections.SparseCellGrid`1.#ctor(Microsoft.Xna.Framework.Vector2)">
            <summary>
            Initializes a new instance of the <see cref="T:SMLimitless.Collections.SparseCellGrid`1"/> class.
            </summary>
            <param name="cellSize">The size of all cells.</param>
        </member>
        <member name="M:SMLimitless.Collections.SparseCellGrid`1.#ctor(Microsoft.Xna.Framework.Vector2,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:SMLimitless.Collections.SparseCellGrid`1"/> class.
            </summary>
            <param name="cellSize">The size of all cells.</param>
            <param name="items">A collection of all items to be contained within this grid.</param>
        </member>
        <member name="M:SMLimitless.Collections.SparseCellGrid`1.Add(`0)">
            <summary>
            Adds an item to this grid.
            </summary>
            <param name="item">The item to add.</param>
        </member>
        <member name="M:SMLimitless.Collections.SparseCellGrid`1.Remove(`0)">
            <summary>
            Removes an item from this grid.
            </summary>
            <param name="item">The item to remove.</param>
        </member>
        <member name="M:SMLimitless.Collections.SparseCellGrid`1.RemoveAllWhere(System.Predicate{`0})">
            <summary>
            Removes all items from this grid that match a predicate.
            </summary>
            <param name="predicate">All the removed items must match this predicate.</param>
        </member>
        <member name="M:SMLimitless.Collections.SparseCellGrid`1.LocalAdd(`0)">
            <summary>
            Adds an item to the cell grid without adding it to the Items collection.
            </summary>
            <param name="item">The item to add.</param>
        </member>
        <member name="M:SMLimitless.Collections.SparseCellGrid`1.LocalRemove(`0)">
            <summary>
            Removes an item from the cell grid without removing it from the Items collection.
            </summary>
            <param name="item">The item to remove.</param>
        </member>
        <member name="M:SMLimitless.Collections.SparseCellGrid`1.AddItemToCell(`0,Microsoft.Xna.Framework.Point)">
            <summary>
            Adds an item to a given cell.
            </summary>
            <param name="item">The item to add.</param>
            <param name="cellNumber">The two-dimensional, zero-based index of the cell to which to add the item.</param>
        </member>
        <member name="M:SMLimitless.Collections.SparseCellGrid`1.GetCellNumberAtPosition(Microsoft.Xna.Framework.Vector2)">
            <summary>
            Gets the cell number at a given position.
            </summary>
            <param name="position">The position to get the cell number for.</param>
            <returns>A two-dimensional, zero-based index of the cell that the given position is within.</returns>
        </member>
        <member name="M:SMLimitless.Collections.SparseCellGrid`1.GetCellsItemIsIn(`0)">
            <summary>
            Gets a range containing the two-dimensional, zero-based indices of every cell a given item is in.
            </summary>
            <param name="item">The item to get the cells for.</param>
            <returns>The range of cells the item is in.</returns>
        </member>
        <member name="M:SMLimitless.Collections.SparseCellGrid`1.Update">
            <summary>
            Checks and updates the containing cells of all items that have moved since the last update.
            Removes any empty cells.
            </summary>
        </member>
        <member name="M:SMLimitless.Collections.SparseCellGrid`1.DrawCells">
            <summary>
            Draws each cell as white rectangular edges with their cell number printed in the corner.
            </summary>
        </member>
        <member name="M:SMLimitless.Collections.SparseCellGrid`1.GetEnumerator">
            <summary>
            Gets the enumerator for this grid.
            </summary>
            <returns>An enumerator that enumerates over every item in this grid cell by cell.</returns>
        </member>
        <member name="M:SMLimitless.Collections.SparseCellGrid`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            The explicit interface implementation of IEnumerable.GetEnumerator().
            </summary>
            <returns>The enumerator returned by the GetEnumerator() method.</returns>
        </member>
        <member name="T:SMLimitless.Collections.SparseCellRange">
            <summary>
            A pair of two-dimensional, zero-based indices that represent a rectangular group of sparse cells.
            </summary>
        </member>
        <member name="P:SMLimitless.Collections.SparseCellRange.TopLeft">
            <summary>
            Gets the two-dimensional, zero-based index of the top-left corner of the range's cells.
            </summary>
        </member>
        <member name="P:SMLimitless.Collections.SparseCellRange.BottomRight">
            <summary>
            Gets the two-dimensional, zero-based index of the bottom-right corner of the range's cells.
            </summary>
        </member>
        <member name="M:SMLimitless.Collections.SparseCellRange.#ctor(Microsoft.Xna.Framework.Point,Microsoft.Xna.Framework.Point)">
            <summary>
            Initializes a new instance of the <see cref="T:SMLimitless.Collections.SparseCellRange"/> struct.
            </summary>
            <param name="topLeft">The two-dimensional, zero-based index of the top-left corner of the range's cells.</param>
            <param name="bottomRight">The two-dimensional, zero-based index of the bottom-right corner of the range's cells.</param>
        </member>
        <member name="M:SMLimitless.Collections.SparseCellRange.Equals(System.Object)">
            <summary>
            Determines if a given object is equal to this object.
            </summary>
            <param name="obj">The object to compare.</param>
            <returns>True if the object is a <see cref="T:SMLimitless.Collections.SparseCellRange"/> and all properties are equal. False if otherwise.</returns>
        </member>
        <member name="M:SMLimitless.Collections.SparseCellRange.Equals(SMLimitless.Collections.SparseCellRange)">
            <summary>
            Determines if a given <see cref="T:SMLimitless.Collections.SparseCellRange"/> is equal to this range.
            </summary>
            <param name="range">The range to compare.</param>
            <returns>True if all properties are equal, false if otherwise.</returns>
        </member>
        <member name="M:SMLimitless.Collections.SparseCellRange.GetHashCode">
            <summary>
            Gets a hash code for this <see cref="T:SMLimitless.Collections.SparseCellRange"/>.
            </summary>
            <returns>An <see cref="T:System.Int32"/> containing the hash code for this range.</returns>
        </member>
        <member name="T:SMLimitless.Collections.Hierarchy`1">
            <summary>
            Provides a generic hierarchy collection.
            Please note that this class itself represents a node
            in a hierarchy, and contains a collection of child nodes.
            </summary>
            <typeparam name="T">Any class.</typeparam>
        </member>
        <member name="P:SMLimitless.Collections.Hierarchy`1.Parent">
            <summary>
            Gets the next level up in the hierarchy.
            Use .Add() to assign a parent.
            </summary>
        </member>
        <member name="P:SMLimitless.Collections.Hierarchy`1.Children">
            <summary>
            Gets a collection of the children of this node in the hierarchy.
            </summary>
        </member>
        <member name="P:SMLimitless.Collections.Hierarchy`1.Data">
            <summary>
            Gets or sets the data contained within this node.
            </summary>
        </member>
        <member name="M:SMLimitless.Collections.Hierarchy`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:SMLimitless.Collections.Hierarchy`1"/> class.
            </summary>
            <param name="data">The data of this node.</param>
        </member>
        <member name="M:SMLimitless.Collections.Hierarchy`1.Add(SMLimitless.Collections.Hierarchy{`0})">
            <summary>
            Adds a new node to this hierarchy node as a child node.
            </summary>
            <param name="node">The node, optionally containing some data, to add to this node.</param>
        </member>
        <member name="M:SMLimitless.Collections.Hierarchy`1.Add(`0)">
            <summary>
            Adds some data to a node, and adds that node to this node.
            </summary>
            <param name="data">The data to add to this node.</param>
            <returns>A new <see cref="T:SMLimitless.Collections.Hierarchy`1"/> instance containing the data.</returns>
        </member>
        <member name="M:SMLimitless.Collections.Hierarchy`1.Remove(SMLimitless.Collections.Hierarchy{`0})">
            <summary>
            Removes a specified node from this hierarchy node.
            This method is recursive, and will become slower with larger hierarchies.
            </summary>
            <param name="node">The node to remove.</param>
            <exception cref="T:System.Exception">Thrown in the node is not contained within this hierarchy node.</exception>
        </member>
        <member name="M:SMLimitless.Collections.Hierarchy`1.GetDepth">
            <summary>
            Calculates the zero-based depth of this node in the hierarchy.
            This method is recursive, and will become slower with larger hierarchies.
            </summary>
            <returns>The zero-based depth of this node in the hierarchy.</returns>
        </member>
        <member name="M:SMLimitless.Collections.Hierarchy`1.Search(`0)">
            <summary>
            Searches a hierarchy from this node down.
            This method is recursive, and will become slower with larger hierarchies.
            </summary>
            <param name="data">The data to search for.</param>
            <returns>The node containing the data, or null if there is no match.</returns>
        </member>
        <member name="T:SMLimitless.Components.ActionScheduler">
            <summary>
            A class that can schedule an action to occur in a certain number of frames.
            </summary>
        </member>
        <member name="T:SMLimitless.Components.ActionScheduler.ScheduledAction">
            <summary>
            Represents an action to be executed in a certain number of frames.
            </summary>
        </member>
        <member name="P:SMLimitless.Components.ActionScheduler.ScheduledAction.Action">
            <summary>
            The action to execute.
            </summary>
        </member>
        <member name="P:SMLimitless.Components.ActionScheduler.ScheduledAction.FramesUntilExecution">
            <summary>
            The number of frames left until the action is executed.
            </summary>
        </member>
        <member name="M:SMLimitless.Components.ActionScheduler.ScheduledAction.#ctor(System.Action,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SMLimitless.Components.ActionScheduler.ScheduledAction"/> class.
            </summary>
            <param name="action">The action to execute.</param>
            <param name="framesUntilExecution">The number of frames until the action is executed.</param>
        </member>
        <member name="P:SMLimitless.Components.ActionScheduler.Instance">
            <summary>
            A global instance that can be used if a specific <see cref="T:SMLimitless.Components.ActionScheduler"/>
            instance is considered unnessecary.
            </summary>
        </member>
        <member name="M:SMLimitless.Components.ActionScheduler.ScheduleAction(System.Action,System.Int32)">
            <summary>
            Schedules an action to occur in a certain number of frames.
            </summary>
            <param name="action">The action to execute.</param>
            <param name="framesUntilExecution">The number of frames until the action is executed.</param>
        </member>
        <member name="M:SMLimitless.Components.ActionScheduler.ScheduleActionOnNextFrame(System.Action,System.Int32)">
            <summary>
            On the next frame, an action is scheduled to execute.
            </summary>
            <param name="action">The action to execute.</param>
            <param name="framesUntilExecution">The number of frames until the action executes.</param>
            <returns>A <see cref="T:SMLimitless.Components.ActionScheduler.ScheduledAction"/> reference for the action to be executed.</returns>
            <remarks>As this action is scheduled on the next frame, one frame is subtracted from the
            <paramref name="framesUntilExecution"/> argument.</remarks>
        </member>
        <member name="M:SMLimitless.Components.ActionScheduler.CancelScheduledAction(SMLimitless.Components.ActionScheduler.ScheduledAction)">
            <summary>
            Cancels a scheduled action.
            </summary>
            <param name="action">The action to cancel.</param>
            <returns>True if the action has been cancelled, false if the action wasn't scheduled at all.</returns>
        </member>
        <member name="M:SMLimitless.Components.ActionScheduler.Update">
            <summary>
            Updates this action scheduler, decrementing the frames-left of all scheduled actions,
            and executing actions that have 0 frames left.
            </summary>
        </member>
        <member name="T:SMLimitless.Components.FrameTimer">
            <summary>
            A timer that fires an event after a defined number of frames.
            </summary>
        </member>
        <member name="P:SMLimitless.Components.FrameTimer.TimerExpired">
            <summary>
            Gets a value indicating whether the timer has expired.
            </summary>
        </member>
        <member name="E:SMLimitless.Components.FrameTimer.TimerExpiredEvent">
            <summary>
            An event that is fired when the timer expires.
            </summary>
        </member>
        <member name="M:SMLimitless.Components.FrameTimer.Start(System.Int32)">
            <summary>
            Starts the timer to expire in a certain number of frames.
            </summary>
            <param name="frames">The number of frames before the timer expires.</param>
        </member>
        <member name="M:SMLimitless.Components.FrameTimer.Pause">
            <summary>
            Pauses the timer so that it can be resumed from where it was later.
            </summary>
        </member>
        <member name="M:SMLimitless.Components.FrameTimer.Cancel">
            <summary>
            Cancels the timer and removes any frames remaining.
            </summary>
        </member>
        <member name="M:SMLimitless.Components.FrameTimer.Reset">
            <summary>
            Resets the timer.
            </summary>
        </member>
        <member name="M:SMLimitless.Components.FrameTimer.Restart(System.Int32)">
            <summary>
            Restarts the timer with a new number of frames.
            </summary>
            <param name="frames">The number of frames until the timer expires.</param>
        </member>
        <member name="M:SMLimitless.Components.FrameTimer.Update">
            <summary>
            Updates this timer, decrementing one frame.
            </summary>
        </member>
        <member name="T:SMLimitless.Content.ContentPackage">
            <summary>
            Stores information about a content package,
            a folder with a custom content assembly and
            a set of graphics and sounds for the custom
            content.
            </summary>
        </member>
        <member name="F:SMLimitless.Content.ContentPackage.isLoaded">
            <summary>
            A value indicating whether this content package is loaded.
            </summary>
        </member>
        <member name="F:SMLimitless.Content.ContentPackage.settingsFilePath">
            <summary>
            The path to the settings file of this content package.
            </summary>
        </member>
        <member name="F:SMLimitless.Content.ContentPackage.searcher">
            <summary>
            A searcher for this content package.
            </summary>
        </member>
        <member name="P:SMLimitless.Content.ContentPackage.Name">
            <summary>
            Gets the name of this content package.
            </summary>
        </member>
        <member name="P:SMLimitless.Content.ContentPackage.BaseFolderPath">
            <summary>
            Gets the absolute path to the folder of this content package.
            </summary>
        </member>
        <member name="P:SMLimitless.Content.ContentPackage.AssemblyPath">
            <summary>
            Gets the absolute path to the custom content assembly file.
            </summary>
        </member>
        <member name="P:SMLimitless.Content.ContentPackage.Author">
            <summary>
            Gets the name of the person(s) who created this content package.
            </summary>
        </member>
        <member name="M:SMLimitless.Content.ContentPackage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SMLimitless.Content.ContentPackage"/> class.
            </summary>
        </member>
        <member name="M:SMLimitless.Content.ContentPackage.Load(System.String)">
            <summary>
            Loads a content package.
            </summary>
            <param name="settingsPath">The path to the settings file for this package.</param>
        </member>
        <member name="M:SMLimitless.Content.ContentPackage.LoadFromFolder(System.String)">
            <summary>
            Loads a content package given its folder path.
            </summary>
            <param name="settingsFolder">The path to the folder of the package.</param>
        </member>
        <member name="M:SMLimitless.Content.ContentPackage.GetResourcePath(System.String)">
            <summary>
            Gets a file path to a resource given the resource name.
            </summary>
            <param name="resourceName">The name of the resource.</param>
            <returns>A path to the resource.</returns>
        </member>
        <member name="M:SMLimitless.Content.ContentPackage.ToString">
            <summary>
            Returns a string representation of this pack's key values.
            </summary>
            <returns>A representation of the key values.</returns>
        </member>
        <member name="T:SMLimitless.Content.ContentPackageManager">
            <summary>
            Loads and manages a collection of ContentPackages.
            </summary>
        </member>
        <member name="F:SMLimitless.Content.ContentPackageManager.loadedPackages">
            <summary>
            A collection of the loaded packages.
            </summary>
        </member>
        <member name="F:SMLimitless.Content.ContentPackageManager.contentOverrides">
            <summary>
            A collection of folder names for folders containing content overrides.
            </summary>
        </member>
        <member name="M:SMLimitless.Content.ContentPackageManager.#cctor">
            <summary>
            Initializes static members of the <see cref="T:SMLimitless.Content.ContentPackageManager"/> class.
            </summary>
        </member>
        <member name="M:SMLimitless.Content.ContentPackageManager.AddPackage(System.String)">
            <summary>
            Adds a package to this manager.
            </summary>
            <param name="settingsPath">The path to the package's settings file.</param>
        </member>
        <member name="M:SMLimitless.Content.ContentPackageManager.AddPackageFromFolder(System.String)">
            <summary>
            Adds a package to this manager.
            </summary>
            <param name="settingsFolder">The absolute path to the package's folder.</param>
        </member>
        <member name="M:SMLimitless.Content.ContentPackageManager.GetGraphicsResource(System.String)">
            <summary>
            Returns a loaded graphics object from a content package
            given a resource name. This method will do a file search
            through all loaded content packages, but only needs to do the
            file search once, when the package is loaded.
            </summary>
            <param name="resourceName">The name of the resource to load.</param>
            <returns>A loaded graphics object.</returns>
        </member>
        <member name="M:SMLimitless.Content.ContentPackageManager.GetSoundResource(System.String)">
            <summary>
            Gets a loaded sound resource given its name.
            </summary>
            <param name="resourceName">The name of the sound resource.</param>
            <returns>A sound resource.</returns>
        </member>
        <member name="M:SMLimitless.Content.ContentPackageManager.GetAbsoluteFilePath(System.String)">
            <summary>
            Gets the absolute file path of a resource, given the resource's name.
            </summary>
            <param name="resourceName">The name of the resource.</param>
            <returns>The resource's absolute file path.</returns>
        </member>
        <member name="M:SMLimitless.Content.ContentPackageManager.AddOverrideFolder(System.String)">
            <summary>
            Adds an override folder to the content override folders.
            </summary>
            <param name="absoluteFolderPath">The absolute path to the folder.</param>
        </member>
        <member name="M:SMLimitless.Content.ContentPackageManager.ClearOverrideFolders">
            <summary>
            Clears all loaded content override folders.
            </summary>
        </member>
        <member name="T:SMLimitless.Content.ContentPackageResourceSearcher">
            <summary>
            Searches for files in a content package given
            the file name of the resource. Also caches search
            results in order to reduce processing time.
            </summary>
        </member>
        <member name="F:SMLimitless.Content.ContentPackageResourceSearcher.owner">
            <summary>
            The ContentPackage that owns this searcher.
            </summary>
        </member>
        <member name="F:SMLimitless.Content.ContentPackageResourceSearcher.filePaths">
            <summary>
            A dictionary that maps resource names (keys)
            to file paths (values).
            </summary>
        </member>
        <member name="M:SMLimitless.Content.ContentPackageResourceSearcher.#ctor(SMLimitless.Content.ContentPackage)">
            <summary>
            Initializes a new instance of the <see cref="T:SMLimitless.Content.ContentPackageResourceSearcher"/> class.
            </summary>
            <param name="owner">The ContentPackage that owns this searcher.</param>
        </member>
        <member name="M:SMLimitless.Content.ContentPackageResourceSearcher.GetResourcePath(System.String)">
            <summary>
            Gets a file path to a resource given the resource name.
            </summary>
            <param name="resourceName">The name of the resource.</param>
            <returns>A path to the resource.</returns>
        </member>
        <member name="T:SMLimitless.Content.OverrideReader">
            <summary>
            Provides support for reading content override description files.
            </summary>
        </member>
        <member name="M:SMLimitless.Content.OverrideReader.GetOverridesFromFile(System.String)">
            <summary>
            Reads a list of overrides from a content override description file.
            </summary>
            <param name="overridesFilePath">The path to the content override description file.</param>
            <returns>A dictionary mapping level filenames to lists of folder names.</returns>
        </member>
        <member name="T:SMLimitless.Content.ResourceNotFoundException">
            <summary>
            Represents an error that occurs when a resource
            could not be found in the loaded ContentPackages
            in ContentPackageManager.
            </summary>
        </member>
        <member name="P:SMLimitless.Content.ResourceNotFoundException.LoadedPackagesStrings">
            <summary>
            Gets a read-only collection of data concerning content packages
            loaded in ContentPackageManager.
            </summary>
        </member>
        <member name="M:SMLimitless.Content.ResourceNotFoundException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SMLimitless.Content.ResourceNotFoundException"/> class.
            </summary>
        </member>
        <member name="M:SMLimitless.Content.ResourceNotFoundException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SMLimitless.Content.ResourceNotFoundException"/> class.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:SMLimitless.Content.ResourceNotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:SMLimitless.Content.ResourceNotFoundException"/> class.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference
            (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="M:SMLimitless.Content.ResourceNotFoundException.#ctor(System.String,System.Exception,System.Collections.Generic.IList{SMLimitless.Content.ContentPackage})">
            <summary>
            Initializes a new instance of the <see cref="T:SMLimitless.Content.ResourceNotFoundException"/> class.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference
            (Nothing in Visual Basic) if no inner exception is specified.</param>
            <param name="loadedPackages">A collection of content packages to retrieve data from.</param>
        </member>
        <member name="M:SMLimitless.Content.ResourceNotFoundException.#ctor(System.String,System.Collections.Generic.IList{SMLimitless.Content.ContentPackage})">
            <summary>
            Initializes a new instance of the <see cref="T:SMLimitless.Content.ResourceNotFoundException"/> class.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="loadedPackages">A collection of content packages to retrieve data from.</param>
        </member>
        <member name="T:SMLimitless.Debug.DebugAttribute">
            <summary>
            Signifies that a member is used for debugging purposes.
            </summary>
        </member>
        <member name="T:SMLimitless.Debug.DebugForm">
            <summary>
            A form that exposes debugging logs and commands to the user.
            </summary>
        </member>
        <member name="F:SMLimitless.Debug.DebugForm.MaximumDisplayedLines">
            <summary>
            The maximum number of lines that will be displayed in the log textbox before it begins to remove old lines.
            </summary>
        </member>
        <member name="F:SMLimitless.Debug.DebugForm.displayedLines">
            <summary>
            The number of lines in the log textbox.
            </summary>
        </member>
        <member name="F:SMLimitless.Debug.DebugForm.previousCommands">
            <summary>
            A collection of previously submitted commands.
            </summary>
        </member>
        <member name="F:SMLimitless.Debug.DebugForm.displayedCommandNumber">
            <summary>
            The index of the command number that is currently being displayed
            (changed when the user uses KeyUp/KeyDown to change the command).
            </summary>
        </member>
        <member name="M:SMLimitless.Debug.DebugForm.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SMLimitless.Debug.DebugForm"/> class.
            </summary>
        </member>
        <member name="M:SMLimitless.Debug.DebugForm.ButtonSubmit_Click(System.Object,System.EventArgs)">
            <summary>
            This method is called when the Submit button is clicked.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="e">Arguments for this event.</param>
        </member>
        <member name="M:SMLimitless.Debug.DebugForm.AddToLogText(System.String)">
            <summary>
            Adds a string to the debug log text.
            </summary>
            <param name="text">The text to add.</param>
        </member>
        <member name="F:SMLimitless.Debug.DebugForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:SMLimitless.Debug.DebugForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:SMLimitless.Debug.DebugForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:SMLimitless.Debug.Logger">
            <summary>
            Provides a global method to log debug, warning, and error messages to a form,
            or save logs to a file on disk.
            </summary>
        </member>
        <member name="P:SMLimitless.Debug.Logger.LoggingEnabled">
            <summary>
            Gets or sets a value indicating whether logging is enabled.
            If logging is disabled, all calls to log methods are ignored.
            </summary>
        </member>
        <member name="P:SMLimitless.Debug.Logger.DisplayLogsInDebugForm">
            <summary>
            Gets or sets a value indicating whether logs should be
            displayed in the debug form when sent.
            </summary>
        </member>
        <member name="M:SMLimitless.Debug.Logger.Log(SMLimitless.Debug.LogLevel,System.String)">
            <summary>
            Adds a message to the log and prepends it with the current time and log level.
            Additionally, sends the message to the DebugForm if the <see cref="P:SMLimitless.Debug.Logger.DisplayLogsInDebugForm"/> property is set.
            </summary>
            <param name="level">The level of message (Information, Warning, Error) at which this log message is.</param>
            <param name="message">The message to log.</param>
        </member>
        <member name="M:SMLimitless.Debug.Logger.LogInfo(System.String)">
            <summary>
            Logs an informational message.
            </summary>
            <param name="message">The informational message to log.</param>
        </member>
        <member name="M:SMLimitless.Debug.Logger.LogWarning(System.String)">
            <summary>
            Logs a warning message.
            </summary>
            <param name="message">The warning message to log.</param>
        </member>
        <member name="M:SMLimitless.Debug.Logger.LogError(System.String)">
            <summary>
            Logs an error message.
            </summary>
            <param name="message">The error message to log.</param>
        </member>
        <member name="M:SMLimitless.Debug.Logger.SaveToLogFile">
            <summary>
            Saves the log to disk in a file in the program's logs directory.
            </summary>
            <remarks>The file will be located at {program path}/logs/applog_yyyyMMdd_HHmmss.txt.</remarks>
        </member>
        <member name="T:SMLimitless.Debug.LogLevel">
            <summary>
            Enumerates the different levels of log messages.
            </summary>
        </member>
        <member name="F:SMLimitless.Debug.LogLevel.Information">
            <summary>
            Represents a message that is merely informational in nature;
            messages of this variety provide useful information for debugging,
            but are not particularly dire.
            </summary>
        </member>
        <member name="F:SMLimitless.Debug.LogLevel.Warning">
            <summary>
            Represents a message that conveys a warning about the state of the
            game or other components.
            </summary>
        </member>
        <member name="F:SMLimitless.Debug.LogLevel.Error">
            <summary>
            Represnts a message that notifies about an error that occurred in
            the game.
            </summary>
        </member>
        <member name="T:SMLimitless.Editor.EditorButton">
            <summary>
            Represents the location and image of
            an object's button on the level editor
            selection window.
            </summary>
        </member>
        <member name="F:SMLimitless.Editor.EditorButton.buttonSourceTexture">
            <summary>
            The texture on which the button's image is present.
            </summary>
        </member>
        <member name="F:SMLimitless.Editor.EditorButton.textureSourceRectangle">
            <summary>
            The part of the texture containing the button's image.
            </summary>
        </member>
        <member name="P:SMLimitless.Editor.EditorButton.Button">
            <summary>
            Gets the button that this <see cref="T:SMLimitless.Editor.EditorButton"/> describes.
            </summary>
        </member>
        <member name="P:SMLimitless.Editor.EditorButton.X">
            <summary>
            Gets or sets the distance from the left edge of the window in pixels.
            </summary>
        </member>
        <member name="P:SMLimitless.Editor.EditorButton.Y">
            <summary>
            Gets or sets the distance from the top edge of the window in pixels.
            </summary>
        </member>
        <member name="P:SMLimitless.Editor.EditorButton.Size">
            <summary>
            Gets or sets the size of the button in pixels.
            </summary>
        </member>
        <member name="P:SMLimitless.Editor.EditorButton.ButtonImage">
            <summary>
            Gets the image displayed on the button.
            </summary>
        </member>
        <member name="M:SMLimitless.Editor.EditorButton.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SMLimitless.Editor.EditorButton"/> struct.
            </summary>
            <param name="x">The distance from the left edge of the window in pixels.</param>
            <param name="y">The distance from the top edge of the window in pixels.</param>
            <param name="width">The width of the button in pixels.</param>
            <param name="height">The height of the button in pixels.</param>
        </member>
        <member name="M:SMLimitless.Editor.EditorButton.SetImage(Microsoft.Xna.Framework.Graphics.Texture2D,Microsoft.Xna.Framework.Rectangle)">
            <summary>
            Sets the image for this button.
            </summary>
            <param name="source">The texture on which the image is.</param>
            <param name="sourceRectangle">The part of the texture where the image is.</param>
        </member>
        <member name="T:SMLimitless.Editor.EditorForm">
            <summary>
            The form for the level editor's objects and properties.
            </summary>
        </member>
        <member name="P:SMLimitless.Editor.EditorForm.EditorState">
            <summary>
            Gets the state of the level editor.
            </summary>
        </member>
        <member name="M:SMLimitless.Editor.EditorForm.#ctor(SMLimitless.Sprites.Collections.Level,SMLimitless.Sprites.Collections.Section,SMLimitless.Sprites.InternalSprites.EditorSelectedObject)">
            <summary>
            Initializes a new instance of the <see cref="T:SMLimitless.Editor.EditorForm"/> class.
            </summary>
            <param name="level">The level being edited.</param>
            <param name="section">The section being edited.</param>
            <param name="selectedObject">An <see cref="T:SMLimitless.Sprites.InternalSprites.EditorSelectedObject"/> instance in the section.</param>
        </member>
        <member name="F:SMLimitless.Editor.EditorForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:SMLimitless.Editor.EditorForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:SMLimitless.Editor.EditorForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:SMLimitless.Editor.EditorState">
            <summary>
            An enumeration of states that the level editor can be in.
            </summary>
        </member>
        <member name="F:SMLimitless.Editor.EditorState.ObjectSelected">
            <summary>
            An object is selected and can be placed in the section.
            </summary>
        </member>
        <member name="F:SMLimitless.Editor.EditorState.Cursor">
            <summary>
            No object is selected, but an object can be selected by clicking it.
            </summary>
        </member>
        <member name="F:SMLimitless.Editor.EditorState.Delete">
            <summary>
            Any object clicked on will be removed from the section.
            </summary>
        </member>
        <member name="T:SMLimitless.Editor.PropertyForm">
            <summary>
            A form that can display and modify properties for game objects.
            </summary>
        </member>
        <member name="M:SMLimitless.Editor.PropertyForm.#ctor(System.Object,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:SMLimitless.Editor.PropertyForm"/> class.
            </summary>
            <param name="displayedObject">An <see cref="T:SMLimitless.Sprites.InternalSprites.EditorSelectedObject"/> instance currently in use by the level editor.</param>
        </member>
        <member name="F:SMLimitless.Editor.PropertyForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:SMLimitless.Editor.PropertyForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:SMLimitless.Editor.PropertyForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:SMLimitless.Editor.SpriteData">
            <summary>
            A class containing information about the default state for a sprite in an assembly, used by the editor to place instance of this sprite.
            </summary>
        </member>
        <member name="P:SMLimitless.Editor.SpriteData.TypeName">
            <summary>
            Gets the full type name of the sprite.
            </summary>
        </member>
        <member name="P:SMLimitless.Editor.SpriteData.EditorResourceName">
            <summary>
            Gets the name of the graphics resource to use on the editor button.
            </summary>
        </member>
        <member name="P:SMLimitless.Editor.SpriteData.EditorTextureSourceRectangle">
            <summary>
            Gets the rectangle on the editor button graphics resource that contains the texture to use on the editor button.
            </summary>
        </member>
        <member name="P:SMLimitless.Editor.SpriteData.State">
            <summary>
            Gets an integer representing the initial value of the State property of the sprite.
            </summary>
        </member>
        <member name="P:SMLimitless.Editor.SpriteData.Collision">
            <summary>
            Gets an integer representing the initial value of the Collision property of the sprite.
            </summary>
        </member>
        <member name="P:SMLimitless.Editor.SpriteData.CustomData">
            <summary>
            Gets a JSON object containing custom objects for the sprite.
            </summary>
        </member>
        <member name="M:SMLimitless.Editor.SpriteData.#ctor(System.String,System.String,Microsoft.Xna.Framework.Rectangle,System.Int32,System.Int32,Newtonsoft.Json.Linq.JObject)">
            <summary>
            Initializes a new instance of the <see cref="T:SMLimitless.Editor.SpriteData"/> class.
            </summary>
            <param name="typeName">The full type name of the sprite.</param>
            <param name="editorResourceName">The name of the graphics resource to use on the editor button.</param>
            <param name="editorTextureSourceRectangle">The rectangle on the editor button graphics resource that contains the texture to use on the editor button.</param>
            <param name="state">An integer representing the initial value of the State property of the sprite.</param>
            <param name="collision">An integer representing the initial value of the Collision property of the sprite.</param>
            <param name="customData">A JSON object containing custom objects for the sprite.</param>
        </member>
        <member name="T:SMLimitless.Editor.TileData">
            <summary>
            A class containing information about every available tile type in an assembly, as well as each variety of each tile.
            </summary>
        </member>
        <member name="P:SMLimitless.Editor.TileData.TypeName">
            <summary>
            Gets the full type name of the tile.
            </summary>
        </member>
        <member name="P:SMLimitless.Editor.TileData.DefaultStates">
            <summary>
            Gets a read-only list of the default states of this tile.
            </summary>
        </member>
        <member name="M:SMLimitless.Editor.TileData.#ctor(System.String,System.Collections.Generic.IEnumerable{SMLimitless.Editor.TileDefaultState})">
            <summary>
            Initializes a new instance of the <see cref="T:SMLimitless.Editor.TileData"/> class.
            </summary>
            <param name="typeName">The full type name of the tile.</param>
            <param name="defaultStates">An enumerable containing default states for this tile.</param>
        </member>
        <member name="T:SMLimitless.Editor.TileDefaultState">
            <summary>
            A class containing information about a certain variety of a tile.
            </summary>
        </member>
        <member name="P:SMLimitless.Editor.TileDefaultState.TypeName">
            <summary>
            Gets the full type name of the tile for which this <see cref="T:SMLimitless.Editor.TileDefaultState"/> is a variety of.
            </summary>
        </member>
        <member name="P:SMLimitless.Editor.TileDefaultState.SolidSides">
            <summary>
            Gets an integer representing either a <see cref="T:SMLimitless.Sprites.TileRectSolidSides"/> or <see cref="T:SMLimitless.Sprites.TileTriSolidSides"/> enum instance, depending on what shape the tile has.
            </summary>
        </member>
        <member name="P:SMLimitless.Editor.TileDefaultState.CollisionType">
            <summary>
            Gets an integer representing the <see cref="T:SMLimitless.Sprites.TileCollisionType"/> enum instance for this variety.
            </summary>
        </member>
        <member name="P:SMLimitless.Editor.TileDefaultState.GraphicsResource">
            <summary>
            Gets the name of the graphics resource for this variety of tile.
            </summary>
        </member>
        <member name="P:SMLimitless.Editor.TileDefaultState.State">
            <summary>
            Gets the initial state for this variety of tile.
            </summary>
        </member>
        <member name="P:SMLimitless.Editor.TileDefaultState.CustomData">
            <summary>
            Gets a JSON object containing this variety's custom data.
            </summary>
        </member>
        <member name="M:SMLimitless.Editor.TileDefaultState.#ctor(System.String,System.Int32,System.Int32,System.String,System.String,Newtonsoft.Json.Linq.JObject)">
            <summary>
            Initializes a new instance of the <see cref="T:SMLimitless.Editor.TileDefaultState"/> class.
            </summary>
            <param name="typeName">The full type name of the tile for which this <see cref="T:SMLimitless.Editor.TileDefaultState"/> instance is a variety of.</param>
            <param name="solidStates">An integer representing either a <see cref="T:SMLimitless.Sprites.TileRectSolidSides"/> or <see cref="T:SMLimitless.Sprites.TileTriSolidSides"/> enum instance, depending on what shape the tile has.</param>
            <param name="collisionType">An integer representing the <see cref="T:SMLimitless.Sprites.TileCollisionType"/> enum instance for this variety.</param>
            <param name="graphicsResource">The name of the graphics resource for this variety of tile.</param>
            <param name="state">The initial state for this variety of tile.</param>
            <param name="customData">A JSON object containing this variety's custom data.</param>
        </member>
        <member name="T:SMLimitless.Direction">
            <summary>
            Enumerates the four cardinal directions.
            </summary>
        </member>
        <member name="F:SMLimitless.Direction.None">
            <summary>
            Represents an invalid or default direction.
            </summary>
        </member>
        <member name="F:SMLimitless.Direction.Up">
            <summary>
            Represents up (negative Y).
            </summary>
        </member>
        <member name="F:SMLimitless.Direction.Down">
            <summary>
            Represents down (positive Y).
            </summary>
        </member>
        <member name="F:SMLimitless.Direction.Left">
            <summary>
            Represents left (negative X).
            </summary>
        </member>
        <member name="F:SMLimitless.Direction.Right">
            <summary>
            Represents right (positive X).
            </summary>
        </member>
        <member name="T:SMLimitless.Input.MouseButtons">
            <summary>
            Enumerates mouse buttons for the input manager.
            Credit to RCIX of StackExchange Game Development.
            </summary>
        </member>
        <member name="F:SMLimitless.Input.MouseButtons.LeftButton">
            <summary>
            Represents the left mouse button.
            </summary>
        </member>
        <member name="F:SMLimitless.Input.MouseButtons.MiddleButton">
            <summary>
            Represents the middle mouse button.
            </summary>
        </member>
        <member name="F:SMLimitless.Input.MouseButtons.RightButton">
            <summary>
            Represents the right mouse button.
            </summary>
        </member>
        <member name="F:SMLimitless.Input.MouseButtons.ExtraButton1">
            <summary>
            Represents the first extra button, usually on the left.
            </summary>
        </member>
        <member name="F:SMLimitless.Input.MouseButtons.ExtraButton2">
            <summary>
            Represents the second extra button, usually on the right.
            </summary>
        </member>
        <member name="T:SMLimitless.Input.InputManager">
            <summary>
            Provides access to current and previous keyboard and mouse states for use in input.
            This class is mostly built from RCIX's XNA InputManager class that he posted on Stack Exchange.
            </summary>
        </member>
        <member name="F:SMLimitless.Input.InputManager.lastKeyboardState">
            <summary>
            The keyboard state at the call before last to Update().
            </summary>
        </member>
        <member name="F:SMLimitless.Input.InputManager.currentKeyboardState">
            <summary>
            The keyboard state at the last call to Update().
            </summary>
        </member>
        <member name="F:SMLimitless.Input.InputManager.lastMouseState">
            <summary>
            The mouse state at the call before last to Update().
            </summary>
        </member>
        <member name="F:SMLimitless.Input.InputManager.currentMouseState">
            <summary>
            The mouse state at the last call to Update().
            </summary>
        </member>
        <member name="F:SMLimitless.Input.InputManager.inputBindings">
            <summary>
            A collection of input actions and their corresponding input objects.
            </summary>
        </member>
        <member name="P:SMLimitless.Input.InputManager.LastKeyboardState">
            <summary>
            Gets the keyboard state at the call before last to Update().
            </summary>
        </member>
        <member name="P:SMLimitless.Input.InputManager.CurrentKeyboardState">
            <summary>
            Gets the keyboard state at the last call to Update().
            </summary>
        </member>
        <member name="P:SMLimitless.Input.InputManager.LastMouseState">
            <summary>
            Gets the mouse state at the last call to Update().
            </summary>
        </member>
        <member name="P:SMLimitless.Input.InputManager.CurrentMouseState">
            <summary>
            Gets the mouse state at the last call to Update().
            </summary>
        </member>
        <member name="P:SMLimitless.Input.InputManager.MousePosition">
            <summary>
            Gets the current position of the mouse.
            </summary>
        </member>
        <member name="P:SMLimitless.Input.InputManager.MouseVelocity">
            <summary>
            Gets the current velocity of the mouse,
            determined as the difference in the positions
            of the current and the last mouse states.
            </summary>
        </member>
        <member name="P:SMLimitless.Input.InputManager.MouseWheelPosition">
            <summary>
            Gets the current position of the mouse's scroll wheel.
            </summary>
        </member>
        <member name="P:SMLimitless.Input.InputManager.MouseWheelVelocity">
            <summary>
            Gets the current velocity of the mouse's scroll wheel,
            determined by the difference of the
            current and the last scroll wheel positions.
            </summary>
        </member>
        <member name="M:SMLimitless.Input.InputManager.Initialize">
            <summary>
            Initializes the InputManager.
            </summary>
        </member>
        <member name="M:SMLimitless.Input.InputManager.ReloadBindings">
            <summary>
            Reloads the key bindings.
            </summary>
        </member>
        <member name="M:SMLimitless.Input.InputManager.Update">
            <summary>
            Updates the keyboard and mouse states.
            The current states becomes the last state.
            </summary>
        </member>
        <member name="M:SMLimitless.Input.InputManager.IsNewKeyPress(Microsoft.Xna.Framework.Input.Keys)">
            <summary>
            Determines if a key has been pressed on this frame but not the last.
            </summary>
            <param name="key">The key to check.</param>
            <returns>True if the key press is new, false otherwise.</returns>
        </member>
        <member name="M:SMLimitless.Input.InputManager.IsCurrentKeyPress(Microsoft.Xna.Framework.Input.Keys)">
            <summary>
            Determines if a key has been pressed on this frame and the last.
            </summary>
            <param name="key">The key to check.</param>
            <returns>True if the key press is current, false otherwise.</returns>
        </member>
        <member name="M:SMLimitless.Input.InputManager.IsOldKeyPress(Microsoft.Xna.Framework.Input.Keys)">
            <summary>
            Determines if a key was pressed on the last frame but not this one.
            </summary>
            <param name="key">The key to check.</param>
            <returns>True if the key press is old, false otherwise.</returns>
        </member>
        <member name="M:SMLimitless.Input.InputManager.IsMouseInWindow">
            <summary>
            Returns a value indicating whether the mouse cursor is within the bounds of the window.
            </summary>
            <returns>True if the cursor is within the window, false if it is not.</returns>
        </member>
        <member name="M:SMLimitless.Input.InputManager.IsNewMousePress(SMLimitless.Input.MouseButtons)">
            <summary>
            Determines if a mouse button was pressed on this frame but not the last.
            </summary>
            <param name="button">The button to check.</param>
            <returns>True if the mouse press is new, false otherwise.</returns>
        </member>
        <member name="M:SMLimitless.Input.InputManager.IsCurrentMousePress(SMLimitless.Input.MouseButtons)">
            <summary>
            Determines if a mouse button was pressed in the last frame and this one.
            </summary>
            <param name="button">The button to check.</param>
            <returns>True if the mouse press is current, false if otherwise.</returns>
        </member>
        <member name="M:SMLimitless.Input.InputManager.IsOldMousePress(SMLimitless.Input.MouseButtons)">
            <summary>
            Determines if a mouse button was pressed on the last frame but not this one.
            </summary>
            <param name="button">The button to check.</param>
            <returns>True if the mouse press is old, false if otherwise.</returns>
        </member>
        <member name="M:SMLimitless.Input.InputManager.IsNewActionPress(SMLimitless.Input.InputAction)">
            <summary>
            Determines if an input action was pressed in the current frame but not the last.
            </summary>
            <param name="action">The action to check.</param>
            <returns>True if this is a new action, false if otherwise.</returns>
        </member>
        <member name="M:SMLimitless.Input.InputManager.IsCurrentActionPress(SMLimitless.Input.InputAction)">
            <summary>
            Determines if an input action was pressed in the current frame and the last.
            </summary>
            <param name="action">The action to check.</param>
            <returns>True if this is a current action, false if otherwise.</returns>
        </member>
        <member name="M:SMLimitless.Input.InputManager.IsOldActionPress(SMLimitless.Input.InputAction)">
            <summary>
            Determines if an input action was pressed in the last frame but not the current.
            </summary>
            <param name="action">The action to check.</param>
            <returns>True if this is an old action, false if otherwise.</returns>
        </member>
        <member name="M:SMLimitless.Input.InputManager.GetDirectionalInputVector">
            <summary>
            Returns a vector that represents the arrow keys being pressed.
            </summary>
            <returns>A vector.</returns>
        </member>
        <member name="T:SMLimitless.Input.InputAction">
            <summary>
            Defines actions performed by input.
            </summary>
        </member>
        <member name="F:SMLimitless.Input.InputAction.Up">
            <summary>
            The "up" action.
            An example of usage is a player holding Up to enter a pipe.
            </summary>
        </member>
        <member name="F:SMLimitless.Input.InputAction.Down">
            <summary>
            The "down" action.
            An example of usage is a player holding Down to duck.
            </summary>
        </member>
        <member name="F:SMLimitless.Input.InputAction.Left">
            <summary>
            The "left" action.
            An example of usage is a player holding Left to move left.
            </summary>
        </member>
        <member name="F:SMLimitless.Input.InputAction.Right">
            <summary>
            The "right" action.
            An example of usage is a player holding Right to move right.
            </summary>
        </member>
        <member name="F:SMLimitless.Input.InputAction.Jump">
            <summary>
            The "jump" action.
            An example of usage is a player pressing Jump to jump into the air.
            </summary>
        </member>
        <member name="F:SMLimitless.Input.InputAction.SpinJump">
            <summary>
            The "spin jump" action.
            An example of usage is a player pressing Spin Jump to perform a spin jump.
            </summary>
        </member>
        <member name="F:SMLimitless.Input.InputAction.Run">
            <summary>
            The "run" action.
            An example of usage is a player pressing Run to begin moving faster.
            </summary>
        </member>
        <member name="F:SMLimitless.Input.InputAction.AltRun">
            <summary>
            The "alternate run" action.
            Performs much the same action as the "run" action, but can be set do other things.
            </summary>
        </member>
        <member name="F:SMLimitless.Input.InputAction.Pause">
            <summary>
            The "pause" action.
            An example of usage is a user pressing Pause to pause the game.
            </summary>
        </member>
        <member name="T:SMLimitless.Input.InputObject">
            <summary>
            Represents an input from a keyboard or mouse.
            </summary>
        </member>
        <member name="F:SMLimitless.Input.InputObject.source">
            <summary>
            The backing field for the Source property.
            </summary>
        </member>
        <member name="P:SMLimitless.Input.InputObject.Source">
            <summary>
            Gets the source of this input.
            </summary>
        </member>
        <member name="F:SMLimitless.Input.InputObject.inputValue">
            <summary>
            Represents the enumeration value of this input, cast to int.
            </summary>
        </member>
        <member name="M:SMLimitless.Input.InputObject.#ctor(Microsoft.Xna.Framework.Input.Keys)">
            <summary>
            Initializes a new instance of the <see cref="T:SMLimitless.Input.InputObject"/> struct.
            </summary>
            <param name="keys">A key.</param>
        </member>
        <member name="M:SMLimitless.Input.InputObject.#ctor(SMLimitless.Input.MouseButtons)">
            <summary>
            Initializes a new instance of the <see cref="T:SMLimitless.Input.InputObject"/> struct.
            </summary>
            <param name="mouse">A MouseButtons instance used to initialize this struct.</param>
        </member>
        <member name="M:SMLimitless.Input.InputObject.Parse(System.String)">
            <summary>
            Parses an input object from a string.
            </summary>
            <param name="value">The value to parse.</param>
            <returns>An input object as parsed by string.</returns>
        </member>
        <member name="M:SMLimitless.Input.InputObject.TryParse(System.String,SMLimitless.Input.InputObject@)">
            <summary>
            Tries to parse a value into an InputObject.
            </summary>
            <param name="value">The value to parse.</param>
            <param name="output">The InputObject to output the parse result to.</param>
            <returns>True if the value can be parsed, false if otherwise.</returns>
        </member>
        <member name="M:SMLimitless.Input.InputObject.IsDown(Microsoft.Xna.Framework.Input.KeyboardState)">
            <summary>
            Determines if the keyboard key represented by this object is down.
            </summary>
            <param name="keys">The keyboard state to check.</param>
            <returns>True if the key is down, false if otherwise.</returns>
        </member>
        <member name="M:SMLimitless.Input.InputObject.IsDown(Microsoft.Xna.Framework.Input.MouseState)">
            <summary>
            Determines if the mouse button represented by this object is down.
            </summary>
            <param name="mouse">The mouse state to check.</param>
            <returns>True if the button is down, false if otherwise.</returns>
        </member>
        <member name="M:SMLimitless.Input.InputObject.IsDown(Microsoft.Xna.Framework.Input.KeyboardState,Microsoft.Xna.Framework.Input.MouseState)">
            <summary>
            Determines if this input object is down.
            </summary>
            <param name="keys">The keyboard state to check.</param>
            <param name="mouse">The mouse state to check.</param>
            <returns>True if the input object is down, false if otherwise.</returns>
        </member>
        <member name="M:SMLimitless.Input.InputObject.IsUp(Microsoft.Xna.Framework.Input.KeyboardState)">
            <summary>
            Determines if the keyboard key represented by this object is up.
            </summary>
            <param name="keys">The keyboard state to check.</param>
            <returns>True if the key is up, false if otherwise.</returns>
        </member>
        <member name="M:SMLimitless.Input.InputObject.IsUp(Microsoft.Xna.Framework.Input.MouseState)">
            <summary>
            Determines if the mouse button represented by this object is up.
            </summary>
            <param name="mouse">The mouse state to check.</param>
            <returns>True if the button is up, false if otherwise.</returns>
        </member>
        <member name="M:SMLimitless.Input.InputObject.IsUp(Microsoft.Xna.Framework.Input.KeyboardState,Microsoft.Xna.Framework.Input.MouseState)">
            <summary>
            Determines if this input object is up.
            </summary>
            <param name="keys">The keyboard state to check.</param>
            <param name="mouse">The mouse state to check.</param>
            <returns>True if the input object is up, false if otherwise.</returns>
        </member>
        <member name="M:SMLimitless.Input.InputObject.ToString">
            <summary>
            Returns a string representation of this InputObject.
            </summary>
            <returns>A string reading "Keyboard: " or "Mouse: ", followed by the key or mouse button.</returns>
        </member>
        <member name="T:SMLimitless.Input.InputSource">
            <summary>
            An enumeration of sources of input.
            </summary>
        </member>
        <member name="F:SMLimitless.Input.InputSource.Keyboard">
            <summary>
            A plastic board with a group of plastic keys,
            each printed with a character or set of characters.
            </summary>
        </member>
        <member name="F:SMLimitless.Input.InputSource.Mouse">
            <summary>
            A plastic strangely-shaped object that can easily be moved around.
            Controls an image on a monitor that can be used to point at other
            images on the monitor. Has at least two buttons that can be used
            to perform actions with or using the images.
            </summary>
        </member>
        <member name="T:SMLimitless.Sprites.SpriteDirection">
            <summary>
            Enumerates the directions a sprite faces when first loaded in a level, or when the sprite enters the visible area.
            </summary>
        </member>
        <member name="F:SMLimitless.Sprites.SpriteDirection.FacePlayer">
            <summary>
            The sprite will be loaded facing the player.
            </summary>
        </member>
        <member name="F:SMLimitless.Sprites.SpriteDirection.Left">
            <summary>
            The sprite will be loaded facing left.
            </summary>
        </member>
        <member name="F:SMLimitless.Sprites.SpriteDirection.Right">
            <summary>
            The sprite will be loaded facing right.
            </summary>
        </member>
        <member name="T:SMLimitless.Sprites.TileCollisionType">
            <summary>
            Enumerates which sides of a tile can be collided with.
            </summary>
        </member>
        <member name="F:SMLimitless.Sprites.TileCollisionType.Solid">
            <summary>
            This tile is completely solid on all sides.
            Sprites that are embedded in the tiles will be forced to the left.
            Sprites that are embedded between a tile and a moving tile (or two moving tiles) will be destroyed.
            </summary>
        </member>
        <member name="F:SMLimitless.Sprites.TileCollisionType.TopSolid">
            <summary>
            This tile is only solid on the top.
            Sprites will pass through all the other sides.
            </summary>
        </member>
        <member name="F:SMLimitless.Sprites.TileCollisionType.BottomSolid">
            <summary>
            This tile is only solid on the bottom.
            Sprites will pass through all the other sides.
            </summary>
        </member>
        <member name="F:SMLimitless.Sprites.TileCollisionType.LeftSolid">
            <summary>
            This tile is only solid on the left side.
            Sprites will pass through all the other sides.
            </summary>
        </member>
        <member name="F:SMLimitless.Sprites.TileCollisionType.RightSolid">
            <summary>
            This tile is only solid on the right side.
            Sprites will pass through all the other sides.
            </summary>
        </member>
        <member name="F:SMLimitless.Sprites.TileCollisionType.Passive">
            <summary>
            This tile is not solid on any side.
            </summary>
        </member>
        <member name="T:SMLimitless.Sprites.TileRectSolidSides">
            <summary>
            Enumerates the solid sides of a rectangular tile.
            </summary>
        </member>
        <member name="F:SMLimitless.Sprites.TileRectSolidSides.NotARectangle">
            <summary>
            This collidable shape is not a rectangle.
            </summary>
        </member>
        <member name="F:SMLimitless.Sprites.TileRectSolidSides.Passive">
            <summary>
            No side is solid.
            </summary>
        </member>
        <member name="F:SMLimitless.Sprites.TileRectSolidSides.Top">
            <summary>
            The top side is solid.
            </summary>
        </member>
        <member name="F:SMLimitless.Sprites.TileRectSolidSides.Bottom">
            <summary>
            The bottom side is solid.
            </summary>
        </member>
        <member name="F:SMLimitless.Sprites.TileRectSolidSides.Left">
            <summary>
            The left side is solid.
            </summary>
        </member>
        <member name="F:SMLimitless.Sprites.TileRectSolidSides.Right">
            <summary>
            The right side is solid.
            </summary>
        </member>
        <member name="T:SMLimitless.Sprites.TileTriSolidSides">
            <summary>
            Enumerates the solid sides of a sloped tile.
            </summary>
        </member>
        <member name="F:SMLimitless.Sprites.TileTriSolidSides.NotATriangle">
            <summary>
            This collidable shape is not a triangle.
            </summary>
        </member>
        <member name="F:SMLimitless.Sprites.TileTriSolidSides.Passive">
            <summary>
            No side is solid.
            </summary>
        </member>
        <member name="F:SMLimitless.Sprites.TileTriSolidSides.Slope">
            <summary>
            The sloped side is solid.
            </summary>
        </member>
        <member name="F:SMLimitless.Sprites.TileTriSolidSides.VerticalLeg">
            <summary>
            The vertical side is solid.
            </summary>
        </member>
        <member name="F:SMLimitless.Sprites.TileTriSolidSides.HorizontalLeg">
            <summary>
            The horizontal side is solid.
            </summary>
        </member>
        <member name="T:SMLimitless.Sprites.TileAdjacencyFlags">
            <summary>
            An enumeration listing if there is a sloped tile on either side of a tile.
            </summary>
        </member>
        <member name="F:SMLimitless.Sprites.TileAdjacencyFlags.NoAdjacentSlopes">
            <summary>
            There are no sloped tiles on either side of this tile.
            </summary>
        </member>
        <member name="F:SMLimitless.Sprites.TileAdjacencyFlags.SlopeOnLeft">
            <summary>
            There is a sloped tile to the left of this tile.
            </summary>
        </member>
        <member name="F:SMLimitless.Sprites.TileAdjacencyFlags.SlopeOnRight">
            <summary>
            There is a sloped tile to the right of this tile.
            </summary>
        </member>
        <member name="T:SMLimitless.Sprites.SpriteCollisionMode">
            <summary>
            Enumerates different modes of collision handling
            that sprites can choose between.
            </summary>
        </member>
        <member name="F:SMLimitless.Sprites.SpriteCollisionMode.OffsetNotify">
            <summary>
            Sprites that are colliding with solid tiles or other sprites
            are offset such that they are moved out of the tile(s).
            Then, collision handler methods are called on both
            the sprite and the tile.
            </summary>
        </member>
        <member name="F:SMLimitless.Sprites.SpriteCollisionMode.OffsetOnly">
            <summary>
            Sprites that are colliding with solid tiles or other sprites
            are offset such that they are moved out of the tile(s).
            No collision handlers are run.
            </summary>
        </member>
        <member name="F:SMLimitless.Sprites.SpriteCollisionMode.NotifyOnly">
            <summary>
            Collision handler methods are called on both the
            colliding sprite and colliding tile. No offsetting
            is performed.
            </summary>
        </member>
        <member name="F:SMLimitless.Sprites.SpriteCollisionMode.NoCollision">
            <summary>
            The sprite does not collide with any object.
            </summary>
        </member>
        <member name="T:SMLimitless.Sprites.SpriteState">
            <summary>
            Enumerates the different states of sprites.
            </summary>
        </member>
        <member name="F:SMLimitless.Sprites.SpriteState.Default">
            <summary>
            The default state.
            </summary>
        </member>
        <member name="F:SMLimitless.Sprites.SpriteState.Stunned">
            <summary>
            Sprites in this state have been temporarily stopped by the player and are usually harmless.
            </summary>
        </member>
        <member name="F:SMLimitless.Sprites.SpriteState.Projectile">
            <summary>
            Sprites in this state are projectiles that can render damage to other sprites.
            </summary>
        </member>
        <member name="F:SMLimitless.Sprites.SpriteState.ProjectileFire">
            <summary>
            Sprites in this state are fire projectiles that can render damage to other sprites.
            </summary>
        </member>
        <member name="F:SMLimitless.Sprites.SpriteState.ProjectileIce">
            <summary>
            Sprites in this state are ice projectiles that can freeze other sprites.
            </summary>
        </member>
        <member name="F:SMLimitless.Sprites.SpriteState.Dead">
            <summary>
            Sprites in this state are dead and should not be interacted with.
            </summary>
        </member>
        <member name="T:SMLimitless.Sprites.Collections.CameraScrollType">
            <summary>
            Enumerates the ways a camera scrolls through a section.
            </summary>
        </member>
        <member name="F:SMLimitless.Sprites.Collections.CameraScrollType.FreelyMoving">
            <summary>
            The camera freely moves horizontally and vertically.
            </summary>
        </member>
        <member name="F:SMLimitless.Sprites.Collections.CameraScrollType.Fixed">
            <summary>
            The camera is fixed at a certain position.
            </summary>
        </member>
        <member name="F:SMLimitless.Sprites.Collections.CameraScrollType.HorizontalOnly">
            <summary>
            The camera only moves horizontally.
            </summary>
        </member>
        <member name="F:SMLimitless.Sprites.Collections.CameraScrollType.HorizontalUnlessRunning">
            <summary>
            The camera only moves horizontally unless
            the player is at running speed or there
            are multiple players at once.
            </summary>
        </member>
        <member name="F:SMLimitless.Sprites.Collections.CameraScrollType.VerticalOnly">
            <summary>
            The camera only moves vertically.
            </summary>
        </member>
        <member name="F:SMLimitless.Sprites.Collections.CameraScrollType.AutoScroll">
            <summary>
            The camera is moving at a fixed rate at a certain direction.
            </summary>
        </member>
        <member name="F:SMLimitless.Sprites.Collections.CameraScrollType.AutoScrollAlongPath">
            <summary>
            The camera is moving along a predetermined path.
            </summary>
        </member>
        <member name="T:SMLimitless.Sprites.Collections.ScreenExitBehavior">
            <summary>
            Enumerates how players interact with
            screen exits and entrances.
            </summary>
        </member>
        <member name="F:SMLimitless.Sprites.Collections.ScreenExitBehavior.Default">
            <summary>
            The default behavior.
            This is considered an invalid state.
            </summary>
        </member>
        <member name="F:SMLimitless.Sprites.Collections.ScreenExitBehavior.PipeDown">
            <summary>
            The player enters the exit by pressing Down
            while within the exit.
            </summary>
        </member>
        <member name="F:SMLimitless.Sprites.Collections.ScreenExitBehavior.PipeUp">
            <summary>
            The player enters the exit by jumping to it
            and pressing Up while within the exit.
            </summary>
        </member>
        <member name="F:SMLimitless.Sprites.Collections.ScreenExitBehavior.PipeLeft">
            <summary>
            The player enters the exit by walking and
            pressing Left while within the exit.
            </summary>
        </member>
        <member name="F:SMLimitless.Sprites.Collections.ScreenExitBehavior.PipeRight">
            <summary>
            The player enters the exit by walking
            and pressing Right while within the exit.
            </summary>
        </member>
        <member name="F:SMLimitless.Sprites.Collections.ScreenExitBehavior.DoorEnter">
            <summary>
            The players enters the exit by pressing Up
            while within the exit.
            </summary>
        </member>
        <member name="T:SMLimitless.Sprites.Collections.BackgroundScrollDirection">
            <summary>
            Enumerates the direction in which
            a section background scrolls.
            </summary>
        </member>
        <member name="F:SMLimitless.Sprites.Collections.BackgroundScrollDirection.Fixed">
            <summary>
            The background remains fixed on the screen.
            </summary>
            <remarks>
            If the background is larger than the screen,
            the background will shift slightly as the player
            moves through the level. If the camera is at the
            top of the level, the top of the background will
            be displayed. Likewise, if the camera is at the
            bottom of the level, the bottom of the background
            will be displayed. This applies across both axes.
            </remarks>
        </member>
        <member name="F:SMLimitless.Sprites.Collections.BackgroundScrollDirection.Horizontal">
            <summary>
            The background will scroll and repeat horizontally.
            </summary>
            <remarks>
            If the background is taller than the screen,
            the background will shift slightly as the players
            moves vertically through the level. If the camera is at the
            top of the level, the top of the background will
            be displayed. Likewise, if the camera is at the
            bottom of the level, the bottom of the background
            will be displayed.
            </remarks>
        </member>
        <member name="F:SMLimitless.Sprites.Collections.BackgroundScrollDirection.Vertical">
            <summary>
            The background will scroll and repeat vertically.
            </summary>
            <remarks>
            If the background is wider than the screen,
            the background will shift slightly as the players
            moves horizontally through the level. If the camera is
            at the left edge of the level, the left edge of the
            background will be displayed. Likewise, if the camera
            is at the right edge of the level, the right edge of the
            background will be displayed.
            </remarks>
        </member>
        <member name="F:SMLimitless.Sprites.Collections.BackgroundScrollDirection.Both">
            <summary>
            The background will scroll and repeat along both axes.
            </summary>
        </member>
        <member name="T:SMLimitless.Sprites.Collections.Background">
            <summary>
            A tileable, moving, optionally parallax background image
            used in sections.
            </summary>
        </member>
        <member name="F:SMLimitless.Sprites.Collections.Background.backgroundGradient">
            <summary>
            The gradient texture, composed from the top and bottom colors.
            </summary>
        </member>
        <member name="F:SMLimitless.Sprites.Collections.Background.owner">
            <summary>
            A reference to the section that owns this background.
            </summary>
        </member>
        <member name="F:SMLimitless.Sprites.Collections.Background.isContentLoaded">
            <summary>
            A flag indicating if the content has been loaded.
            </summary>
        </member>
        <member name="P:SMLimitless.Sprites.Collections.Background.Layers">
            <summary>
            Gets or sets a collection of all the background Layers composing this background.
            </summary>
        </member>
        <member name="P:SMLimitless.Sprites.Collections.Background.BottomColor">
            <summary>
            Gets the color at the bottom of the screen.
            </summary>
        </member>
        <member name="P:SMLimitless.Sprites.Collections.Background.TopColor">
            <summary>
            Gets the color at the top of the screen.
            </summary>
        </member>
        <member name="M:SMLimitless.Sprites.Collections.Background.#ctor(SMLimitless.Sprites.Collections.Section)">
            <summary>
            Initializes a new instance of the <see cref="T:SMLimitless.Sprites.Collections.Background"/> class.
            </summary>
            <param name="owner">A reference to the section that owns this background.</param>
        </member>
        <member name="M:SMLimitless.Sprites.Collections.Background.Initialize">
            <summary>
            Initializes this background.
            </summary>
        </member>
        <member name="M:SMLimitless.Sprites.Collections.Background.LoadContent">
            <summary>
            Loads the content (images and gradient texture) for this background.
            </summary>
        </member>
        <member name="M:SMLimitless.Sprites.Collections.Background.Update">
            <summary>
            Updates this background.
            Background Layers will scroll according to the camera's movement.
            </summary>
        </member>
        <member name="M:SMLimitless.Sprites.Collections.Background.Draw">
            <summary>
            Draws the background, including the gradient and all textures.
            </summary>
        </member>
        <member name="M:SMLimitless.Sprites.Collections.Background.AddLayerToFront(SMLimitless.Sprites.Collections.BackgroundLayer)">
            <summary>
            Adds a given background layer to the front of the background.
            </summary>
            <param name="layer">The background layer to add.</param>
        </member>
        <member name="M:SMLimitless.Sprites.Collections.Background.GetSerializableObjects">
            <summary>
            Returns an anonymous object containing all the objects
            used in serialization of this background.
            </summary>
            <returns>The objects to serialize.</returns>
        </member>
        <member name="M:SMLimitless.Sprites.Collections.Background.Serialize">
            <summary>
            Converts this background into a JSON string.
            </summary>
            <returns>A JSON string containing the objects of this background.</returns>
        </member>
        <member name="M:SMLimitless.Sprites.Collections.Background.Deserialize(System.String)">
            <summary>
            Loads a background from a JSON string.
            </summary>
            <param name="json">A JSON string containing a valid background.</param>
        </member>
        <member name="T:SMLimitless.Sprites.Collections.BackgroundLayer">
            <summary>
            A single layer of a section background.
            Contains one image that scrolls at a given rate.
            </summary>
        </member>
        <member name="F:SMLimitless.Sprites.Collections.BackgroundLayer.backgroundTexture">
            <summary>
            The background texture of this layer.
            </summary>
        </member>
        <member name="F:SMLimitless.Sprites.Collections.BackgroundLayer.camera">
            <summary>
            A reference to the camera that this background is following.
            </summary>
        </member>
        <member name="F:SMLimitless.Sprites.Collections.BackgroundLayer.delta">
            <summary>
            The overall displacement of this layer.
            </summary>
        </member>
        <member name="F:SMLimitless.Sprites.Collections.BackgroundLayer.oldCameraPosition">
            <summary>
            The camera's position in the last frame.
            </summary>
        </member>
        <member name="F:SMLimitless.Sprites.Collections.BackgroundLayer.sectionBounds">
            <summary>
            The bounds of the section that this layer is contained within.
            </summary>
        </member>
        <member name="F:SMLimitless.Sprites.Collections.BackgroundLayer.textureSize">
            <summary>
            The size of the texture in pixels.
            </summary>
        </member>
        <member name="F:SMLimitless.Sprites.Collections.BackgroundLayer.isContentLoaded">
            <summary>
            Determines whether the content for this background layer has been loaded.
            </summary>
        </member>
        <member name="P:SMLimitless.Sprites.Collections.BackgroundLayer.BackgroundTextureResourceName">
            <summary>
            Gets or sets the resource name of the background texture.
            </summary>
        </member>
        <member name="P:SMLimitless.Sprites.Collections.BackgroundLayer.ScrollDirection">
            <summary>
            Gets the direction that this background layer scrolls.
            </summary>
        </member>
        <member name="P:SMLimitless.Sprites.Collections.BackgroundLayer.ScrollRate">
            <summary>
            Gets the rate that this background scrolls.
            A value of 1 will scroll as fast as the camera.
            Values greater or lesser than 1 will scroll faster or slower than the camera, respectively.
            </summary>
        </member>
        <member name="P:SMLimitless.Sprites.Collections.BackgroundLayer.Delta">
            <summary>
            Gets the overall displacement of this layer.
            </summary>
        </member>
        <member name="M:SMLimitless.Sprites.Collections.BackgroundLayer.#ctor(SMLimitless.Physics.Camera2D,SMLimitless.Physics.BoundingRectangle)">
            <summary>
            Initializes a new instance of the <see cref="T:SMLimitless.Sprites.Collections.BackgroundLayer"/> class.
            </summary>
            <param name="ownerCamera">The camera of the section that contains this layer.</param>
            <param name="sectionBounds">The bounds of the section that contains this layer.</param>
        </member>
        <member name="M:SMLimitless.Sprites.Collections.BackgroundLayer.Initialize">
            <summary>
            Initializes this layer.
            </summary>
        </member>
        <member name="M:SMLimitless.Sprites.Collections.BackgroundLayer.LoadContent">
            <summary>
            Loads the content of this layer.
            </summary>
        </member>
        <member name="M:SMLimitless.Sprites.Collections.BackgroundLayer.Update">
            <summary>
            Updates this layer's position based on the camera's movement.
            </summary>
        </member>
        <member name="M:SMLimitless.Sprites.Collections.BackgroundLayer.Draw">
            <summary>
            Draws this layer to the screen.
            </summary>
        </member>
        <member name="M:SMLimitless.Sprites.Collections.BackgroundLayer.GetTextureTileDrawPoints(Microsoft.Xna.Framework.Vector2)">
            <summary>
            Returns a list of all the points to which to draw the tiled background texture.
            </summary>
            <param name="baseTextureDrawPosition">A single point where the texture will be drawn.</param>
            <returns>A list of vectors.</returns>
        </member>
        <member name="M:SMLimitless.Sprites.Collections.BackgroundLayer.GetSerializableObjects">
            <summary>
            Returns the serializable objects for this layer.
            </summary>
            <returns>An anonymous object containing the background texture's resource name, and the layer's scroll direction and rate.</returns>
        </member>
        <member name="M:SMLimitless.Sprites.Collections.BackgroundLayer.Serialize">
            <summary>
            Returns a JSON string containing this layer.
            </summary>
            <returns>A JSON string containing this layer.</returns>
        </member>
        <member name="M:SMLimitless.Sprites.Collections.BackgroundLayer.Deserialize(System.String)">
            <summary>
            Loads a background layer, given a JSON string containing a background layer.
            </summary>
            <param name="json">A valid JSON string.</param>
        </member>
        <member name="T:SMLimitless.Sprites.Collections.EventScript">
            <summary>
            A C# script that is used to manipulate levels and the objects within them.
            </summary>
        </member>
        <member name="P:SMLimitless.Sprites.Collections.EventScript.Script">
            <summary>
            Gets or sets the text of the C# script.
            </summary>
        </member>
        <member name="M:SMLimitless.Sprites.Collections.EventScript.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SMLimitless.Sprites.Collections.EventScript"/> class.
            </summary>
        </member>
        <member name="M:SMLimitless.Sprites.Collections.EventScript.GetSerializableObjects">
            <summary>
            Returns an anonymous object containing key objects of this script.
            </summary>
            <returns>An anonymous object containing the script.</returns>
        </member>
        <member name="M:SMLimitless.Sprites.Collections.EventScript.Serialize">
            <summary>
            Returns a JSON string from the key objects of this script.
            </summary>
            <returns>A JSON string containing this script.</returns>
        </member>
        <member name="M:SMLimitless.Sprites.Collections.EventScript.Deserialize(System.String)">
            <summary>
            Loads a script, given a JSON string containing a script.
            </summary>
            <param name="json">A valid JSON string.</param>
        </member>
        <member name="T:SMLimitless.Sprites.Collections.Layer">
            <summary>
            Represents a grid containing tiles, itself containing sprites.
            </summary>
        </member>
        <member name="P:SMLimitless.Sprites.Collections.Layer.IsMainLayer">
            <summary>
            Gets a value indicating whether this layer is the main layer in its owner section.
            </summary>
        </member>
        <member name="P:SMLimitless.Sprites.Collections.Layer.Bounds">
            <summary>
            Gets the bounds of this layer; the rectangle containing all tiles in the layer.
            </summary>
        </member>
        <member name="P:SMLimitless.Sprites.Collections.Layer.Position">
            <summary>
            Gets the position of the layer; the position of the top-left corner of the <see cref="P:SMLimitless.Sprites.Collections.Layer.Bounds"/>.
            </summary>
        </member>
        <member name="P:SMLimitless.Sprites.Collections.Layer.Index">
            <summary>
            Gets the numeric index of this layer in its owner section.
            </summary>
        </member>
        <member name="P:SMLimitless.Sprites.Collections.Layer.Name">
            <summary>
            Gets or sets the name of this layer.
            </summary>
        </member>
        <member name="M:SMLimitless.Sprites.Collections.Layer.#ctor(SMLimitless.Sprites.Collections.Section,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:SMLimitless.Sprites.Collections.Layer"/> class.
            </summary>
            <param name="cOwner">The section that owns this layer.</param>
            <param name="isMainLayer">A value indicating whether this layer is the main layer in its owner section. Defaults to false.</param>
        </member>
        <member name="M:SMLimitless.Sprites.Collections.Layer.Initialize">
            <summary>
            Initializes the tiles and sprites in this layer.
            </summary>
        </member>
        <member name="M:SMLimitless.Sprites.Collections.Layer.LoadContent">
            <summary>
            Loads the content of the tiles and sprites in this layer.
            </summary>
        </member>
        <member name="M:SMLimitless.Sprites.Collections.Layer.Update">
            <summary>
            Updates the contents of this layer.
            </summary>
        </member>
        <member name="M:SMLimitless.Sprites.Collections.Layer.Draw(Microsoft.Xna.Framework.Color)">
            <summary>
            Draws the outline of the <see cref="P:SMLimitless.Sprites.Collections.Layer.Bounds"/> of this layer.
            </summary>
            <param name="color">The color to draw the outline.</param>
        </member>
        <member name="M:SMLimitless.Sprites.Collections.Layer.AddTiles(System.Collections.Generic.IEnumerable{SMLimitless.Sprites.Tile})">
            <summary>
            Adds the tiles in an enumerable to this layer.
            </summary>
            <param name="tiles">An enumerable of zero or more tiles.</param>
            <exception cref="T:System.ArgumentException">Thrown if any tile in the enumerable is not grid-aligned.</exception>
        </member>
        <member name="M:SMLimitless.Sprites.Collections.Layer.RemoveTile(SMLimitless.Sprites.Tile)">
            <summary>
            Removes a tile from this layer.
            </summary>
            <param name="tile">The tile to remove.</param>
        </member>
        <member name="M:SMLimitless.Sprites.Collections.Layer.GetCellNumberAtPosition(Microsoft.Xna.Framework.Vector2)">
            <summary>
            Gets the cell number at a given position.
            </summary>
            <param name="position">The given position.</param>
            <returns>A <see cref="T:Microsoft.Xna.Framework.Vector2"/> containing the cell number at the position.</returns>
            <remarks>Returns cell numbers for positions outside the <see cref="P:SMLimitless.Sprites.Collections.Layer.Bounds"/> of the layer.</remarks>
        </member>
        <member name="M:SMLimitless.Sprites.Collections.Layer.GetClampedCellNumberAtPosition(Microsoft.Xna.Framework.Vector2)">
            <summary>
            Gets the cell number at a given position, or the cell number along an edge or corner for out-of-bounds positions.
            </summary>
            <param name="position">The given position.</param>
            <returns>A <see cref="T:Microsoft.Xna.Framework.Vector2"/> representing a cell number within the layer.</returns>
        </member>
        <member name="M:SMLimitless.Sprites.Collections.Layer.GetTile(System.Int32,System.Int32)">
            <summary>
            Gets a tile at a given cell number.
            </summary>
            <param name="x">The X number of the cell; the cells away from the left-most cell.</param>
            <param name="y">The Y number of the cell; the cells below the top-most cell.</param>
            <returns>A tile in the cell, or null if there is no tile there.</returns>
        </member>
        <member name="M:SMLimitless.Sprites.Collections.Layer.GetTile(Microsoft.Xna.Framework.Vector2)">
            <summary>
            Gets a tile at a given cell number.
            </summary>
            <param name="cellNumber">A <see cref="T:Microsoft.Xna.Framework.Vector2"/> containing the cell number.</param>
            <returns>A tile in the cell, or null if there is no tile there.</returns>
        </member>
        <member name="M:SMLimitless.Sprites.Collections.Layer.SafeGetTile(Microsoft.Xna.Framework.Vector2)">
            <summary>
            Gets a tile in a given cell, or null if there is no tile in that cell, or the given cell is out of bounds.
            </summary>
            <param name="cellNumber">The cell for which to get the tile.</param>
            <returns>A Tile or null.</returns>
        </member>
        <member name="M:SMLimitless.Sprites.Collections.Layer.Move(Microsoft.Xna.Framework.Vector2)">
            <summary>
            Moves this layer to a given position.
            </summary>
            <param name="position">The position to move the layer to.</param>
            <exception cref="T:System.InvalidOperationException">Thrown when attempting to move the main layer. The main layer always has its position at the origin.</exception>
        </member>
        <member name="M:SMLimitless.Sprites.Collections.Layer.Translate(Microsoft.Xna.Framework.Vector2)">
            <summary>
            Moves the layer and its contents by a given distance.
            </summary>
            <param name="distance">The distance to move the layer.</param>
            <exception cref="T:System.InvalidOperationException">Thrown when attempting to translate the main layer. The main layer always has its position at the origin.</exception>
        </member>
        <member name="T:SMLimitless.Sprites.Collections.Level">
            <summary>
            The main unit of gameplay.
            </summary>
        </member>
        <member name="P:SMLimitless.Sprites.Collections.Level.ActiveSection">
            <summary>
            Gets or sets the section that the player is currently in.
            </summary>
        </member>
        <member name="P:SMLimitless.Sprites.Collections.Level.Author">
            <summary>
            Gets the name of the author who created this level.
            </summary>
        </member>
        <member name="P:SMLimitless.Sprites.Collections.Level.Path">
            <summary>
            Gets the absolute path to the file this level was loaded from.
            </summary>
        </member>
        <member name="P:SMLimitless.Sprites.Collections.Level.ContentFolderPaths">
            <summary>
            Gets or sets a collection of all the paths to the content package folders used in this level.
            </summary>
        </member>
        <member name="P:SMLimitless.Sprites.Collections.Level.EventScript">
            <summary>
            Gets or sets the event script of this level.
            </summary>
        </member>
        <member name="P:SMLimitless.Sprites.Collections.Level.LevelExits">
            <summary>
            Gets or sets a collection of all the level exits in this level.
            </summary>
        </member>
        <member name="P:SMLimitless.Sprites.Collections.Level.Name">
            <summary>
            Gets the name of the level, which is presented on menu screens.
            </summary>
        </member>
        <member name="P:SMLimitless.Sprites.Collections.Level.Sections">
            <summary>
            Gets or sets a collection of all the sections in this level.
            </summary>
        </member>
        <member name="P:SMLimitless.Sprites.Collections.Level.SerializerVersion">
            <summary>
            Gets a string placed in all level files indicating
            the version of the serializer used to create it.
            </summary>
        </member>
        <member name="F:SMLimitless.Sprites.Collections.Level.GravityAcceleration">
            <summary>
            The acceleration caused by gravity, measured in pixels per second per second.
            </summary>
        </member>
        <member name="M:SMLimitless.Sprites.Collections.Level.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SMLimitless.Sprites.Collections.Level"/> class.
            </summary>
        </member>
        <member name="M:SMLimitless.Sprites.Collections.Level.Initialize">
            <summary>
            Initializes this level.
            </summary>
        </member>
        <member name="M:SMLimitless.Sprites.Collections.Level.LoadContent">
            <summary>
            Loads the content of this level.
            </summary>
        </member>
        <member name="M:SMLimitless.Sprites.Collections.Level.Update">
            <summary>
            Updates this level.
            </summary>
        </member>
        <member name="M:SMLimitless.Sprites.Collections.Level.Draw">
            <summary>
            Draws this level.
            </summary>
        </member>
        <member name="M:SMLimitless.Sprites.Collections.Level.LevelExitCleared(System.String)">
            <summary>
            Notifies this level that a level exit has been cleared.
            </summary>
            <param name="exitSpriteName">The name of the sprite that served as the level exit.</param>
        </member>
        <member name="T:SMLimitless.Sprites.Collections.LevelExit">
            <summary>
            Represents an exit. This class is used in saving levels to file.
            </summary>
        </member>
        <member name="P:SMLimitless.Sprites.Collections.LevelExit.ExitIndex">
            <summary>
            Gets or sets the index of the exit.
            This starts at 0 for the first exit and increments for each exit after.
            </summary>
        </member>
        <member name="P:SMLimitless.Sprites.Collections.LevelExit.ExitDirection">
            <summary>
            Gets or sets the direction of this exit.
            When this exit is cleared, hidden tiles on the world map
            will be revealed in this direction.
            </summary>
        </member>
        <member name="P:SMLimitless.Sprites.Collections.LevelExit.ObjectName">
            <summary>
            Gets or sets the name of the sprite serving as the exit.
            If the sprite has no name, a name will be provided for it.
            </summary>
        </member>
        <member name="M:SMLimitless.Sprites.Collections.LevelExit.GetSerializableObjects">
            <summary>
            Gets an anonymous object containing key objects of this exit.
            </summary>
            <returns>An anonymous object containing key objects of this exit.</returns>
        </member>
        <member name="M:SMLimitless.Sprites.Collections.LevelExit.Serialize">
            <summary>
            Creates a JSON string from the key objects of this exit.
            </summary>
            <returns>A valid JSON string.</returns>
        </member>
        <member name="M:SMLimitless.Sprites.Collections.LevelExit.Deserialize(System.String)">
            <summary>
            Loads a level exit, given a JSON string containing key objects of the exit.
            </summary>
            <param name="json">A valid JSON string.</param>
        </member>
        <member name="T:SMLimitless.Sprites.Collections.ScreenExit">
            <summary>
            An exit that allows players to move between sections.
            </summary>
        </member>
        <member name="P:SMLimitless.Sprites.Collections.ScreenExit.DestinationPosition">
            <summary>
            Gets the position of the destination.
            </summary>
        </member>
        <member name="P:SMLimitless.Sprites.Collections.ScreenExit.DestinationSectionIndex">
            <summary>
            Gets the index of the destination section.
            </summary>
        </member>
        <member name="P:SMLimitless.Sprites.Collections.ScreenExit.EntranceBehavior">
            <summary>
            Gets the behavior of this exit when the player enters it.
            </summary>
        </member>
        <member name="P:SMLimitless.Sprites.Collections.ScreenExit.ExitBehavior">
            <summary>
            Gets the behavior of the exit when the player leaves it.
            </summary>
        </member>
        <member name="P:SMLimitless.Sprites.Collections.ScreenExit.Position">
            <summary>
            Gets the position of this exit in the section.
            </summary>
        </member>
        <member name="P:SMLimitless.Sprites.Collections.ScreenExit.SectionIndex">
            <summary>
            Gets the index of this exit.
            </summary>
        </member>
        <member name="M:SMLimitless.Sprites.Collections.ScreenExit.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SMLimitless.Sprites.Collections.ScreenExit"/> class.
            </summary>
        </member>
        <member name="M:SMLimitless.Sprites.Collections.ScreenExit.Initialize">
            <summary>
            Initializes this screen exit.
            </summary>
        </member>
        <member name="M:SMLimitless.Sprites.Collections.ScreenExit.GetSerializableObjects">
            <summary>
            Gets an anonymous object containing key objects of this screen exit.
            </summary>
            <returns>An anonymous object.</returns>
        </member>
        <member name="M:SMLimitless.Sprites.Collections.ScreenExit.Serialize">
            <summary>
            Returns a JSON string containing key objects of this screen exit.
            </summary>
            <returns>A valid JSON string.</returns>
        </member>
        <member name="M:SMLimitless.Sprites.Collections.ScreenExit.Deserialize(System.String)">
            <summary>
            Loads a screen exit given a JSON string containing key objects of the exit.
            </summary>
            <param name="json">A valid JSON string.</param>
        </member>
        <member name="T:SMLimitless.Sprites.Collections.Section">
            <summary>
            The main area of gameplay.
            </summary>
        </member>
        <member name="P:SMLimitless.Sprites.Collections.Section.AutoscrollSettings">
            <summary>
            Gets the settings used for automatic camera scrolling for this section.
            </summary>
        </member>
        <member name="P:SMLimitless.Sprites.Collections.Section.Background">
            <summary>
            Gets the <see cref="T:SMLimitless.Sprites.Collections.Background"/> for this section.
            </summary>
        </member>
        <member name="P:SMLimitless.Sprites.Collections.Section.Bounds">
            <summary>
            Gets the bounds of this section, the rectangular area to which the camera is restricted.
            </summary>
        </member>
        <member name="P:SMLimitless.Sprites.Collections.Section.Camera">
            <summary>
            Gets the camera viewing this section.
            </summary>
        </member>
        <member name="P:SMLimitless.Sprites.Collections.Section.CameraSystem">
            <summary>
            Gets the <see cref="T:SMLimitless.Physics.CameraSystem"/> instance tracking objects in this section.
            </summary>
        </member>
        <member name="P:SMLimitless.Sprites.Collections.Section.EditorActive">
            <summary>
            Gets a value indicating whether the level editor is currently enabled for this section.
            </summary>
        </member>
        <member name="P:SMLimitless.Sprites.Collections.Section.Index">
            <summary>
            Gets or sets the numeric index of this section within its level.
            </summary>
        </member>
        <member name="P:SMLimitless.Sprites.Collections.Section.IsLoaded">
            <summary>
            Gets a value indicating whether first-stage loading (deserialization and game object initialization) has completed.
            </summary>
        </member>
        <member name="P:SMLimitless.Sprites.Collections.Section.MousePosition">
            <summary>
            Gets the current mouse position adjusted for the camera's position and zoom.
            </summary>
        </member>
        <member name="P:SMLimitless.Sprites.Collections.Section.Name">
            <summary>
            Gets or sets the name of this section.
            </summary>
        </member>
        <member name="P:SMLimitless.Sprites.Collections.Section.Owner">
            <summary>
            Gets the <see cref="T:SMLimitless.Sprites.Collections.Level"/> that owns this section.
            </summary>
        </member>
        <member name="M:SMLimitless.Sprites.Collections.Section.#ctor(SMLimitless.Sprites.Collections.Level)">
            <summary>
            Initializes a new instance of the <see cref="T:SMLimitless.Sprites.Collections.Section"/> class.
            </summary>
            <param name="owner">The <see cref="T:SMLimitless.Sprites.Collections.Level"/> that owns this section.</param>
        </member>
        <member name="M:SMLimitless.Sprites.Collections.Section.AddSprite(SMLimitless.Sprites.Sprite)">
            <summary>
            Adds a <see cref="T:SMLimitless.Sprites.Sprite"/> to this section.
            </summary>
            <param name="sprite">The sprite to add.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if the <paramref name="sprite"/> reference is null.</exception>
        </member>
        <member name="M:SMLimitless.Sprites.Collections.Section.AddSpriteOnNextFrame(SMLimitless.Sprites.Sprite)">
            <summary>
            Sets a sprite to be added to the section on the next frame.
            </summary>
            <param name="sprite">The sprite to add.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if the <paramref name="sprite"/> reference is null.</exception>
        </member>
        <member name="M:SMLimitless.Sprites.Collections.Section.AddTile(SMLimitless.Sprites.Tile)">
            <summary>
            Adds a <see cref="T:SMLimitless.Sprites.Tile"/> to this section and to the main layer.
            </summary>
            <param name="tile">The tile to add.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if the <paramref name="tile"/> reference is null.</exception>
        </member>
        <member name="M:SMLimitless.Sprites.Collections.Section.Draw">
            <summary>
            Draws the game objects in this section.
            </summary>
        </member>
        <member name="M:SMLimitless.Sprites.Collections.Section.GetTileAtPosition(Microsoft.Xna.Framework.Vector2)">
            <summary>
            Gets the tile at a given position on the topmost layer.
            </summary>
            <param name="position">The position to get the tile at.</param>
            <returns>A <see cref="T:SMLimitless.Sprites.Tile"/> instance, or null if there is no tile at <paramref name="position"/>.</returns>
        </member>
        <member name="M:SMLimitless.Sprites.Collections.Section.Initialize">
            <summary>
            Initializes the game objects for this section.
            </summary>
        </member>
        <member name="M:SMLimitless.Sprites.Collections.Section.LoadContent">
            <summary>
            Loads the content for the game objects in this section.
            </summary>
        </member>
        <member name="M:SMLimitless.Sprites.Collections.Section.PlayerKilled(SMLimitless.Sprites.Sprite)">
            <summary>
            Handles the death of a player.
            </summary>
            <param name="player">The player that died.</param>
        </member>
        <member name="M:SMLimitless.Sprites.Collections.Section.RemoveSprite(SMLimitless.Sprites.Sprite)">
            <summary>
            Removes a sprite from this section.
            </summary>
            <param name="sprite">The sprite to remove.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if the <paramref name="sprite"/> reference is null.</exception>
        </member>
        <member name="M:SMLimitless.Sprites.Collections.Section.RemoveTile(SMLimitless.Sprites.Tile)">
            <summary>
            Removes a tile from this section and all layers it may be in.
            </summary>
            <param name="tile">The tile to remove.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if the <paramref name="tile"/> reference is null.</exception>
        </member>
        <member name="M:SMLimitless.Sprites.Collections.Section.Update">
            <summary>
            Updates this section.
            </summary>
        </member>
        <member name="M:SMLimitless.Sprites.Collections.Section.UpdatePhysics">
            <summary>
            Moves sprites according to their velocity and performs collision detection and resolution.
            </summary>
        </member>
        <member name="T:SMLimitless.Sprites.Collections.TestSectionGenerator">
            <summary>
            A class that generates a section for testing purposes.
            </summary>
        </member>
        <member name="M:SMLimitless.Sprites.Collections.TestSectionGenerator.GenerateSection(SMLimitless.Sprites.Collections.Level)">
            <summary>
            Creates a test section.
            </summary>
            <param name="owner">The level that will own this section.</param>
            <returns>A section consisting of randomly placed and sized rows of concrete blocks with a TestPlayer.</returns>
        </member>
        <member name="T:SMLimitless.Sprites.Assemblies.AssemblyManager">
            <summary>
            Loads and manages assemblies containing custom sprites, tiles, and screens.
            </summary>
        </member>
        <member name="F:SMLimitless.Sprites.Assemblies.AssemblyManager.loadedAssemblies">
            <summary>
            A list of all loaded assemblies.
            </summary>
        </member>
        <member name="F:SMLimitless.Sprites.Assemblies.AssemblyManager.typeToAssemblyDictionary">
            <summary>
            A dictionary that links sprite and tile type full names to assembly references.
            </summary>
        </member>
        <member name="M:SMLimitless.Sprites.Assemblies.AssemblyManager.#cctor">
            <summary>
            Initializes static members of the <see cref="T:SMLimitless.Sprites.Assemblies.AssemblyManager"/> class.
            </summary>
        </member>
        <member name="M:SMLimitless.Sprites.Assemblies.AssemblyManager.LoadAssembly(System.String)">
            <summary>
            Loads an assembly given a path to the assembly file.
            </summary>
            <param name="assemblyPath">The path to the assembly file.</param>
        </member>
        <member name="M:SMLimitless.Sprites.Assemblies.AssemblyManager.GetSpriteByFullName(System.String)">
            <summary>
            Returns a fully constructed sprite instances given a sprite's full name.
            </summary>
            <param name="spriteFullName">The full name of the sprite, containing namespaces but not assembly data.</param>
            <returns>A fully constructed sprite instance.</returns>
        </member>
        <member name="M:SMLimitless.Sprites.Assemblies.AssemblyManager.GetTileByFullName(System.String)">
            <summary>
            Returns a fully constructed Tile instance, given the full name of the type.
            </summary>
            <param name="tileFullName">The full name of the tile, containing namespaces but not assembly data.</param>
            <returns>A fully constructed Tile instance.</returns>
        </member>
        <member name="M:SMLimitless.Sprites.Assemblies.AssemblyManager.ValidateAssembly(System.Reflection.Assembly)">
            <summary>
            Determines if a loaded assembly references SMLimitless.exe and
            contains a type named AssemblyMetadata.
            </summary>
            <param name="assembly">The assembly to check for validity.</param>
            <returns>True if the assembly meets both of the conditions.</returns>
        </member>
        <member name="M:SMLimitless.Sprites.Assemblies.AssemblyManager.AddTypesToDictionary(System.Reflection.Assembly)">
            <summary>
            Adds all the sprite and tile types of a given assembly to the type/assembly dictionary.
            </summary>
            <param name="assembly">The assembly from which to add the types.</param>
        </member>
        <member name="T:SMLimitless.Sprites.Assemblies.JsonHelper">
            <summary>
            A type that contains an instance of a JToken.
            </summary>
            <remarks>
            This type allows sprite and tiles to not need
            to explicitly reference Newtonsoft.Json.dll.
            </remarks>
        </member>
        <member name="F:SMLimitless.Sprites.Assemblies.JsonHelper.value">
            <summary>
            The JToken instance.
            </summary>
        </member>
        <member name="M:SMLimitless.Sprites.Assemblies.JsonHelper.#ctor(Newtonsoft.Json.Linq.JToken)">
            <summary>
            Initializes a new instance of the <see cref="T:SMLimitless.Sprites.Assemblies.JsonHelper"/> class.
            </summary>
            <param name="token">The JToken instance.</param>
        </member>
        <member name="M:SMLimitless.Sprites.Assemblies.JsonHelper.Serialize(System.Object)">
            <summary>
            Serializes a given object.
            </summary>
            <param name="value">The object to serialize.</param>
            <returns>A JSON string representing the object.</returns>
        </member>
        <member name="M:SMLimitless.Sprites.Assemblies.JsonHelper.GetBool(System.String)">
            <summary>
            Returns a boolean from the JToken instance.
            </summary>
            <param name="key">The name of the key containing the boolean.</param>
            <returns>A boolean from the JToken.</returns>
        </member>
        <member name="M:SMLimitless.Sprites.Assemblies.JsonHelper.GetByte(System.String)">
            <summary>
            Returns a byte from the JToken instance.
            </summary>
            <param name="key">The name of the key containing the byte.</param>
            <returns>A byte from the JToken.</returns>
        </member>
        <member name="M:SMLimitless.Sprites.Assemblies.JsonHelper.GetSByte(System.String)">
            <summary>
            Returns an signed byte from the JToken instance.
            </summary>
            <param name="key">The name of the key containing the signed byte.</param>
            <returns>A signed byte from the JToken.</returns>
        </member>
        <member name="M:SMLimitless.Sprites.Assemblies.JsonHelper.GetShort(System.String)">
            <summary>
            Returns a short integer from the JToken instance.
            </summary>
            <param name="key">The name of the key containing the short integer.</param>
            <returns>A short integer from the JToken.</returns>
        </member>
        <member name="M:SMLimitless.Sprites.Assemblies.JsonHelper.GetUShort(System.String)">
            <summary>
            Returns an unsigned short integer from the JToken instance.
            </summary>
            <param name="key">The name of the key containing the unsigned short integer.</param>
            <returns>An unsigned short integer from the JToken.</returns>
        </member>
        <member name="M:SMLimitless.Sprites.Assemblies.JsonHelper.GetInt(System.String)">
            <summary>
            Returns an integer from the JToken instance.
            </summary>
            <param name="key">The name of the key containing the integer.</param>
            <returns>An integer from the JToken.</returns>
        </member>
        <member name="M:SMLimitless.Sprites.Assemblies.JsonHelper.GetUInt(System.String)">
            <summary>
            Returns an unsigned integer from the JToken instance.
            </summary>
            <param name="key">The name of the key containing the unsigned integer.</param>
            <returns>A unsigned integer from the JToken.</returns>
        </member>
        <member name="M:SMLimitless.Sprites.Assemblies.JsonHelper.GetLong(System.String)">
            <summary>
            Returns a long integer from the JToken instance.
            </summary>
            <param name="key">The name of the key containing the long integer.</param>
            <returns>A long integer from the JToken.</returns>
        </member>
        <member name="M:SMLimitless.Sprites.Assemblies.JsonHelper.GetULong(System.String)">
            <summary>
            Returns an unsigned long integer from the JToken instance.
            </summary>
            <param name="key">The name of the key containing the unsigned long integer.</param>
            <returns>An unsigned long integer from the JToken.</returns>
        </member>
        <member name="M:SMLimitless.Sprites.Assemblies.JsonHelper.GetFloat(System.String)">
            <summary>
            Returns a single-precision floating point number from the JToken instance.
            </summary>
            <param name="key">The name of the key containing the single-precision floating pointer number.</param>
            <returns>A single-precision floating point number from the JToken.</returns>
        </member>
        <member name="M:SMLimitless.Sprites.Assemblies.JsonHelper.GetDouble(System.String)">
            <summary>
            Returns a double-precision floating point number from the JToken instance.
            </summary>
            <param name="key">The name of the key containing the double-precision floating point number.</param>
            <returns>A double-precision floating point number from the JToken.</returns>
        </member>
        <member name="M:SMLimitless.Sprites.Assemblies.JsonHelper.GetDecimal(System.String)">
            <summary>
            Returns a decimal number from the JToken instance.
            </summary>
            <param name="key">The name of the key containing the decimal number.</param>
            <returns>A decimal from the JToken.</returns>
        </member>
        <member name="M:SMLimitless.Sprites.Assemblies.JsonHelper.GetChar(System.String)">
            <summary>
            Returns a UTF-16 character from the JToken instance.
            </summary>
            <param name="key">The name of the key containing the UTF-16 character.</param>
            <returns>A UTF-16 character from the JToken.</returns>
        </member>
        <member name="M:SMLimitless.Sprites.Assemblies.JsonHelper.GetString(System.String)">
            <summary>
            Returns a UTF-16 string from the JToken instance.
            </summary>
            <param name="key">The name of the key containing the UTF-16 string.</param>
            <returns>A UTF-16 string from the JToken.</returns>
        </member>
        <member name="T:SMLimitless.Sprites.Components.ChasePlayerComponent">
            <summary>
            A component that indicates in which direction the nearest player is to a sprite.
            </summary>
        </member>
        <member name="P:SMLimitless.Sprites.Components.ChasePlayerComponent.IsActive">
            <summary>
            Gets or sets a value indicating whether this component should have the sprite chase the player.
            </summary>
        </member>
        <member name="P:SMLimitless.Sprites.Components.ChasePlayerComponent.FramesBetweenDirectionChecks">
            <summary>
            Gets the number of frames between any two checks of the nearest player's direction.
            </summary>
        </member>
        <member name="P:SMLimitless.Sprites.Components.ChasePlayerComponent.NearestPlayerDirection">
            <summary>
            Gets a value which indicates the direction the nearest player is to a sprite.
            </summary>
        </member>
        <member name="E:SMLimitless.Sprites.Components.ChasePlayerComponent.NearestPlayerDirectionUpdated">
            <summary>
            An event raised when the direction of the nearest player has been updated.
            </summary>
            <remarks>
            This event is raised any time that <see cref="M:SMLimitless.Sprites.Components.ChasePlayerComponent.PerformDirectionCheck"/> is called,
            even if the direction itself doesn't change.
            </remarks>
        </member>
        <member name="M:SMLimitless.Sprites.Components.ChasePlayerComponent.#ctor(SMLimitless.Sprites.Sprite,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SMLimitless.Sprites.Components.ChasePlayerComponent"/> class.
            </summary>
            <param name="owner"></param>
            <param name="framesBetweenChecks"></param>
        </member>
        <member name="M:SMLimitless.Sprites.Components.ChasePlayerComponent.Update">
            <summary>
            Updates this component.
            </summary>
        </member>
        <member name="T:SMLimitless.Sprites.Components.DamageComponent">
            <summary>
            A component for a sprite that can damage other sprites.
            </summary>
        </member>
        <member name="M:SMLimitless.Sprites.Components.DamageComponent.PerformDamage(SMLimitless.Sprites.Sprite,System.String,System.Int32)">
            <summary>
            Performs damage to sprite with a <see cref="T:SMLimitless.Sprites.Components.HealthComponent"/> instance.
            </summary>
            <param name="sprite">The sprite to damage.</param>
            <param name="damageType">The type of damage to perform.</param>
            <param name="hpAmount">How many hit points to damage for.</param>
        </member>
        <member name="M:SMLimitless.Sprites.Components.DamageComponent.Update">
            <summary>
            Updates this component.
            </summary>
        </member>
        <member name="T:SMLimitless.Sprites.Components.HealthComponent">
            <summary>
            A component for a sprite that has health and can be damaged.
            </summary>
        </member>
        <member name="F:SMLimitless.Sprites.Components.HealthComponent.StartingHitPoints">
            <summary>
            The number of hit points that this sprite starts with.
            </summary>
        </member>
        <member name="F:SMLimitless.Sprites.Components.HealthComponent.MaximumHitPoints">
            <summary>
            The maximum number of hit points that this sprite can have.
            </summary>
        </member>
        <member name="F:SMLimitless.Sprites.Components.HealthComponent.ImmuneTo">
            <summary>
            A collection of damage type names that this sprite is immune to.
            </summary>
        </member>
        <member name="P:SMLimitless.Sprites.Components.HealthComponent.HitPoints">
            <summary>
            Gets the current number of hit points this sprite has.
            </summary>
        </member>
        <member name="E:SMLimitless.Sprites.Components.HealthComponent.SpriteDamage">
            <summary>
            An event that is raised when this sprite is damaged.
            </summary>
        </member>
        <member name="E:SMLimitless.Sprites.Components.HealthComponent.SpriteKilled">
            <summary>
            An event that is raised when this sprite is killed (hit points become 0).
            </summary>
        </member>
        <member name="E:SMLimitless.Sprites.Components.HealthComponent.SpriteHealed">
            <summary>
            An event that is raised when this sprite is healed.
            </summary>
        </member>
        <member name="M:SMLimitless.Sprites.Components.HealthComponent.#ctor(System.Int32,System.Int32,System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:SMLimitless.Sprites.Components.HealthComponent"/> class.
            </summary>
            <param name="maximumHP">The maximum number of hit points that this sprite can have.</param>
            <param name="startingHP">The number of hit points that this sprite should start with.</param>
            <param name="immuneTo">A collection of damage type names that this sprite is immune to.</param>
        </member>
        <member name="M:SMLimitless.Sprites.Components.HealthComponent.Update">
            <summary>
            Updates this component.
            </summary>
        </member>
        <member name="M:SMLimitless.Sprites.Components.HealthComponent.Damage(System.Int32,System.String)">
            <summary>
            Damages this sprite.
            </summary>
            <param name="hpAmount">The amount of hit points to remove from the sprite.</param>
            <param name="damageType">The name of the damage type.</param>
        </member>
        <member name="M:SMLimitless.Sprites.Components.HealthComponent.Heal(System.Int32)">
            <summary>
            Heals this sprite, restoring hit points.
            </summary>
            <param name="hpAmount"></param>
        </member>
        <member name="T:SMLimitless.Sprites.Components.SpriteDamagedEventArgs">
            <summary>
            Contains event data for when a sprite or tile damages another sprite.
            </summary>
        </member>
        <member name="P:SMLimitless.Sprites.Components.SpriteDamagedEventArgs.DamageType">
            <summary>
            The type of damage.
            </summary>
        </member>
        <member name="P:SMLimitless.Sprites.Components.SpriteDamagedEventArgs.RemainingHitPoints">
            <summary>
            The number of remaining hit points on the damaged sprite.
            </summary>
        </member>
        <member name="M:SMLimitless.Sprites.Components.SpriteDamagedEventArgs.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SMLimitless.Sprites.Components.SpriteDamagedEventArgs"/> class.
            </summary>
            <param name="damageType">The type of damage.</param>
            <param name="remainingHitPoints">The number of remaining hit points on the damaged sprite.</param>
        </member>
        <member name="T:SMLimitless.Sprites.Components.ShelledEnemyComponent">
            <summary>
            A component for an enemy that is shelled (i.e. behaves like
            a Koopa Troopa or Buzzy Beetle.)
            </summary>
        </member>
        <member name="T:SMLimitless.Sprites.Components.ShelledEnemyComponent.ShelledEnemyBehavior">
            <summary>
            Enumerates the behaviors of this component.
            </summary>
        </member>
        <member name="F:SMLimitless.Sprites.Components.ShelledEnemyComponent.ShelledEnemyBehavior.DontTurnOnCliffs">
            <summary>
            The enemy will not turn when it reaches a cliff (i.e. green Koopa).
            </summary>
        </member>
        <member name="F:SMLimitless.Sprites.Components.ShelledEnemyComponent.ShelledEnemyBehavior.TurnOnCliffs">
            <summary>
            The enemy will turn when it reaches a cliff (i.e. red Koopa).
            </summary>
        </member>
        <member name="F:SMLimitless.Sprites.Components.ShelledEnemyComponent.ShelledEnemyBehavior.ChasePlayer">
            <summary>
            The enemy will chase the nearest player (i.e. yellow Koopa).
            </summary>
        </member>
        <member name="T:SMLimitless.Sprites.Components.ShelledEnemyComponent.ShelledEnemyState">
            <summary>
            Enumerates the states a shelled enemy can be in.
            </summary>
        </member>
        <member name="F:SMLimitless.Sprites.Components.ShelledEnemyComponent.ShelledEnemyState.Walking">
            <summary>
            The default; the shelled enemy is walking.
            </summary>
        </member>
        <member name="F:SMLimitless.Sprites.Components.ShelledEnemyComponent.ShelledEnemyState.Shell">
            <summary>
            The shelled enemy has retreated to its shell.
            </summary>
        </member>
        <member name="F:SMLimitless.Sprites.Components.ShelledEnemyComponent.ShelledEnemyState.Emerging">
            <summary>
            The shelled enemy is emerging and will soon switch to the <see cref="F:SMLimitless.Sprites.Components.ShelledEnemyComponent.ShelledEnemyState.Walking"/> state.
            </summary>
        </member>
        <member name="F:SMLimitless.Sprites.Components.ShelledEnemyComponent.ShelledEnemyState.ShellSpinning">
            <summary>
            The shelled enemy has retreated to its spinning shell, able to damage other sprites and players.
            </summary>
        </member>
        <member name="P:SMLimitless.Sprites.Components.ShelledEnemyComponent.Behavior">
            <summary>
            Gets or sets the behavior of this component.
            </summary>
        </member>
        <member name="P:SMLimitless.Sprites.Components.ShelledEnemyComponent.State">
            <summary>
            Gets or sets the state of this component.
            </summary>
        </member>
        <member name="E:SMLimitless.Sprites.Components.ShelledEnemyComponent.StateChanged">
            <summary>
            An event raised when this component's state changes.
            </summary>
        </member>
        <member name="M:SMLimitless.Sprites.Components.ShelledEnemyComponent.#ctor(SMLimitless.Sprites.Sprite,System.Single,System.Single,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SMLimitless.Sprites.Components.ShelledEnemyComponent"/> sprite.
            </summary>
            <param name="owner">The sprite that owns this component.</param>
            <param name="walkingVelocity">The horizontal velocity at which the owner will walk.</param>
            <param name="shellSpinningVelocity">The horizontal velocity at which the owner will spin.</param>
            <param name="framesFromShellToEmerging">The number of frames between entering the Shell state and entering the Emerging state.</param>
            <param name="framesFromEmergingToWalking">The number of frames between entering the Emerging state and entering the Walking state.</param>
        </member>
        <member name="M:SMLimitless.Sprites.Components.ShelledEnemyComponent.HandleSpriteCollision(SMLimitless.Sprites.Sprite,Microsoft.Xna.Framework.Vector2)">
            <summary>
            Handles a collision with another sprite.
            </summary>
            <param name="collidingSprite">The sprite that has collided with the owner sprite.</param>
            <param name="resolutionDistance">The depth of the collision.</param>
        </member>
        <member name="M:SMLimitless.Sprites.Components.ShelledEnemyComponent.Update">
            <summary>
            Updates this component.
            </summary>
        </member>
        <member name="T:SMLimitless.Sprites.Components.WalkerComponent">
            <summary>
            A component which moves the sprite horizontally along a surface of tiles.
            </summary>
        </member>
        <member name="P:SMLimitless.Sprites.Components.WalkerComponent.CurrentVelocity">
            <summary>
            Gets or sets the current velocity of this component.
            </summary>
        </member>
        <member name="P:SMLimitless.Sprites.Components.WalkerComponent.Direction">
            <summary>
            Gets or sets the direction that the component has its owner walk in.
            </summary>
        </member>
        <member name="P:SMLimitless.Sprites.Components.WalkerComponent.IsActive">
            <summary>
            Gets or sets a value indicating whether this component is active.
            </summary>
        </member>
        <member name="P:SMLimitless.Sprites.Components.WalkerComponent.StartingDirection">
            <summary>
            The initial direction (Left, Right, or FacePlayer) that the sprites starts out facing.
            </summary>
        </member>
        <member name="P:SMLimitless.Sprites.Components.WalkerComponent.InitialHorizontalVelocity">
            <summary>
            The initial velocity that the sprite has. 
            </summary>
        </member>
        <member name="P:SMLimitless.Sprites.Components.WalkerComponent.TurnOnCliffs">
            <summary>
            Gets a flag indicating whether this sprite turns when it crosses an edge.
            </summary>
        </member>
        <member name="P:SMLimitless.Sprites.Components.WalkerComponent.TurnOnSpriteCollisions">
            <summary>
            Gets a flag indicating whether this sprite turns when it collides with another sprite.
            </summary>
        </member>
        <member name="M:SMLimitless.Sprites.Components.WalkerComponent.#ctor(SMLimitless.Sprites.Sprite,SMLimitless.Sprites.SpriteDirection,System.Single,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:SMLimitless.Sprites.Components.WalkerComponent"/> class.
            </summary>
            <param name="owner">The sprite that owns this component.</param>
            <param name="startingDirection">The initial direction (Left, Right, or FacePlayer) that the sprites starts out facing.</param>
            <param name="initialHorizontalVelocity">The initial velocity that the sprite has. Provide a positive value; the sign is automatically determined based on initial direction.</param>
            <param name="turnOnEdges">A flag indicating whether this sprite turns when it crosses an edge.</param>
        </member>
        <member name="M:SMLimitless.Sprites.Components.WalkerComponent.Update">
            <summary>
            Update this component.
            </summary>
        </member>
        <member name="M:SMLimitless.Sprites.Components.WalkerComponent.HandleTileCollision(SMLimitless.Sprites.Tile,Microsoft.Xna.Framework.Vector2)">
            <summary>
            Handle a collision between this component's owner sprite and a tile.
            </summary>
            <param name="collidingTile">The tile that the owner sprite has collided with.</param>
            <param name="resolutionDistance">The distance by which the owner sprite was moved to resolve the collision.</param>
        </member>
        <member name="T:SMLimitless.Sprites.Sprite">
            <summary>
            The base type for all sprites.
            </summary>
        </member>
        <member name="F:SMLimitless.Sprites.Sprite.position">
            <summary>
            A backing field for the Position property.
            </summary>
        </member>
        <member name="F:SMLimitless.Sprites.Sprite.velocity">
            <summary>
            A backing field for the Velocity property.
            </summary>
        </member>
        <member name="F:SMLimitless.Sprites.Sprite.hitbox">
            <summary>
            A backing field for the Hitbox property.
            </summary>
        </member>
        <member name="F:SMLimitless.Sprites.Sprite.MaximumGravitationalVelocity">
            <summary>
            A physics setting representing the maximum downward velocity a sprite can acquire through falling. Measured in pixels per second.
            </summary>
        </member>
        <member name="F:SMLimitless.Sprites.Sprite.UpwardAccelerationDecay">
            <summary>
            A physics setting representing the rate that any upward acceleration is reduced to zero. Measured in pixels per second cubed.
            </summary>
        </member>
        <member name="P:SMLimitless.Sprites.Sprite.ID">
            <summary>
            Gets or sets an identification number that identifies all sprites of this kind.
            </summary>
        </member>
        <member name="P:SMLimitless.Sprites.Sprite.Components">
            <summary>
            Gets a list of all the components used by this sprite instance.
            </summary>
        </member>
        <member name="P:SMLimitless.Sprites.Sprite.InitialState">
            <summary>
            Gets the state of this sprite when it was first loaded into the level.
            </summary>
        </member>
        <member name="P:SMLimitless.Sprites.Sprite.State">
            <summary>
            Gets or sets a string representing the state of this sprite. Please see
            http://smlimitless.wikia.com/wiki/Sprite_State for more information.
            </summary>
        </member>
        <member name="P:SMLimitless.Sprites.Sprite.Owner">
            <summary>
            Gets or sets the section that owns this sprite.
            </summary>
        </member>
        <member name="P:SMLimitless.Sprites.Sprite.IsActive">
            <summary>
            Gets or sets a value indicating whether this sprite is actively updating or not.
            </summary>
        </member>
        <member name="P:SMLimitless.Sprites.Sprite.IsEmbedded">
            <summary>
            Gets or sets a value indicating whether this sprite is embedded inside of a tile.
            </summary>
        </member>
        <member name="P:SMLimitless.Sprites.Sprite.IsOnGround">
            <summary>
            Gets or sets a value indicating whether this sprite is resting on the ground.
            </summary>
        </member>
        <member name="P:SMLimitless.Sprites.Sprite.RemoveOnNextFrame">
            <summary>
            Gets or sets a value indicating whether this sprite should be removed from its owner section on the next frame.
            </summary>
        </member>
        <member name="P:SMLimitless.Sprites.Sprite.Size">
            <summary>
            Gets or sets the size in pixels of this sprite.
            </summary>
        </member>
        <member name="P:SMLimitless.Sprites.Sprite.InitialPosition">
            <summary>
            Gets or sets the position of this sprite when it was first loaded into the level, measured in pixels.
            </summary>
        </member>
        <member name="P:SMLimitless.Sprites.Sprite.PreviousPosition">
            <summary>
            Gets or sets the last position of this sprite, measured in pixels.
            </summary>
        </member>
        <member name="P:SMLimitless.Sprites.Sprite.Position">
            <summary>
            Gets or sets the current position of this sprite, measured in pixels.
            </summary>
        </member>
        <member name="P:SMLimitless.Sprites.Sprite.Velocity">
            <summary>
            Gets or sets the velocity of this sprite, measured in pixels per second.
            </summary>
        </member>
        <member name="P:SMLimitless.Sprites.Sprite.Acceleration">
            <summary>
            Gets or sets the acceleration of this sprite, measured in pixels per second per second.
            </summary>
        </member>
        <member name="M:SMLimitless.Sprites.Sprite.GetCustomSerializableObjects">
            <summary>
            Gets an anonymous object containing objects that need to be saved to the level file.
            </summary>
            <returns></returns>
        </member>
        <member name="P:SMLimitless.Sprites.Sprite.HasMoved">
            <summary>
            Gets or sets a value indicating whether the sprite has moved during this frame.
            </summary>
        </member>
        <member name="P:SMLimitless.Sprites.Sprite.BreakOnCollision">
            <summary>
            Gets or sets a value indicating whether a collision between this sprite and a tile should break the debugger if collision debugging is enabled.
            </summary>
        </member>
        <member name="P:SMLimitless.Sprites.Sprite.TileCollisionMode">
            <summary>
            Gets or sets the current collision mode of this sprite. Please see the SpriteCollisionMode documentation for
            more information.
            </summary>
        </member>
        <member name="P:SMLimitless.Sprites.Sprite.SpriteCollisionMode">
            <summary>
            Gets or sets the current collision mode of this sprite for other sprites.
            </summary>
        </member>
        <member name="P:SMLimitless.Sprites.Sprite.Hitbox">
            <summary>
            Gets a rectangle representing this sprite's hitbox.
            </summary>
        </member>
        <member name="P:SMLimitless.Sprites.Sprite.EditorCategory">
            <summary>
            Gets the name of the category that this sprite is categorized within in the level editor.
            </summary>
        </member>
        <member name="P:SMLimitless.Sprites.Sprite.EditorLabel">
            <summary>
            Gets or sets the name of this sprite used in the level editor.
            </summary>
        </member>
        <member name="P:SMLimitless.Sprites.Sprite.Name">
            <summary>
            Gets or sets an editor property representing an optional name for this sprite, used by event scripting to
            reference this object.
            </summary>
        </member>
        <member name="P:SMLimitless.Sprites.Sprite.Message">
            <summary>
            Gets or sets an editor property representing an optional message for this sprite that is displayed if the
            player presses Up while near the sprite.
            </summary>
        </member>
        <member name="P:SMLimitless.Sprites.Sprite.IsHostile">
            <summary>
            Gets or sets a value indicating whether this sprite will injure the player if the player hits it.
            </summary>
        </member>
        <member name="P:SMLimitless.Sprites.Sprite.IsMoving">
            <summary>
            Gets or sets a value indicating whether this sprite is moving.
            </summary>
        </member>
        <member name="P:SMLimitless.Sprites.Sprite.IsPlayer">
            <summary>
            Gets a value indicating whether this sprite is a player sprite.
            </summary>
        </member>
        <member name="P:SMLimitless.Sprites.Sprite.Direction">
            <summary>
            Gets or sets an editor property representing which direction this sprite is facing.
            </summary>
        </member>
        <member name="M:SMLimitless.Sprites.Sprite.ResolveDirection(SMLimitless.Sprites.Sprite,SMLimitless.Sprites.SpriteDirection,SMLimitless.Sprites.Collections.Section)">
            <summary>
            Resolves a sprite direction into a horizontal direction.
            </summary>
            <param name="sprite">The sprite for which the direction needs to be resolved.</param>
            <param name="direction">The direction that needs to be resolved.</param>
            <param name="section">The section which the <paramref name="sprite"/> is in.</param>
            <returns>Left if <paramref name="direction"/> is Left, or Right if <paramref name="direction"/> is Right.
            If <paramref name="direction"/> is FacePlayer, then the returned direction will be the one facing the first player
            in the section, or Left if there are no players.</returns>
        </member>
        <member name="M:SMLimitless.Sprites.Sprite.GetComponent``1">
            <summary>
            Gets the component of a certain type.
            </summary>
            <typeparam name="T">The type of component to return.</typeparam>
            <param name="componentType">The type of component to return</param>
            <returns>The component of the given type, or null if there is no such component.</returns>
        </member>
        <member name="M:SMLimitless.Sprites.Sprite.Initialize(SMLimitless.Sprites.Collections.Section)">
            <summary>
            Initializes this sprite.
            </summary>
            <param name="owner">The level that owns this sprites.</param>
        </member>
        <member name="M:SMLimitless.Sprites.Sprite.LoadContent">
            <summary>
            Loads the content for this sprite.
            </summary>
        </member>
        <member name="M:SMLimitless.Sprites.Sprite.Update">
            <summary>
            Updates this sprite.
            </summary>
        </member>
        <member name="M:SMLimitless.Sprites.Sprite.Draw">
            <summary>
            Draws this sprite.
            </summary>
        </member>
        <member name="M:SMLimitless.Sprites.Sprite.GetSlopeHitbox(SMLimitless.Physics.RtSlopedSides)">
            <summary>
            Gets the hitbox of this sprite for collision with a slope.
            </summary>
            <param name="slopedSides">The sloped sides of the slope.</param>
            <returns>The left half of the sprite's hitbox for TopLeft and BottomLeft slopes or the right half of the hitbox for TopRight and BottomRight slopes.</returns>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="slopedSides"/> has a value of Default.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="slopedSides"/> does not have a valid value.</exception>
        </member>
        <member name="M:SMLimitless.Sprites.Sprite.HandleTileCollision(SMLimitless.Sprites.Tile,Microsoft.Xna.Framework.Vector2)">
            <summary>
            Handles a collision between this sprite and a tile.
            </summary>
            <param name="tile">The tile that this sprite has collided with.</param>
            <param name="resolutionDistance">The depth of the intersection.</param>
        </member>
        <member name="M:SMLimitless.Sprites.Sprite.HandleSpriteCollision(SMLimitless.Sprites.Sprite,Microsoft.Xna.Framework.Vector2)">
            <summary>
            Handles a collision between this sprite and another.
            </summary>
            <param name="sprite">The sprite that has collided with this one.</param>
            <param name="resolutionDistance">The depth of the intersection.</param>
        </member>
        <member name="M:SMLimitless.Sprites.Sprite.IsStomping(SMLimitless.Sprites.Sprite,SMLimitless.Sprites.Sprite)">
            <summary>
            Determines if a sprite is stomping another sprite.
            </summary>
            <param name="a">The sprite that may be stomping.</param>
            <param name="b">The sprite that may be being stomped.</param>
            <returns>True if <paramref name="a"/> is stomping <paramref name="b"/>.</returns>
        </member>
        <member name="M:SMLimitless.Sprites.Sprite.Damage">
            <summary>
            Performs an action for when this sprite takes damage.
            </summary>
        </member>
        <member name="M:SMLimitless.Sprites.Sprite.OnEditorDrop(SMLimitless.Sprites.Sprite)">
            <summary>
            Accepts a sprite that was dropped on this sprite by the level editor.
            when the user left-clicked on it with a sprite selected.
            </summary>
            <param name="sprite">The sprite dropped on this sprite.</param>
            <returns>True if this sprite supports dropping, false if otherwise.</returns>
        </member>
        <member name="M:SMLimitless.Sprites.Sprite.DeserializeCustomObjects(SMLimitless.Sprites.Assemblies.JsonHelper)">
            <summary>
            Deserializes any objects that custom sprites have written to the level file.
            </summary>
            <param name="customObjects">An object containing the objects of the custom sprites.</param>
        </member>
        <member name="T:SMLimitless.Sprites.SpriteComponent">
            <summary>
            A base type for reusable objects that modify a sprite's behavior in a given way.
            </summary>
        </member>
        <member name="P:SMLimitless.Sprites.SpriteComponent.IsActive">
            <summary>
            Gets or sets a value indicating whether this component is active.
            </summary>
        </member>
        <member name="P:SMLimitless.Sprites.SpriteComponent.Owner">
            <summary>
            Gets the sprite that's using this component.
            </summary>
        </member>
        <member name="M:SMLimitless.Sprites.SpriteComponent.Update">
            <summary>
            Updates this sprite component.
            </summary>
        </member>
        <member name="M:SMLimitless.Sprites.SpriteComponent.Initialize(SMLimitless.Sprites.Sprite)">
            <summary>
            Initializes this component.
            </summary>
            <param name="owner">The sprite that owns this component.</param>
        </member>
        <member name="M:SMLimitless.Sprites.SpriteComponent.HandleTileCollision(SMLimitless.Sprites.Tile,Microsoft.Xna.Framework.Vector2)">
            <summary>
            A method called when the owner sprite collides with a tile.
            </summary>
            <param name="collidingTile">The tile that the owner sprite collided with.</param>
            <param name="resolutionDistance">The distance by which the sprite was moved in order to resolve the tile collision.</param>
        </member>
        <member name="M:SMLimitless.Sprites.SpriteComponent.HandleSpriteCollision(SMLimitless.Sprites.Sprite,Microsoft.Xna.Framework.Vector2)">
            <summary>
            A method called when the owner sprite collides with another sprite.
            </summary>
            <param name="collidingSprite">The sprite that the owner sprite collided with.</param>
            <param name="resolutionDistance">The distance by which the sprite was moved in order to resolve the sprite collision.</param>
        </member>
        <member name="T:SMLimitless.Sprites.SpriteDamageTypes">
            <summary>
            Contains a list of string constants representing names of sprite damage types.
            </summary>
        </member>
        <member name="F:SMLimitless.Sprites.SpriteDamageTypes.General">
            <summary>
            The name of the General damage type.
            </summary>
        </member>
        <member name="F:SMLimitless.Sprites.SpriteDamageTypes.PlayerStomp">
            <summary>
            The name of the PlayerStomp damage type.
            </summary>
        </member>
        <member name="F:SMLimitless.Sprites.SpriteDamageTypes.PlayerFireball">
            <summary>
            The name of the PlayerFireball damage type.
            </summary>
        </member>
        <member name="F:SMLimitless.Sprites.SpriteDamageTypes.ShellSpinning">
            <summary>
            The name of the ShellSpinning damage type.
            </summary>
        </member>
        <member name="T:SMLimitless.Sprites.Tile">
            <summary>
            A unit of terrain in <see cref="T:SMLimitless.Sprites.Collections.Section"/>. Sprites can collide with, slide down, and walk across these tiles.
            </summary>
        </member>
        <member name="P:SMLimitless.Sprites.Tile.TileShape">
            <summary>
            Gets a value indicating the shape of this tile.
            </summary>
        </member>
        <member name="P:SMLimitless.Sprites.Tile.InitialPosition">
            <summary>
            Gets the initial position of this tile in the section in pixels.
            </summary>
        </member>
        <member name="P:SMLimitless.Sprites.Tile.Position">
            <summary>
            Gets or sets the position of this tile in the section in pixels.
            </summary>
            <remarks>When this property is set, the HasMoved flag is set and the new position is corrected if it is very close to a pixel boundary.</remarks>
        </member>
        <member name="P:SMLimitless.Sprites.Tile.Size">
            <summary>
            Gets or sets the size of this tile in pixels.
            </summary>
        </member>
        <member name="P:SMLimitless.Sprites.Tile.SurfaceFriction">
            <summary>
            Gets the surface friction of the tile - how much sprites not moving on their own decelerate in each frame. Measured in pixels per second squared.
            </summary>
        </member>
        <member name="P:SMLimitless.Sprites.Tile.HasMoved">
            <summary>
            Gets or sets a value indicating whether this tile has moved during this frame.
            </summary>
        </member>
        <member name="M:SMLimitless.Sprites.Tile.GetCustomSerializableObjects">
            <summary>
            Gets an anonymous object containing other objects that need to be saved in the level file.
            </summary>
            <returns>An anonymous object containing objects to be saved in the level file.</returns>
        </member>
        <member name="P:SMLimitless.Sprites.Tile.Bounds">
            <summary>
            Gets a rectangle that totally contains this tile.
            </summary>
        </member>
        <member name="P:SMLimitless.Sprites.Tile.Hitbox">
            <summary>
            Gets the collidable hitbox for this tile.
            </summary>
        </member>
        <member name="P:SMLimitless.Sprites.Tile.RectSolidSides">
            <summary>
            Gets or sets a value indicating which sides of a rectangular tile are solid.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown in the getter if the internal SolidSides property has been set to an invalid value.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown in the setter if this tile is not a rectangle.</exception>
            <exception cref="T:System.ArgumentException">Thrown in the setter if the provided value was invalid.</exception>
        </member>
        <member name="P:SMLimitless.Sprites.Tile.TriSolidSides">
            <summary>
            Gets or sets a value indicating which sides of a triangular tile are solid.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown in the getter if the value of the internal SolidSides property is invalid.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown in the setter if this tile is not a triangle.</exception>
            <exception cref="T:System.ArgumentException">Thrown in the setter if the provided value is invalid.</exception>
        </member>
        <member name="P:SMLimitless.Sprites.Tile.AdjacencyFlags">
            <summary>
            Gets a value indicating if there are slopes on either side of this tile.
            </summary>
        </member>
        <member name="P:SMLimitless.Sprites.Tile.SlopedSides">
            <summary>
            Gets or sets a value indicating which two sides of this tile have been replaced by the sloped side.
            </summary>
        </member>
        <member name="P:SMLimitless.Sprites.Tile.Owner">
            <summary>
            Gets or sets the <see cref="T:SMLimitless.Sprites.Collections.Section"/> that owns this tile.
            </summary>
        </member>
        <member name="P:SMLimitless.Sprites.Tile.EditorCategory">
            <summary>
            Gets the name of the category that this tile is
            categorized within in the level editor.
            </summary>
        </member>
        <member name="P:SMLimitless.Sprites.Tile.EditorLabel">
            <summary>
            Gets or sets the name of this tile used in the level editor.
            </summary>
        </member>
        <member name="P:SMLimitless.Sprites.Tile.IsActive">
            <summary>
            Gets or sets a flag indicating whether this tile is active.
            </summary>
        </member>
        <member name="P:SMLimitless.Sprites.Tile.InitialState">
            <summary>
            Gets or sets a string indicating the initial state of this tile.
            </summary>
        </member>
        <member name="P:SMLimitless.Sprites.Tile.State">
            <summary>
            Gets or sets a string indicating the current state of this tile.
            </summary>
        </member>
        <member name="P:SMLimitless.Sprites.Tile.BreakOnCollision">
            <summary>
            Gets or sets a value indicating whether a collision between this tile and a sprite should break the debugger if the collision debugger is enabled.
            </summary>
        </member>
        <member name="P:SMLimitless.Sprites.Tile.Name">
            <summary>
            Gets or sets the name of this tile to be used in event scripting.  This field is optional.
            </summary>
        </member>
        <member name="P:SMLimitless.Sprites.Tile.GraphicsResourceName">
            <summary>
            Gets or sets the name of the graphics resource used by this tile.
            </summary>
        </member>
        <member name="M:SMLimitless.Sprites.Tile.Initialize(SMLimitless.Sprites.Collections.Section)">
            <summary>
            Initializes this tile.
            </summary>
            <param name="owner">The Section that owns this tile.</param>
        </member>
        <member name="M:SMLimitless.Sprites.Tile.LoadContent">
            <summary>
            Loads the content for this tile.
            </summary>
        </member>
        <member name="M:SMLimitless.Sprites.Tile.Update">
            <summary>
            Updates this tile.
            </summary>
        </member>
        <member name="M:SMLimitless.Sprites.Tile.Draw">
            <summary>
            Draws this tile.
            </summary>
        </member>
        <member name="M:SMLimitless.Sprites.Tile.Intersects(SMLimitless.Sprites.Sprite)">
            <summary>
            Determines if a given sprite intersects this tile.
            </summary>
            <param name="sprite">The sprite to check.</param>
            <returns>True if the sprite intersects this tile, false if otherwise.</returns>
            <remarks>This method accounts for the different tile collision types.</remarks>
        </member>
        <member name="M:SMLimitless.Sprites.Tile.GetCollisionResolution(SMLimitless.Sprites.Sprite)">
            <summary>
            Returns the distance to resolve a given colliding sprite by
            so that it will be moved out of this tile.
            </summary>
            <param name="sprite">The sprite to resolve.</param>
            <returns>A resolution containing the distance.</returns>
            <remarks>This method accounts for the different tile collision types.</remarks>
        </member>
        <member name="M:SMLimitless.Sprites.Tile.HandleCollision(SMLimitless.Sprites.Sprite)">
            <summary>
            An abstract method which is called when a sprite intersects this tile.
            </summary>
            <param name="sprite">The sprite that intersected this tile.</param>
        </member>
        <member name="M:SMLimitless.Sprites.Tile.HandleCollision(SMLimitless.Sprites.Sprite,Microsoft.Xna.Framework.Vector2)">
            <summary>
            Handles a collision between this tile and a sprite.
            </summary>
            <param name="sprite">The sprite that has collided with this tile.</param>
            <param name="intersect">The depth of the intersection.</param>
        </member>
        <member name="M:SMLimitless.Sprites.Tile.Clone">
            <summary>
            Creates a deep copy of this tile.
            </summary>
            <returns>A new tile instance with most of the same values as this tile.</returns>
        </member>
        <member name="M:SMLimitless.Sprites.Tile.DeserializeCustomObjects(SMLimitless.Sprites.Assemblies.JsonHelper)">
            <summary>
            Loads key custom objects from the level file.
            </summary>
            <param name="customObjects">An object containing key custom objects.</param>
        </member>
        <member name="T:SMLimitless.Physics.HorizontalDirection">
            <summary>
            Defines the horizontal directions of left, right, and none.
            </summary>
        </member>
        <member name="F:SMLimitless.Physics.HorizontalDirection.Left">
            <summary>
            The leftward cardinal direction (negative X).
            </summary>
        </member>
        <member name="F:SMLimitless.Physics.HorizontalDirection.None">
            <summary>
            No direction.
            </summary>
        </member>
        <member name="F:SMLimitless.Physics.HorizontalDirection.Right">
            <summary>
            The rightward cardinal direction (positive X).
            </summary>
        </member>
        <member name="T:SMLimitless.Physics.VerticalDirection">
            <summary>
            Defines the vertical directions of up, down, and none.
            </summary>
        </member>
        <member name="F:SMLimitless.Physics.VerticalDirection.Up">
            <summary>
            The upward cardinal direction (negative Y).
            </summary>
        </member>
        <member name="F:SMLimitless.Physics.VerticalDirection.None">
            <summary>
            No direction.
            </summary>
        </member>
        <member name="F:SMLimitless.Physics.VerticalDirection.Down">
            <summary>
            The downward cardinal direction (positive Y).
            </summary>
        </member>
        <member name="T:SMLimitless.Physics.FlaggedDirection">
            <summary>
            Enumerates the cardinal directions as a set of flags.
            </summary>
        </member>
        <member name="F:SMLimitless.Physics.FlaggedDirection.None">
            <summary>
            Represents no direction set.
            </summary>
        </member>
        <member name="F:SMLimitless.Physics.FlaggedDirection.Up">
            <summary>
            Represents the upward cardinal direction (negative Y).
            </summary>
        </member>
        <member name="F:SMLimitless.Physics.FlaggedDirection.Down">
            <summary>
            Represents the downward cardinal direction (positive Y).
            </summary>
        </member>
        <member name="F:SMLimitless.Physics.FlaggedDirection.Left">
            <summary>
            Represents the leftward cardinal direction (negative X).
            </summary>
        </member>
        <member name="F:SMLimitless.Physics.FlaggedDirection.Right">
            <summary>
            Represents the rightward cardinal direction (positive X).
            </summary>
        </member>
        <member name="T:SMLimitless.Physics.CollidableShape">
            <summary>
            An enumeration of the collidable shapes that
            SML supports.
            </summary>
        </member>
        <member name="F:SMLimitless.Physics.CollidableShape.Rectangle">
            <summary>
            A parallelogram with sides parallel to the coordinate axes.
            </summary>
        </member>
        <member name="F:SMLimitless.Physics.CollidableShape.RightTriangle">
            <summary>
            A rectangle split in half from corner to corner.
            </summary>
        </member>
        <member name="T:SMLimitless.Physics.ResolutionType">
            <summary>
            An enumeration of the different types of
            collision resolutions between tiles and sprites.
            </summary>
        </member>
        <member name="F:SMLimitless.Physics.ResolutionType.None">
            <summary>
            Not a resolution (resolution of zero).
            </summary>
        </member>
        <member name="F:SMLimitless.Physics.ResolutionType.Normal">
            <summary>
            A resolution between a sprite and a straight edge of a tile.
            </summary>
        </member>
        <member name="F:SMLimitless.Physics.ResolutionType.Slope">
            <summary>
            A resolution between a sprite and the sloped side of a sloped tile.
            </summary>
        </member>
        <member name="T:SMLimitless.Physics.RectangularSpaceDivision">
            <summary>
            Enumerates the division of the space around a rectangle.
            </summary>
        </member>
        <member name="F:SMLimitless.Physics.RectangularSpaceDivision.None">
            <summary>
            The default/invalid value.
            </summary>
        </member>
        <member name="F:SMLimitless.Physics.RectangularSpaceDivision.Within">
            <summary>
            The area within the rectangle.
            </summary>
        </member>
        <member name="F:SMLimitless.Physics.RectangularSpaceDivision.Above">
            <summary>
            The area directly above the rectangle.
            </summary>
        </member>
        <member name="F:SMLimitless.Physics.RectangularSpaceDivision.Below">
            <summary>
            The area directly below the rectangle.
            </summary>
            
        </member>
        <member name="F:SMLimitless.Physics.RectangularSpaceDivision.Left">
            <summary>
            The area directly to the left of the rectangle.
            </summary>
        </member>
        <member name="F:SMLimitless.Physics.RectangularSpaceDivision.Right">
            <summary>
            The area directly to the right of the rectangle.
            </summary>
        </member>
        <member name="F:SMLimitless.Physics.RectangularSpaceDivision.AboveLeft">
            <summary>
            The area above and to the left of the rectangle.
            </summary>
        </member>
        <member name="F:SMLimitless.Physics.RectangularSpaceDivision.AboveRight">
            <summary>
            The area above and to the right of the rectangle.
            </summary>
        </member>
        <member name="F:SMLimitless.Physics.RectangularSpaceDivision.BelowLeft">
            <summary>
            The area below and to the left of the rectangle.
            </summary>
        </member>
        <member name="F:SMLimitless.Physics.RectangularSpaceDivision.BelowRight">
            <summary>
            The area below and to the right of the rectangle.
            </summary>
        </member>
        <member name="T:SMLimitless.Physics.BoundingRectangle">
            <summary>
            Using Rectangle for Collision bounds causes 'jiggling' as Rectangle 
            must round values to integers. This struct uses float for precision.
            </summary>
        </member>
        <member name="F:SMLimitless.Physics.BoundingRectangle.IntersectionCallCount">
            <summary>
            Debug; keeps track of how many times intersection methods have been called.
            </summary>
        </member>
        <member name="F:SMLimitless.Physics.BoundingRectangle.min">
            <summary>
            The position of the top-left corner.
            </summary>
        </member>
        <member name="F:SMLimitless.Physics.BoundingRectangle.max">
            <summary>
            The size of the rectangle.
            </summary>
        </member>
        <member name="P:SMLimitless.Physics.BoundingRectangle.Zero">
            <summary>
            Gets a bounding rectangle at the origin of the world with zero width and height.
            </summary>
        </member>
        <member name="P:SMLimitless.Physics.BoundingRectangle.NaN">
            <summary>
            Gets a bounding rectangle with all coordinates set to NaN.
            </summary>
        </member>
        <member name="M:SMLimitless.Physics.BoundingRectangle.#ctor(Microsoft.Xna.Framework.Rectangle)">
            <summary>
            Initializes a new instance of the <see cref="T:SMLimitless.Physics.BoundingRectangle"/> struct.
            </summary>
            <param name="rectangle">The <see cref="T:Microsoft.Xna.Framework.Rectangle"/> used to create this rectangle.</param>
        </member>
        <member name="M:SMLimitless.Physics.BoundingRectangle.#ctor(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
            <summary>
            Initializes a new instance of the <see cref="T:SMLimitless.Physics.BoundingRectangle"/> struct.
            </summary>
            <param name="start">The position of the top-left corner.</param>
            <param name="end">The size of the rectangle.</param>
        </member>
        <member name="M:SMLimitless.Physics.BoundingRectangle.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:SMLimitless.Physics.BoundingRectangle"/> struct.
            </summary>
            <param name="x">The X-coordinate of the top-left corner.</param>
            <param name="y">The Y-coordinate of the top-right corner.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="P:SMLimitless.Physics.BoundingRectangle.X">
            <summary>
            Gets or sets the X-coordinate of the left line.
            </summary>
        </member>
        <member name="P:SMLimitless.Physics.BoundingRectangle.Y">
            <summary>
            Gets or sets the Y-coordinate of the top line.
            </summary>
        </member>
        <member name="P:SMLimitless.Physics.BoundingRectangle.Width">
            <summary>
            Gets or sets the width.
            </summary>
        </member>
        <member name="P:SMLimitless.Physics.BoundingRectangle.Height">
            <summary>
            Gets or sets the height.
            </summary>
        </member>
        <member name="P:SMLimitless.Physics.BoundingRectangle.Left">
            <summary>
            Gets the X-coordinate of the left line.
            </summary>
        </member>
        <member name="P:SMLimitless.Physics.BoundingRectangle.Top">
            <summary>
            Gets the Y-coordinate of the top line.
            </summary>
        </member>
        <member name="P:SMLimitless.Physics.BoundingRectangle.Right">
            <summary>
            Gets the X-coordinate of the right line.
            </summary>
        </member>
        <member name="P:SMLimitless.Physics.BoundingRectangle.Bottom">
            <summary>
            Gets the Y-coordinate of the bottom line.
            </summary>
        </member>
        <member name="P:SMLimitless.Physics.BoundingRectangle.TopCenter">
            <summary>
            Gets the position of the top-center point of this rectangle.
            </summary>
        </member>
        <member name="P:SMLimitless.Physics.BoundingRectangle.BottomCenter">
            <summary>
            Gets the position of the bottom-center point of this rectangle.
            </summary>
        </member>
        <member name="P:SMLimitless.Physics.BoundingRectangle.LeftCenter">
            <summary>
            Gets the position of the center point on the left edge.
            </summary>
        </member>
        <member name="P:SMLimitless.Physics.BoundingRectangle.RightCenter">
            <summary>
            Gets the position of the center point on the right edge.
            </summary>
        </member>
        <member name="P:SMLimitless.Physics.BoundingRectangle.Position">
            <summary>
            Gets or sets the position.
            </summary>
        </member>
        <member name="P:SMLimitless.Physics.BoundingRectangle.Size">
            <summary>
            Gets or sets the size.
            </summary>
        </member>
        <member name="P:SMLimitless.Physics.BoundingRectangle.Center">
            <summary>
            Gets the position of the point in the center.
            </summary>
        </member>
        <member name="P:SMLimitless.Physics.BoundingRectangle.Shape">
            <summary>
            Gets the shape of this collidable object.
            </summary>
        </member>
        <member name="P:SMLimitless.Physics.BoundingRectangle.Bounds">
            <summary>
            Gets this rectangle.
            </summary>
            <remarks>This member is required for the ICollidableShape interface.</remarks>
        </member>
        <member name="P:SMLimitless.Physics.BoundingRectangle.BottomRight">
            <summary>
            Gets the position of the bottom-right point on this rectangle.
            </summary>
        </member>
        <member name="P:SMLimitless.Physics.BoundingRectangle.TopRight">
            <summary>
            Gets the position of the top-right point on this rectangle.
            </summary>
        </member>
        <member name="P:SMLimitless.Physics.BoundingRectangle.BottomLeft">
            <summary>
            Gets the position of the bottom-left point on this rectangle.
            </summary>
        </member>
        <member name="P:SMLimitless.Physics.BoundingRectangle.TopLeft">
            <summary>
            Gets the position of the top-left point on this rectangle.
            </summary>
        </member>
        <member name="M:SMLimitless.Physics.BoundingRectangle.FromSimpleString(System.String)">
            <summary>
            Returns a rectangle created from a simple string representation.
            </summary>
            <param name="input">A string containing four comma-delimited numbers.</param>
            <returns>A rectangle created from the string.</returns>
        </member>
        <member name="M:SMLimitless.Physics.BoundingRectangle.Serialize">
            <summary>
            Returns a string representing the components of this rectangle.
            </summary>
            <returns>A string in the format "X, Y, Width, Height".</returns>
        </member>
        <member name="M:SMLimitless.Physics.BoundingRectangle.IsNaN">
            <summary>
            Checks if any component of this rectangle is Not a Number (NaN).
            </summary>
            <returns>True if any component is equal to float.NaN, false if otherwise.</returns>
        </member>
        <member name="M:SMLimitless.Physics.BoundingRectangle.Intersects(Microsoft.Xna.Framework.Vector2)">
            <summary>
            Determines if a given point is within this rectangle.
            </summary>
            <param name="point">The point to check.</param>
            <returns>True if the point is within this rectangle, false if otherwise.</returns>
        </member>
        <member name="M:SMLimitless.Physics.BoundingRectangle.IntersectsIncludingEdges(Microsoft.Xna.Framework.Vector2)">
            <summary>
            Determines if a given point is within or tangent to this rectangle.
            </summary>
            <param name="point">The point to check.</param>
            <returns>True if the point is within or tangent to this rectangle, false if otherwise.</returns>
        </member>
        <member name="M:SMLimitless.Physics.BoundingRectangle.Intersects(SMLimitless.Physics.BoundingRectangle)">
            <summary>
            Determines if a given rectangle is intersecting this rectangle.
            </summary>
            <param name="that">The rectangle to check.</param>
            <returns>True if any part of the other rectangle is intersecting this rectangle, false if otherwise.</returns>
        </member>
        <member name="M:SMLimitless.Physics.BoundingRectangle.IntersectsIncludingEdges(SMLimitless.Physics.BoundingRectangle)">
            <summary>
            Returns a value indicating whether another rectangle intersects or is tangent to this one.
            </summary>
            <param name="that">The other rectangle.</param>
            <returns>True if the other rectangle intersects or is tangent to this one, false if otherwise.</returns>
        </member>
        <member name="M:SMLimitless.Physics.BoundingRectangle.Intersects(SMLimitless.Physics.RightTriangle)">
            <summary>
            Determines if a given right triangle is intersecting this rectangle.
            </summary>
            <param name="triangle">The right triangle to check.</param>
            <returns>True if any part of the right triangle is intersecting this rectangle, false if otherwise.</returns>
        </member>
        <member name="M:SMLimitless.Physics.BoundingRectangle.Within(Microsoft.Xna.Framework.Vector2,System.Boolean)">
            <summary>
            Determines if a point is within this rectangle.
            </summary>
            <param name="point">The point to check.</param>
            <param name="adjacentPointsAreWithin">If true, any point on the edge of the shape will be considered within.</param>
            <returns>True if the point is within the shape, false if otherwise.</returns>
        </member>
        <member name="M:SMLimitless.Physics.BoundingRectangle.Within(SMLimitless.Physics.BoundingRectangle)">
            <summary>
            Returns a value indicating whether a bounding rectangle is entirely contained within this rectangle.
            </summary>
            <param name="that">The other rectangle.</param>
            <returns>True if the other rectangle is entirely contained within this one, false if otherwise.</returns>
        </member>
        <member name="M:SMLimitless.Physics.BoundingRectangle.GetPointRelation(Microsoft.Xna.Framework.Vector2)">
            <summary>
            Returns a value indicating whether a point is above, below, to the left of, et cetera, of this rectangle.
            </summary>
            <param name="point">The point to check.</param>
            <returns>A <see cref="T:SMLimitless.Physics.RectangularSpaceDivision"/> instance indicating where the point is with relation to this rectangle.</returns>
        </member>
        <member name="M:SMLimitless.Physics.BoundingRectangle.GetIntersectionDepth(SMLimitless.Physics.BoundingRectangle)">
            <summary>
            Returns the intersection depth between a given rectangle and this one.
            </summary>
            <param name="that">The rectangle to check.</param>
            <returns>The intersection depth between the other rectangle and this one. If the rectangles aren't intersecting, a vector with NaN components is returned.</returns>
            <remarks>
            This method determines the sign of either component of the result
            by determining the "direction" of the intersection - for example,
            if the right edge of the other rectangle is to the left of the center
            of this rectangle, the "direction" is to the left, and since left is
            negative X, the resulting X component will be negative.
            </remarks>
        </member>
        <member name="M:SMLimitless.Physics.BoundingRectangle.GetCollisionResolution(SMLimitless.Physics.BoundingRectangle)">
            <summary>
            Returns the distance to move a given rectangle
            in order to properly resolve a collision.
            </summary>
            <param name="that">The rectangle to check.</param>
            <returns>A value that can be applied to the position of the rectangle
            to move it the minimum distance such that it won't be intersecting this one.</returns>
            <remarks>Internally, this method uses the GetIntersectionDepth() method to determine
            the intersection depth. It then determines which of the two axes has the smallest absolute
            value and zeroes out the other. This way of collision resolution is called the "shallowest edge"
            method, and it allows quick determination of which axis to resolve along.</remarks>
        </member>
        <member name="M:SMLimitless.Physics.BoundingRectangle.GetCollisionResolution(Microsoft.Xna.Framework.Vector2)">
            <summary>
            Returns the distance to move a given rectangle
            in order to properly resolve a collision.
            </summary>
            <param name="intersect">The intersection depth for the other rectangle.</param>
            <returns>A value that can be applied to the position of the rectangle
            to move it the minimum distance such that it won't be intersecting this one.</returns>
        </member>
        <member name="M:SMLimitless.Physics.BoundingRectangle.GetTopPoint(System.Single)">
            <summary>
            Gets the Y-coordinate of the top of this rectangle.
            </summary>
            <param name="x">The x-coordinate to check for.</param>
            <returns>The Y-coordinate of the top of this rectangle.</returns>
        </member>
        <member name="M:SMLimitless.Physics.BoundingRectangle.ToRectangle">
            <summary>
            Returns a standard Rectangle that uses integral components.
            </summary>
            <returns>The standard Rectangle.</returns>
        </member>
        <member name="M:SMLimitless.Physics.BoundingRectangle.Draw(Microsoft.Xna.Framework.Color)">
            <summary>
            Draws this rectangle to the screen.
            </summary>
            <param name="color">The color of the rectangle.</param>
        </member>
        <member name="M:SMLimitless.Physics.BoundingRectangle.DrawOutline(Microsoft.Xna.Framework.Color)">
            <summary>
            Draws the outline of this rectangle to the screen.
            </summary>
            <param name="color">The color of the outline.</param>
        </member>
        <member name="M:SMLimitless.Physics.BoundingRectangle.ToString">
            <summary>
            Returns a string representing key values of this rectangle.
            </summary>
            <returns>A string representing key values of this rectangle.</returns>
        </member>
        <member name="T:SMLimitless.Physics.Camera2D">
            <summary>
            Represents a camera that is used to view a portion
            of a two-dimensional space.
            </summary>
        </member>
        <member name="F:SMLimitless.Physics.Camera2D.zoom">
            <summary>
            A backing field for the Zoom property.
            </summary>
        </member>
        <member name="F:SMLimitless.Physics.Camera2D.position">
            <summary>
            A backing field for the Position property;
            </summary>
        </member>
        <member name="F:SMLimitless.Physics.Camera2D.transform">
            <summary>
            A field containing the matrix transformation for the camera.
            </summary>
        </member>
        <member name="P:SMLimitless.Physics.Camera2D.Zoom">
            <summary>
            Gets or sets the zoom of the camera.
            </summary>
        </member>
        <member name="P:SMLimitless.Physics.Camera2D.Rotation">
            <summary>
            Gets or sets the rotation of the camera in degrees.
            </summary>
        </member>
        <member name="P:SMLimitless.Physics.Camera2D.Position">
            <summary>
            Gets or sets the position of the top-left corner of the camera's view.
            </summary>
        </member>
        <member name="P:SMLimitless.Physics.Camera2D.Viewport">
            <summary>
            Gets a rectangle corresponding to the viewport of the camera.
            </summary>
        </member>
        <member name="P:SMLimitless.Physics.Camera2D.ViewportSize">
            <summary>
            Gets the size of the viewport of the camera, adjusted for zoom.
            </summary>
        </member>
        <member name="M:SMLimitless.Physics.Camera2D.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SMLimitless.Physics.Camera2D"/> class.
            </summary>
        </member>
        <member name="M:SMLimitless.Physics.Camera2D.Move(Microsoft.Xna.Framework.Vector2)">
            <summary>
            Moves the camera by a given distance.
            </summary>
            <param name="amount">The distance to move the camera by.</param>
        </member>
        <member name="M:SMLimitless.Physics.Camera2D.GetTransformation">
            <summary>
            Gets a matrix transformation for use with the sprite batch.
            </summary>
            <returns>The matrix transformation.</returns>
        </member>
        <member name="T:SMLimitless.Physics.CameraSystem">
            <summary>
            A system that moves a <see cref="T:SMLimitless.Physics.Camera2D"/> instance around a <see cref="T:SMLimitless.Sprites.Collections.Section"/> instance.
            </summary>
        </member>
        <member name="P:SMLimitless.Physics.CameraSystem.ActiveBounds">
            <summary>
            Gets a rectangle in which game objects such as tiles and sprites are active.
            </summary>
        </member>
        <member name="P:SMLimitless.Physics.CameraSystem.StayInBounds">
            <summary>
            Gets or sets a value indicating whether the camera's viewport should stay within bounds.
            </summary>
        </member>
        <member name="M:SMLimitless.Physics.CameraSystem.#ctor(SMLimitless.Physics.Camera2D,SMLimitless.Physics.BoundingRectangle,SMLimitless.Interfaces.IPositionable2[])">
            <summary>
            Initializes a new instance of the <see cref="T:SMLimitless.Physics.CameraSystem"/> class.
            </summary>
            <param name="camera">A camera for the system to move.</param>
            <param name="totalBounds">The bounds of the <see cref="T:SMLimitless.Sprites.Collections.Section"/> instance.</param>
            <param name="trackingObjects">A collection of objects that the camera should follow.</param>
        </member>
        <member name="M:SMLimitless.Physics.CameraSystem.Update">
            <summary>
            Updates this camera system.
            </summary>
        </member>
        <member name="M:SMLimitless.Physics.CameraSystem.Draw(System.Boolean)">
            <summary>
            Draws the total bounds of the camera system as a green rectangle,
            plus optional debug information.
            </summary>
            <param name="debug">A value indicating whether debug information should be displayed.</param>
        </member>
        <member name="T:SMLimitless.Physics.InterpolatorScaleDelegate">
            <summary>
            A delegate used by Interpolators to scale their progress and generate their current value.
            </summary>
            <param name="progress">The current progress of the Interpolator in the range [0, 1].</param>
            <returns>A value representing the scaled progress used to generate the Interpolator's Value.</returns>
        </member>
        <member name="T:SMLimitless.Physics.Interpolator">
            <summary>
            Represents a type that can interpolate
            between two values, and optionally perform an action
            whenever the interpolator is updated or when the interpolator
            completes.
            </summary>
        </member>
        <member name="M:SMLimitless.Physics.Interpolator.#ctor(System.Single,System.Single,System.Action{SMLimitless.Physics.Interpolator})">
            <summary>
            Initializes a new instance of the <see cref="T:SMLimitless.Physics.Interpolator"/> class.
            </summary>
            <param name="endValue">The value at which the interpolator ends.</param>
            <param name="length">The length in seconds of the interpolation.</param>
            <param name="step">The action to perform on each step.</param>
        </member>
        <member name="M:SMLimitless.Physics.Interpolator.#ctor(System.Single,System.Single,System.Single,System.Action{SMLimitless.Physics.Interpolator})">
            <summary>
            Initializes a new instance of the <see cref="T:SMLimitless.Physics.Interpolator"/> class.
            </summary>
            <param name="startValue">The value at which the interpolator starts.</param>
            <param name="endValue">The value at which the interpolator ends.</param>
            <param name="length">The length in seconds of the interpolation.</param>
            <param name="step">The action to perform on each step.</param>
        </member>
        <member name="M:SMLimitless.Physics.Interpolator.#ctor(System.Single,System.Single,System.Single,System.Action{SMLimitless.Physics.Interpolator},SMLimitless.Physics.InterpolatorScaleDelegate)">
            <summary>
            Initializes a new instance of the <see cref="T:SMLimitless.Physics.Interpolator"/> class.
            </summary>
            <param name="startValue">The value at which the interpolator starts.</param>
            <param name="endValue">The value at which the interpolator ends.</param>
            <param name="length">The length in seconds of the interpolation.</param>
            <param name="step">The action to perform on each step.</param>
            <param name="scale">The kind of interpolator scale to use.</param>
        </member>
        <member name="M:SMLimitless.Physics.Interpolator.#ctor(System.Single,System.Single,System.Single,System.Action{SMLimitless.Physics.Interpolator},System.Action{SMLimitless.Physics.Interpolator},SMLimitless.Physics.InterpolatorScaleDelegate)">
            <summary>
            Initializes a new instance of the <see cref="T:SMLimitless.Physics.Interpolator"/> class.
            </summary>
            <param name="startValue">The value at which the interpolator starts.</param>
            <param name="endValue">The value at which the interpolator ends.</param>
            <param name="length">The length in seconds of the interpolation.</param>
            <param name="step">The action to perform on each step.</param>
            <param name="completed">The action to perform when the interpolator completes.</param>
            <param name="scale">The kind of interpolator scale to use.</param>
        </member>
        <member name="M:SMLimitless.Physics.Interpolator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SMLimitless.Physics.Interpolator"/> class.
            </summary>
        </member>
        <member name="P:SMLimitless.Physics.Interpolator.Enabled">
            <summary>
            Gets a value indicating whether this interpolator is currently running.
            </summary>
        </member>
        <member name="P:SMLimitless.Physics.Interpolator.Start">
            <summary>
            Gets the value at which the interpolator starts.
            </summary>
        </member>
        <member name="P:SMLimitless.Physics.Interpolator.End">
            <summary>
            Gets the value at which the interpolator ends.
            </summary>
        </member>
        <member name="P:SMLimitless.Physics.Interpolator.Range">
            <summary>
            Gets the range (end - start) of the interpolator.
            </summary>
        </member>
        <member name="P:SMLimitless.Physics.Interpolator.Progress">
            <summary>
            Gets the interpolator's progress in the range of [0, 1].
            </summary>
        </member>
        <member name="P:SMLimitless.Physics.Interpolator.Value">
            <summary>
            Gets the current value of the interpolator.
            </summary>
        </member>
        <member name="P:SMLimitless.Physics.Interpolator.Length">
            <summary>
            Gets the length in seconds of how long the interpolation will take.
            </summary>
        </member>
        <member name="P:SMLimitless.Physics.Interpolator.Scale">
            <summary>
            Gets the scale of this interpolator.
            </summary>
        </member>
        <member name="P:SMLimitless.Physics.Interpolator.Step">
            <summary>
            Gets the action to perform whenever a step occurs.
            </summary>
        </member>
        <member name="P:SMLimitless.Physics.Interpolator.Completed">
            <summary>
            Gets the action to perform whenever the interpolation is complete.
            </summary>
        </member>
        <member name="M:SMLimitless.Physics.Interpolator.Stop">
            <summary>
            Stops this interpolator.
            </summary>
        </member>
        <member name="M:SMLimitless.Physics.Interpolator.ForceFinish">
            <summary>
            Forces the interpolator to finish immediately.
            </summary>
        </member>
        <member name="M:SMLimitless.Physics.Interpolator.Update">
            <summary>
            Updates this interpolator.
            </summary>
        </member>
        <member name="M:SMLimitless.Physics.Interpolator.ToString">
            <summary>
            Returns a string containing several useful values.
            </summary>
            <returns>A string containing several useful values.</returns>
        </member>
        <member name="M:SMLimitless.Physics.Interpolator.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a string containing several useful values.
            </summary>
            <param name="format">The parameter is not used.</param>
            <param name="formatProvider">The parameter is not used.</param>
            <returns>A string containing several useful values.</returns>
        </member>
        <member name="M:SMLimitless.Physics.Interpolator.Reset(System.Single,System.Single,System.Single,System.Action{SMLimitless.Physics.Interpolator},System.Action{SMLimitless.Physics.Interpolator},SMLimitless.Physics.InterpolatorScaleDelegate)">
            <summary>
            Resets the values of this interpolator.
            </summary>
            <param name="startValue">The value at which the interpolator starts.</param>
            <param name="endValue">The value at which the interpolator ends.</param>
            <param name="length">The length in seconds of the interpolation.</param>
            <param name="step">The action to perform on each step.</param>
            <param name="completed">The action to perform when the interpolator completes.</param>
            <param name="scale">The kind of interpolator scale to use.</param>
        </member>
        <member name="T:SMLimitless.Physics.InterpolatorScales">
            <summary>
            Defines several different scales
            for interpolators to use.
            </summary>
        </member>
        <member name="M:SMLimitless.Physics.InterpolatorScales.#cctor">
            <summary>
            Initializes static members of the <see cref="T:SMLimitless.Physics.InterpolatorScales"/> class.
            </summary>
        </member>
        <member name="P:SMLimitless.Physics.InterpolatorScales.Linear">
            <summary>
            Gets a scale that linearly interpolates between two values.
            The change in the value on every step is equal.
            </summary>
        </member>
        <member name="P:SMLimitless.Physics.InterpolatorScales.Quadratic">
            <summary>
            Gets a quadratic scale to interpolate between two values.
            The value starts increasing slowly, and gains more speed as it approaches completion.
            </summary>
        </member>
        <member name="P:SMLimitless.Physics.InterpolatorScales.InverseQuadratic">
            <summary>
            Gets an inverse quadratic scale to interpolate between two values.
            The value starts increasing quickly, and loses speed as it approaches completion.
            </summary>
        </member>
        <member name="P:SMLimitless.Physics.InterpolatorScales.Cubic">
            <summary>
            Gets a cubic scale to interpolate between two values.
            This scale is similar to the quadratic scale, although it seems
            to accelerate more slowly.
            </summary>
        </member>
        <member name="P:SMLimitless.Physics.InterpolatorScales.SmoothStep">
            <summary>
            Gets a smooth step scale to interpolate between two values.
            The value will start increasing slowly, accelerate, and then slow
            down as it approaches completion.
            </summary>
        </member>
        <member name="M:SMLimitless.Physics.InterpolatorScales.LinearScale(System.Single)">
            <summary>
            Applies the linear scale to a certain amount of progress.
            </summary>
            <param name="progress">The original progress.</param>
            <returns>The progress itself (it remains unchanged).</returns>
        </member>
        <member name="M:SMLimitless.Physics.InterpolatorScales.QuadraticScale(System.Single)">
            <summary>
            Applies the quadratic scale to a certain amount of progress.
            Only use for progress values less than 1.
            </summary>
            <param name="progress">The original progress.</param>
            <returns>Returns the progress multiplied by itself.</returns>
        </member>
        <member name="M:SMLimitless.Physics.InterpolatorScales.InverseQuadraticScale(System.Single)">
            <summary>
            Applies the inverse quadratic scale to a certain amount of progress.
            Only use for progress values less than 1.
            </summary>
            <param name="progress">The original progress.</param>
            <returns>Return 1 minus the inverse (1 minus the progress) squared.</returns>
        </member>
        <member name="M:SMLimitless.Physics.InterpolatorScales.CubicScale(System.Single)">
            <summary>
            Applies the cubic scale to a certain amount of progress.
            Only use for progress values less than 1.
            </summary>
            <param name="progress">The original progress.</param>
            <returns>The progress multiplied by itself thrice.</returns>
        </member>
        <member name="M:SMLimitless.Physics.InterpolatorScales.SmoothstepScale(System.Single)">
            <summary>
            Applies the smooth step scale to a certain amount of progress.
            Only use for progress values less than 1.
            </summary>
            <param name="progress">The original progress.</param>
            <returns>Returns the progress, multiplied by itself, multiplied by 3 less than twice the progress.</returns>
        </member>
        <member name="T:SMLimitless.Physics.Path">
            <summary>
            A collection of points that creates
            a set of lines that objects can follow.
            </summary>
        </member>
        <member name="F:SMLimitless.Physics.Path.pathingObject">
            <summary>
            The object currently attached to this path.
            This contains a null reference if no object is attached.
            </summary>
        </member>
        <member name="P:SMLimitless.Physics.Path.Points">
            <summary>
            Gets or sets a collection of the points representing this path.
            </summary>
        </member>
        <member name="E:SMLimitless.Physics.Path.PointNotifierEvent">
            <summary>
            An event notifying an attached object that it has reached
            one of the points and should change its velocity to continue
            along the path.
            </summary>
        </member>
        <member name="M:SMLimitless.Physics.Path.#ctor(SMLimitless.Interfaces.IPositionable)">
            <summary>
            Initializes a new instance of the <see cref="T:SMLimitless.Physics.Path"/> class.
            </summary>
            <param name="pathingObject">An object to attach to this path.</param>
        </member>
        <member name="M:SMLimitless.Physics.Path.CalculateVelocityMultiplier(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
            <summary>
            Calculates a vector with component between 0 and 1,
            based on the angle between two given points, to ensure that
            velocity is distributed such that an attached object will follow that path.
            </summary>
            <param name="a">The first point.</param>
            <param name="b">The second point.</param>
            <returns>A vector with components between 0 and 1.</returns>
        </member>
        <member name="M:SMLimitless.Physics.Path.OnPointNotifier(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
            <summary>
            Fires the point notifier event, providing a velocity multiplier.
            </summary>
            <param name="a">The first point.</param>
            <param name="b">The second point.</param>
        </member>
        <member name="M:SMLimitless.Physics.Path.GetPoints">
            <summary>
            Returns a list of the points in this path.
            </summary>
            <returns>A list of points in this path.</returns>
        </member>
        <member name="M:SMLimitless.Physics.Path.Draw(Microsoft.Xna.Framework.Color)">
            <summary>
            Draws the lines between the points in the path.
            </summary>
            <param name="color">The color to draw the lines.</param>
        </member>
        <member name="M:SMLimitless.Physics.Path.Update">
            <summary>
            Updates an attached object along this path.
            </summary>
        </member>
        <member name="M:SMLimitless.Physics.Path.GetSerializableObjects">
            <summary>
            Returns the serializable objects for this path.
            </summary>
            <returns>An anonymous object containing a list of points.</returns>
        </member>
        <member name="M:SMLimitless.Physics.Path.Serialize">
            <summary>
            Returns the serialized form of this path.
            </summary>
            <returns>A JSON string containing this path's data.</returns>
        </member>
        <member name="M:SMLimitless.Physics.Path.Deserialize(System.String)">
            <summary>
            Sets the points in this object.
            </summary>
            <param name="json">A JSON string containing a valid Path state.</param>
        </member>
        <member name="T:SMLimitless.Physics.PointNotifierEventHandler">
            <summary>
            A delegate for the PointNotifier event.
            </summary>
            <param name="newVelocityMultiplier">The new velocity multiplier for the attached object.</param>
        </member>
        <member name="T:SMLimitless.Physics.PhysicsSetting`1">
            <summary>
            Represents a physics setting which can be changed in a <see cref="T:SMLimitless.Forms.PhysicsSettingsEditorForm"/>.
            </summary>
            <typeparam name="T">The type of the value of the setting.</typeparam>
        </member>
        <member name="P:SMLimitless.Physics.PhysicsSetting`1.Name">
            <summary>
            Gets the setting's name.
            </summary>
        </member>
        <member name="P:SMLimitless.Physics.PhysicsSetting`1.Value">
            <summary>
            Gets or sets the current value of the setting.
            </summary>
        </member>
        <member name="P:SMLimitless.Physics.PhysicsSetting`1.Minimum">
            <summary>
            Gets the lowest value the value can be.
            </summary>
        </member>
        <member name="P:SMLimitless.Physics.PhysicsSetting`1.Maximum">
            <summary>
            Gets the highest value the value can be.
            </summary>
        </member>
        <member name="P:SMLimitless.Physics.PhysicsSetting`1.Type">
            <summary>
            Gets the type of value this setting has.
            </summary>
        </member>
        <member name="M:SMLimitless.Physics.PhysicsSetting`1.#ctor(System.String,`0,`0,`0,SMLimitless.Physics.PhysicsSettingType)">
            <summary>
            Initializes a new instance of the <see cref="T:SMLimitless.Physics.PhysicsSetting`1"/> class.
            </summary>
            <param name="name">The setting's name.</param>
            <param name="minimum">The lowest value the value can be.</param>
            <param name="maximum">The highest value the value can be.</param>
            <param name="initialValue">The initial value of the setting.</param>
            <param name="type">The type of value this setting has.</param>
        </member>
        <member name="M:SMLimitless.Physics.PhysicsSetting`1.Dispose">
            <summary>
            Unregisters this setting from the <see cref="T:SMLimitless.Forms.PhysicsSettingsEditorForm"/>.
            </summary>
        </member>
        <member name="T:SMLimitless.Physics.PhysicsSettingType">
            <summary>
            Enumerates the types a physics setting can be.
            </summary>
        </member>
        <member name="F:SMLimitless.Physics.PhysicsSettingType.Integer">
            <summary>
            Represents a setting that is integral (a whole number).
            </summary>
        </member>
        <member name="F:SMLimitless.Physics.PhysicsSettingType.FloatingPoint">
            <summary>
            Represents a setting that is a floating point number.
            </summary>
        </member>
        <member name="F:SMLimitless.Physics.PhysicsSettingType.Boolean">
            <summary>
            Represents a setting that is a Boolean true/false value.
            </summary>
        </member>
        <member name="F:SMLimitless.Physics.PhysicsSettingType.Other">
            <summary>
            Represents a setting that has another type not otherwise listed here.
            </summary>
        </member>
        <member name="T:SMLimitless.Physics.RightTriangle">
            <summary>
            Represents a right triangle, used for sloped tiles.
            </summary>
        </member>
        <member name="P:SMLimitless.Physics.RightTriangle.Bounds">
            <summary>
            Gets or sets the rectangle that completely contains the triangle.
            </summary>
        </member>
        <member name="P:SMLimitless.Physics.RightTriangle.SlopedSides">
            <summary>
            Gets or sets a value indicating which sides of the triangle are sloped.
            </summary>
        </member>
        <member name="P:SMLimitless.Physics.RightTriangle.Slope">
            <summary>
            Gets the slope (rise over run) of the triangle.
            </summary>
        </member>
        <member name="P:SMLimitless.Physics.RightTriangle.Point90">
            <summary>
            Gets the location of the point of the 90-degree angle.
            </summary>
        </member>
        <member name="P:SMLimitless.Physics.RightTriangle.Point1">
            <summary>
            Gets the location of the point at the bottom of the slope.
            </summary>
        </member>
        <member name="P:SMLimitless.Physics.RightTriangle.Point2">
            <summary>
            Gets the location of the point at the top of the slope.
            </summary>
        </member>
        <member name="P:SMLimitless.Physics.RightTriangle.YIntersect">
            <summary>
            Gets the point on the Y-axis where the line
            coinciding with the slope intersects with the Y-axis.
            Equivalent to the variable b in the linear equation y = mx + b.
            </summary>
            <remarks>
            To account for the fact that, in XNA, the Y-axis is flipped
            (positive Y goes down), the equation is b = mx + y.
            </remarks>
        </member>
        <member name="P:SMLimitless.Physics.RightTriangle.Shape">
            <summary>
            Gets the shape of this collidable object.
            </summary>
        </member>
        <member name="P:SMLimitless.Physics.RightTriangle.HorizontalSlopedSide">
            <summary>
            Gets the horizontal side (left or right) that has the sloped edge.
            </summary>
        </member>
        <member name="P:SMLimitless.Physics.RightTriangle.VerticalSlopedSide">
            <summary>
            Gets the vertical side (up or down) that has the sloped edge.
            </summary>
        </member>
        <member name="M:SMLimitless.Physics.RightTriangle.#ctor(SMLimitless.Physics.BoundingRectangle,SMLimitless.Physics.RtSlopedSides)">
            <summary>
            Initializes a new instance of the <see cref="T:SMLimitless.Physics.RightTriangle"/> class.
            </summary>
            <param name="bounds">The rectangle that forms the bounds of the triangle.</param>
            <param name="slopedSides">Which sides of the triangle are sloped.</param>
        </member>
        <member name="M:SMLimitless.Physics.RightTriangle.#ctor(System.Single,System.Single,System.Single,System.Single,SMLimitless.Physics.RtSlopedSides)">
            <summary>
            Initializes a new instance of the <see cref="T:SMLimitless.Physics.RightTriangle"/> class.
            </summary>
            <param name="x">The horizontal distance from the left edge of the game space.</param>
            <param name="y">The vertical distance from the top edge of the game space.</param>
            <param name="width">The width of the triangle.</param>
            <param name="height">The height of the triangle.</param>
            <param name="slopedSides">Which sides of the triangle are replaced by the slope.</param>
        </member>
        <member name="M:SMLimitless.Physics.RightTriangle.GetPointOnSlope(System.Single)">
            <summary>
            Gets a point directly on the slope of the triangle.
            Restricted to the slope itself. To get any point on the line
            coincident to this slope, call GetPointOnLine().
            </summary>
            <param name="x">The X-coordinate to solve for.</param>
            <returns>The point directly on the slope, or NaN if the point is not on the slope.</returns>
        </member>
        <member name="M:SMLimitless.Physics.RightTriangle.GetClampedPointOnSlope(System.Single)">
            <summary>
            For a given vertical line at an X coordinate,
            returns the point of intersection between this line and the slope,
            clamped to the left and right edges of the triangle.
            </summary>
            <param name="x">The X coordinate of the vertical line.</param>
            <returns>A value between the left and right edges of the triangle.</returns>
        </member>
        <member name="M:SMLimitless.Physics.RightTriangle.GetPointOnLine(System.Single)">
            <summary>
            Gets a point directly on the line that is
            coincident to the slope of the triangle.
            To get points only on the slope itself,
            call GetPointOnSlope().
            </summary>
            <param name="x">The X-coordinate to solve for.</param>
            <returns>A point directly on the line.</returns>
        </member>
        <member name="M:SMLimitless.Physics.RightTriangle.Intersects(SMLimitless.Physics.BoundingRectangle)">
            <summary>
            Determines if a given rectangle intersects this triangle.
            </summary>
            <param name="rect">The rectangle to check for intersection.</param>
            <returns>True if any part of the rectangle intersects this right triangle, false if otherwise.</returns>
        </member>
        <member name="M:SMLimitless.Physics.RightTriangle.Within(Microsoft.Xna.Framework.Vector2,System.Boolean)">
            <summary>
            Determines if a point is within this triangle.
            </summary>
            <param name="point">The point to check.</param>
            <param name="adjacentPointsAreWithin">If true, any point on the edge of the shape will be considered within.</param>
            <returns>True if the point is within the shape, false if otherwise.</returns>
        </member>
        <member name="M:SMLimitless.Physics.RightTriangle.GetCollisionResolution(SMLimitless.Physics.BoundingRectangle)">
            <summary>
            Gets the minimum distance to move a given rectangle such that
            it will no longer be intersecting this right triangle.
            </summary>
            <param name="rect">The rectangle to resolve.</param>
            <returns>The minimum distance to move the rectangle,
            which can be directly applied to the rectangle's position.</returns>
            <remarks>This method resolves collision by first determining if the bottom-center point
            (for TopLeft/TopRight triangles) or the top-center point (for BottomLeft/BottomRight
            triangles) is within the bounds. If it is, the method treats it as a slope collision 
            by checking if the point is between the slope and the top. If it isn't, the collision
            is treated as a collision between two rectangles.</remarks>
        </member>
        <member name="M:SMLimitless.Physics.RightTriangle.GetIntersectionDepth(SMLimitless.Physics.BoundingRectangle)">
            <summary>
            Returns the depth of the intersection between this triangle
            and a given rectangle.
            </summary>
            <param name="that">The given rectangle.</param>
            <returns>A vector representing the collision depth.</returns>
        </member>
        <member name="M:SMLimitless.Physics.RightTriangle.GetTopPoint(System.Single)">
            <summary>
            Gets the position of the top of this triangle, given an X-coordinate.
            </summary>
            <param name="x">The X-coordinate to check.</param>
            <returns>The position of the top of this triangle.</returns>
        </member>
        <member name="M:SMLimitless.Physics.RightTriangle.AboveOrBelowSlopeLine(Microsoft.Xna.Framework.Vector2)">
            <summary>
            Returns a value indicating whether a given point rests above or below the slope line.
            </summary>
            <param name="point">The point to check.</param>
            <returns>-1 if the point is above the slope line, 1 if the point is below the slope line, 0 if otherwise.</returns>
        </member>
        <member name="M:SMLimitless.Physics.RightTriangle.ResolveSlopeCollision(SMLimitless.Physics.BoundingRectangle,Microsoft.Xna.Framework.Vector2)">
            <summary>
            Resolves a collision between a rectangle and the sloped side of this triangle.
            </summary>
            <param name="that">The rectangle to resolve.</param>
            <param name="intersection">The intersection between the rectangle and the bounds of this triangle.</param>
            <returns>The distance to move the rectangle by to resolve this collision.</returns>
        </member>
        <member name="M:SMLimitless.Physics.RightTriangle.Draw(System.Boolean)">
            <summary>
            Draws this triangle to the screen.
            </summary>
            <param name="debug">Draws some useful debug information.</param>
        </member>
        <member name="M:SMLimitless.Physics.RightTriangle.ToString">
            <summary>
            Returns a string representation of the important components of the triangle.
            </summary>
            <returns>A string representation.</returns>
        </member>
        <member name="T:SMLimitless.Physics.RtSlopedSides">
            <summary>
            An enumeration defining which sides of a right triangle are sloped.
            </summary>
        </member>
        <member name="F:SMLimitless.Physics.RtSlopedSides.Default">
            <summary>
            A default value. Do not use.
            </summary>
        </member>
        <member name="F:SMLimitless.Physics.RtSlopedSides.TopLeft">
            <summary>
            The top and left sides of the right triangle are sloped.
            </summary>
        </member>
        <member name="F:SMLimitless.Physics.RtSlopedSides.TopRight">
            <summary>
            The top and right sides of the right triangle are sloped.
            </summary>
        </member>
        <member name="F:SMLimitless.Physics.RtSlopedSides.BottomLeft">
            <summary>
            The bottom and left sides of the right triangle are sloped.
            </summary>
        </member>
        <member name="F:SMLimitless.Physics.RtSlopedSides.BottomRight">
            <summary>
            The bottom and right sides of the right triangle are sloped.
            </summary>
        </member>
        <member name="T:SMLimitless.Physics.SectionAutoscrollSettings">
            <summary>
            A structure containing data about how a section should automatically scroll.
            </summary>
        </member>
        <member name="P:SMLimitless.Physics.SectionAutoscrollSettings.ScrollType">
            <summary>
            Gets a value indicating how the section automatically scrolls.
            </summary>
        </member>
        <member name="P:SMLimitless.Physics.SectionAutoscrollSettings.Speed">
            <summary>
            Gets a value indicating how fast the section automatically scrolls.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown in the getter and setter if this section is not automatically scrolling.</exception>
        </member>
        <member name="P:SMLimitless.Physics.SectionAutoscrollSettings.PathName">
            <summary>
            Gets the name of the path that this section is automatically scrolling along.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown in the getter and setter if this section is not automatically scrolling along a path.</exception>
        </member>
        <member name="M:SMLimitless.Physics.SectionAutoscrollSettings.#ctor(SMLimitless.Sprites.Collections.CameraScrollType,Microsoft.Xna.Framework.Vector2,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SMLimitless.Physics.SectionAutoscrollSettings"/> struct.
            </summary>
            <param name="scrollType">A value indicating how the section automatically scrolls.</param>
            <param name="speed">A value indicating how fast the section automatically scrolls.</param>
            <param name="pathName">The name of the path that this section is automatically scrolling along.</param>
        </member>
        <member name="T:SMLimitless.Extensions.ColorExtensions">
            <summary>
            Extends the Color structure.
            </summary>
        </member>
        <member name="M:SMLimitless.Extensions.ColorExtensions.FromPackedValue(System.UInt32)">
            <summary>
            Creates an RGBA color from a packed, unsigned 32-bit integer.
            </summary>
            <param name="packed">The packed, unsigned 32-bit integer.</param>
            <returns>The color extracted from the packed integer.</returns>
        </member>
        <member name="M:SMLimitless.Extensions.ColorExtensions.ToColor(Newtonsoft.Json.Linq.JToken)">
            <summary>
            Converts a JToken into a Color.
            </summary>
            <param name="jsonEntry">A JSON token containing four comma-delimited integers between 0 and 255.</param>
            <returns>A color extracted from the token.</returns>
        </member>
        <member name="M:SMLimitless.Extensions.ColorExtensions.Serialize(Microsoft.Xna.Framework.Color)">
            <summary>
            Serializes a color, producing a string usable by serializers/deserializers.
            </summary>
            <param name="value">The color to serialize.</param>
            <returns>A string in the format of "R, G, B, A".</returns>
        </member>
        <member name="T:SMLimitless.Extensions.DictionaryExtensions">
            <summary>
            Contains extensions methods for the <see cref="T:System.Collections.Generic.Dictionary`2"/> type.
            </summary>
        </member>
        <member name="M:SMLimitless.Extensions.DictionaryExtensions.RemoveAll``2(System.Collections.Generic.Dictionary{``0,``1},System.Func{``1,System.Boolean})">
            <summary>
            Removes all the keys and their values that match a predicate from a given dictionary.
            </summary>
            <typeparam name="TKey">The type of the dictionary's keys.</typeparam>
            <typeparam name="TValue">The type of the dictionary's values.</typeparam>
            <param name="dictionary">The dictionary from which to remove keys.</param>
            <param name="predicate">The predicate by which all keys are checked.</param>
        </member>
        <member name="T:SMLimitless.Extensions.EnumerableExtensions">
            <summary>
            Provides extensions for the enumerable classes and interfaces.
            </summary>
        </member>
        <member name="M:SMLimitless.Extensions.EnumerableExtensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Enumerates over every item in an enumerable and performs a given action on it.
            </summary>
            <typeparam name="T">The type of the items to enumerate over.</typeparam>
            <param name="items">The enumerable containing the items.</param>
            <param name="action">The action to perform on the items.</param>
        </member>
        <member name="M:SMLimitless.Extensions.EnumerableExtensions.EagerSeparate``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Eagerly separates an enumerable into lists of sublists when given a selector function.
            Each sublist contains all the items that have the same selector value.
            </summary>
            <typeparam name="T">The type of the items.</typeparam>
            <typeparam name="TSelector">The type of the selector function.</typeparam>
            <param name="items">A collection of items.</param>
            <param name="value">A selector function that is used to separate the enumerable.</param>
            <returns>A list of lists, each list containing all the items for which the selector function returned the same value.</returns>
        </member>
        <member name="T:SMLimitless.Extensions.EnumerationExtensions">
            <summary>
            Contains extension methods for certain enumerations.
            </summary>
        </member>
        <member name="M:SMLimitless.Extensions.EnumerationExtensions.GetHorizontalDirection(SMLimitless.Physics.RtSlopedSides)">
            <summary>
            Gets the horizontal direction for a <see cref="T:SMLimitless.Physics.RtSlopedSides"/> instance.
            </summary>
            <param name="slopedSides">The sloped sides to get the direction for.</param>
            <returns>Returns Left for TopLeft/BottomLeft and Right for TopRight/BottomRight.</returns>
        </member>
        <member name="M:SMLimitless.Extensions.EnumerationExtensions.IsOppositeDirection(SMLimitless.Physics.HorizontalDirection,SMLimitless.Physics.HorizontalDirection)">
            <summary>
            Determines if two directions are opposite.
            </summary>
            <param name="a">The first direction.</param>
            <param name="b">The second direction.</param>
            <returns>True if <paramref name="a"/> is in a different direction than <paramref name="b"/>.</returns>
            <remarks>If either parameter is <see cref="F:SMLimitless.Physics.HorizontalDirection.None"/>, the result is always False.</remarks>
        </member>
        <member name="T:SMLimitless.Extensions.GameTimeExtensions">
            <summary>
            Contains extension methods for the GameTime class.
            </summary>
        </member>
        <member name="M:SMLimitless.Extensions.GameTimeExtensions.GetElapsedSeconds(Microsoft.Xna.Framework.GameTime)">
            <summary>
            Returns the number of elapsed seconds since the last update.
            </summary>
            <param name="gameTime">The GameTime to use.</param>
            <returns>The number of elapsed seconds since the last update.</returns>
        </member>
        <member name="M:SMLimitless.Extensions.GameTimeExtensions.GetElapsedMilliseconds(Microsoft.Xna.Framework.GameTime)">
            <summary>
            Returns the number of elapsed milliseconds since the last update.
            </summary>
            <param name="gameTime">The GameTime to use.</param>
            <returns>The number of elapsed milliseconds since the last update.</returns>
        </member>
        <member name="T:SMLimitless.Extensions.ListExtensions">
            <summary>
            Extends the List{T} generic class.
            </summary>
        </member>
        <member name="M:SMLimitless.Extensions.ListExtensions.AddUnlessDuplicate``1(System.Collections.Generic.List{``0},``0)">
            <summary>
            Adds an item to the list if the list does not already contain the item.
            </summary>
            <typeparam name="T">The type of the List{T}.</typeparam>
            <param name="list">The List{T} to add to.</param>
            <param name="item">The item to add to the List{T}.</param>
        </member>
        <member name="T:SMLimitless.Extensions.NumericExtensions">
            <summary>
            Contains helper methods for numeric types.
            </summary>
        </member>
        <member name="M:SMLimitless.Extensions.NumericExtensions.RoundUp(System.Decimal)">
            <summary>
            Rounds a decimal up to the nearest integral value
            if the decimal has a fractional component. For
            example, 5.1 will be rounded to 6, and 7.9 will
            be rounded to 8.
            </summary>
            <param name="input">The decimal to round up.</param>
            <returns>The decimal rounded up to the nearest integer.</returns>
        </member>
        <member name="M:SMLimitless.Extensions.NumericExtensions.RoundDown(System.Decimal)">
            <summary>
            Rounds a decimal down to the nearest integral value.
            For example, 5.1 will be rounded to 5, and 7.9 will
            be rounded to 7.
            </summary>
            <param name="input">The decimal to round down.</param>
            <returns>The decimal rounded down to the nearest integer.</returns>
        </member>
        <member name="M:SMLimitless.Extensions.NumericExtensions.RoundNearest(System.Decimal)">
            <summary>
            Rounds a decimal to the nearest integral value.
            If the fractional component is 0.4 or less, the decimal
            will be rounded down (5.1 will be rounded to 5). If
            the fractional component is 0.5 or more, the decimal will
            be rounded up (7.9 will be rounded to 8).
            </summary>
            <param name="input">The decimal to round.</param>
            <returns>The rounded decimal.</returns>
        </member>
        <member name="M:SMLimitless.Extensions.NumericExtensions.Sign(System.Single)">
            <summary>
            Returns a number representing the sign of a given number.
            </summary>
            <param name="value">The value of which to get the sign.</param>
            <returns>1 for positive values, -1 for negative values, and 0 for zero.</returns>
        </member>
        <member name="M:SMLimitless.Extensions.NumericExtensions.Times(System.Int32,System.Action{System.Int32})">
            <summary>
            Performs a given action a certain number of times.
            Includes an iteration number variable.
            </summary>
            <param name="iterations">The number of times to perform the action.</param>
            <param name="action">The action to perform.</param>
            <remarks>Useful for replacing for loops for small actions.
            This method is zero-based - the first iteration is zero and the
            last iteration is (iterations - 1).</remarks>
        </member>
        <member name="M:SMLimitless.Extensions.NumericExtensions.CorrectPrecision(System.Single)">
            <summary>
            Corrects the value of a single-precision float to the nearest integral value if the float is very close to that value.
            </summary>
            <param name="value">The value to correct.</param>
            <returns>A whole-number corrected value, or the value if it was not close enough to the nearest integers.</returns>
        </member>
        <member name="M:SMLimitless.Extensions.NumericExtensions.BetweenInclusive(System.Single,System.Single,System.Single)">
            <summary>
            Determines if a number if between two other numbers, inclusive.
            </summary>
            <param name="x">The number to check.</param>
            <param name="a">The first number of the range.</param>
            <param name="b">The second number of the range.</param>
            <returns>True if x is between a and b, inclusive.</returns>
        </member>
        <member name="M:SMLimitless.Extensions.NumericExtensions.Clamp(System.Int32,System.Int32,System.Int32)">
            <summary>
            Given an integer and a range, returns the integer if it's in the range, or the minimum/maximum values if it's less/more, respectively.
            </summary>
            <param name="value">The integer.</param>
            <param name="min">The minimum of the range.</param>
            <param name="max">The maximum of the range.</param>
            <returns>An integer between <paramref name="min"/> and <paramref name="max"/>.</returns>
        </member>
        <member name="T:SMLimitless.Extensions.PointExtensions">
            <summary>
            Contains extension methods for the <see cref="T:Microsoft.Xna.Framework.Point"/> struct.
            </summary>
        </member>
        <member name="M:SMLimitless.Extensions.PointExtensions.SerializeCompact(System.Collections.Generic.IEnumerable{Microsoft.Xna.Framework.Point},System.Boolean)">
            <summary>
            Converts an enumerable containing <see cref="T:Microsoft.Xna.Framework.Point"/> instances into a <see cref="T:System.String"/>
            of form "x,y;x,y" with no trailing semicolon.
            </summary>
            <param name="points">An enumerable containing the points to be serialized.</param>
            <param name="sorted">A parameter that, if True, will sort the points by X value then Y value before serializing them.</param>
            <returns>A string containing the point values.</returns>
        </member>
        <member name="M:SMLimitless.Extensions.PointExtensions.DeserializeCompact(System.String)">
            <summary>
            Converts a <see cref="T:System.String"/> with the form "x,y;x,y" into a <see cref="T:System.Collections.Generic.List`1"/> of <see cref="T:Microsoft.Xna.Framework.Point"/> instances.
            </summary>
            <param name="pointsString">A string of points.</param>
            <returns>A list containing the points deserialized from the string.</returns>
            <remarks>Handles empty entries ("x,y;;x,y") and trailing semicolons.</remarks>
        </member>
        <member name="T:SMLimitless.Extensions.PositionableExtensions">
            <summary>
            Contains extension methods for types implementing the <see cref="T:SMLimitless.Interfaces.IPositionable2"/> interface.
            </summary>
        </member>
        <member name="M:SMLimitless.Extensions.PositionableExtensions.GetBoundsOfPositionables(System.Collections.Generic.IEnumerable{SMLimitless.Interfaces.IPositionable2})">
            <summary>
            Returns a rectangle that can contain all the given positionables in an enumerable.
            </summary>
            <param name="positionables">The enumerable containing the positionables.</param>
            <returns></returns>
        </member>
        <member name="T:SMLimitless.Extensions.RectangleExtensions">
            <summary>
            Extends the Rectangle struct.
            </summary>
        </member>
        <member name="M:SMLimitless.Extensions.RectangleExtensions.DrawOutline(Microsoft.Xna.Framework.Rectangle,Microsoft.Xna.Framework.Color)">
            <summary>
            Draws the outline of a rectangle.
            </summary>
            <param name="rect">The rectangle to draw.</param>
            <param name="color">The color of the outline.</param>
        </member>
        <member name="T:SMLimitless.Extensions.SpriteBatchExtensions">
            <summary>
            Extends the SpriteBatch class.
            </summary>
        </member>
        <member name="F:SMLimitless.Extensions.SpriteBatchExtensions.blank">
            <summary>
            A blank, 1x1 texture, used in drawing the primitives.
            </summary>
        </member>
        <member name="F:SMLimitless.Extensions.SpriteBatchExtensions.isInitialized">
            <summary>
            Set when the <see cref="M:SMLimitless.Extensions.SpriteBatchExtensions.Initialize(Microsoft.Xna.Framework.Graphics.SpriteBatch)"/> method is called.
            </summary>
        </member>
        <member name="M:SMLimitless.Extensions.SpriteBatchExtensions.Draw(Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Graphics.Texture2D,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Color,Microsoft.Xna.Framework.Graphics.SpriteEffects)">
            <summary>
            Draws a texture to the screen.
            </summary>
            <param name="spriteBatch">The SpriteBatch used to draw the texture.</param>
            <param name="texture">The texture to draw.</param>
            <param name="position">Where to draw the texture.</param>
            <param name="color">The color used to "shade" the texture. Use Color.White for no shading.</param>
            <param name="effects">How the texture is mirrored.</param>
        </member>
        <member name="M:SMLimitless.Extensions.SpriteBatchExtensions.DrawRectangle(Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Rectangle)">
            <summary>
            Draws a rectangle.
            </summary>
            <param name="spriteBatch">The SpriteBatch used to draw the rectangle.</param>
            <param name="rectangle">The bounds to draw the rectangle within.</param>
        </member>
        <member name="M:SMLimitless.Extensions.SpriteBatchExtensions.DrawRectangle(Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Rectangle,Microsoft.Xna.Framework.Color)">
            <summary>
            Draws a colored rectangle.
            </summary>
            <param name="spriteBatch">The SpriteBatch used to draw the rectangle.</param>
            <param name="rectangle">The bounds to draw the rectangle within.</param>
            <param name="color">The color of the rectangle.</param>
        </member>
        <member name="M:SMLimitless.Extensions.SpriteBatchExtensions.DrawRectangle(Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Color)">
            <summary>
            Draws a colored rectangle using vectors.
            </summary>
            <param name="spriteBatch">The SpriteBatch used to draw the rectangle.</param>
            <param name="start">The top-left corner of the rectangle.</param>
            <param name="end">The size of the rectangle.</param>
            <param name="color">The color of the rectangle.</param>
        </member>
        <member name="M:SMLimitless.Extensions.SpriteBatchExtensions.DrawRectangle(Microsoft.Xna.Framework.Graphics.SpriteBatch,System.Int32,System.Int32,System.Int32,System.Int32,Microsoft.Xna.Framework.Color)">
            <summary>
            Draws a colored rectangle using integers for positioning.
            </summary>
            <param name="spriteBatch">The SpriteBatch used to draw the rectangle.</param>
            <param name="x">The X position of the rectangle.</param>
            <param name="y">The Y position of the rectangle.</param>
            <param name="width">The width in pixels of the rectangle.</param>
            <param name="height">The height in pixels of the rectangle.</param>
            <param name="color">The color of the rectangle.</param>
        </member>
        <member name="M:SMLimitless.Extensions.SpriteBatchExtensions.DrawRectangleEdges(Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Color)">
            <summary>
            Draws an outline of a rectangle.
            </summary>
            <param name="batch">The SpriteBatch used to draw the rectangle outline.</param>
            <param name="position">The position of the rectangle outline.</param>
            <param name="size">The size of the rectangle outline.</param>
            <param name="color">The color of the rectangle outline.</param>
        </member>
        <member name="M:SMLimitless.Extensions.SpriteBatchExtensions.DrawRectangleEdges(Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Rectangle,Microsoft.Xna.Framework.Color)">
            <summary>
            Draws an outline of a rectangle.
            </summary>
            <param name="batch">The SpriteBatch used to draw this rectangle outline.</param>
            <param name="rect">The bounds of the rectangle outline.</param>
            <param name="color">The color of the rectangle outline.</param>
        </member>
        <member name="M:SMLimitless.Extensions.SpriteBatchExtensions.DrawLine(Microsoft.Xna.Framework.Graphics.SpriteBatch,System.Single,Microsoft.Xna.Framework.Color,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
            <summary>
            Draws a line between two points with a custom width and color.
            </summary>
            <param name="batch">The SpriteBatch used to draw the line.</param>
            <param name="width">The width, in pixels, of the line.</param>
            <param name="color">The color of the line.</param>
            <param name="point1">The point where the line starts.</param>
            <param name="point2">The point where the line ends.</param>
        </member>
        <member name="M:SMLimitless.Extensions.SpriteBatchExtensions.Initialize(Microsoft.Xna.Framework.Graphics.SpriteBatch)">
            <summary>
            Initializes the blank texture.
            </summary>
            <param name="spriteBatch">The SpriteBatch used to initialize.</param>
        </member>
        <member name="T:SMLimitless.Extensions.StringExtensions">
            <summary>
            Contains extension methods for the String class.
            </summary>
        </member>
        <member name="M:SMLimitless.Extensions.StringExtensions.Substring(System.String,System.Int32,System.Int32)">
            <summary>
            Returns a substring between two indexes.
            </summary>
            <param name="str">The string from which to extract the substring.</param>
            <param name="startIndex">The starting index of the substring in the string.</param>
            <param name="endIndex">The ending index of the substring in the string.</param>
            <returns>The extracted substring.</returns>
        </member>
        <member name="M:SMLimitless.Extensions.StringExtensions.RemoveComments(System.Collections.Generic.List{System.String})">
            <summary>
            Removes INI comments from INI-styled string arrays.
            A comment begins with a semicolon (;), and can start
            a line or be inline.
            </summary>
            <param name="input">A list of strings (e.g. a file) from which to extract comments.</param>
            <returns>The list of strings, minus the comments.</returns>
        </member>
        <member name="M:SMLimitless.Extensions.StringExtensions.RemoveComments(System.String[])">
            <summary>
            Removes INI comments from INI-styled string arrays.
            A comment begins with a semicolon (;), and can start
            a line or be inline.
            </summary>
            <param name="input">A string array (e.g. a file) to remove comments from.</param>
            <returns>The string array, minus the comments.</returns>
        </member>
        <member name="M:SMLimitless.Extensions.StringExtensions.TrimStringArray(System.String[])">
            <summary>
            Trims evert string in a string array.
            </summary>
            <param name="input">The string array containing the strings to trim.</param>
            <returns>A string array containing the trimmed strings.</returns>
        </member>
        <member name="M:SMLimitless.Extensions.StringExtensions.DrawString(System.String,Microsoft.Xna.Framework.Vector2,System.Single)">
            <summary>
            Draws a string to the screen.
            </summary>
            <param name="value">The string to draw.</param>
            <param name="position">The position on the screen to draw it at.</param>
            <param name="scale">Optional, default is 1. The size of the text to draw.</param>
        </member>
        <member name="M:SMLimitless.Extensions.StringExtensions.DrawStringDefault(System.String)">
            <summary>
            Draws a string in the color white to the screen at the position of (16, 16) using the default font.
            </summary>
            <param name="value">The string to draw.</param>
        </member>
        <member name="M:SMLimitless.Extensions.StringExtensions.SafeCopy(System.String)">
            <summary>
            Creates a deep copy of a given string or null if the string is null.
            </summary>
            <param name="value">The string to copy.</param>
            <returns>A deep copy of the string, or null if the string is null.</returns>
        </member>
        <member name="T:SMLimitless.Extensions.Texture2DExtensions">
            <summary>
            Extends the Texture2D class.
            </summary>
        </member>
        <member name="M:SMLimitless.Extensions.Texture2DExtensions.ToImage(Microsoft.Xna.Framework.Graphics.Texture2D)">
            <summary>
            Converts a Texture2D into a System.Drawing.Image.
            </summary>
            <param name="texture">The texture to convert.</param>
            <returns>A System.Drawing.Image containing the texture's pixels.</returns>
        </member>
        <member name="T:SMLimitless.Extensions.TypeExtensions">
            <summary>
            Contains extension methods for the Type class.
            </summary>
        </member>
        <member name="M:SMLimitless.Extensions.TypeExtensions.InheritsFrom(System.Type,System.Type)">
            <summary>
            Determines if one given type inherits from another.
            </summary>
            <param name="a">The presumed derived type.</param>
            <param name="b">The presumed base type.</param>
            <returns>True if the derived type inherits from the base type.</returns>
        </member>
        <member name="M:SMLimitless.Extensions.TypeExtensions.IsSprite(System.Type)">
            <summary>
            Determines if a given type is a sprite.
            </summary>
            <param name="type">The type to check.</param>
            <returns>True if the type is a sprite.</returns>
        </member>
        <member name="M:SMLimitless.Extensions.TypeExtensions.IsTile(System.Type)">
            <summary>
            Determines if a given type is a tile.
            </summary>
            <param name="type">The type to check.</param>
            <returns>True if the type is a tile.</returns>
        </member>
        <member name="M:SMLimitless.Extensions.TypeExtensions.IsScreen(System.Type)">
            <summary>
            Determines if a given type is a screen.
            </summary>
            <param name="type">The type to check.</param>
            <returns>True if the type is a screen.</returns>
        </member>
        <member name="M:SMLimitless.Extensions.TypeExtensions.IsStatic(System.Type)">
            <summary>
            Determines if a given type is static.
            </summary>
            <param name="type">The type to check.</param>
            <returns>True if the type is static, false if it is not.</returns>
        </member>
        <member name="T:SMLimitless.Extensions.Vector2Extensions">
            <summary>
            Contains extension methods for the Vector2 structure.
            </summary>
        </member>
        <member name="M:SMLimitless.Extensions.Vector2Extensions.Abs(Microsoft.Xna.Framework.Vector2)">
            <summary>
            Returns a vector with the absolute values of the components.
            </summary>
            <param name="vector">The vector to get the absolute value of.</param>
            <returns>A vector with the absolute values of the components.</returns>
        </member>
        <member name="M:SMLimitless.Extensions.Vector2Extensions.DeserializeCompact(System.String)">
            <summary>
            Converts a string containing compact vectors into a list vectors.
            </summary>
            <param name="value">The string containing the compact vectors.</param>
            <returns>A list of vectors.</returns>
        </member>
        <member name="M:SMLimitless.Extensions.Vector2Extensions.GetDistance(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
            <summary>
            Gets the linear distance between any two points.
            </summary>
            <param name="a">The first point.</param>
            <param name="b">The second point.</param>
            <returns>The linear distance between any two points.</returns>
        </member>
        <member name="M:SMLimitless.Extensions.Vector2Extensions.Floor(Microsoft.Xna.Framework.Vector2)">
            <summary>
            Floors both components of a Vector2.
            </summary>
            <param name="vector">The vector to floor.</param>
            <returns>The floored vector.</returns>
        </member>
        <member name="M:SMLimitless.Extensions.Vector2Extensions.FloorDivide(Microsoft.Xna.Framework.Vector2,System.Single)">
            <summary>
            Floors and Vector2 and divides the result.
            </summary>
            <param name="vector">The original vector to floor and divide.</param>
            <param name="divisor">The number by which to divide the floored vector by.</param>
            <returns>A vector with both components floored and divided by the divisor.</returns>
        </member>
        <member name="M:SMLimitless.Extensions.Vector2Extensions.FloorDivide(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
            <summary>
            Floors and Vector2 and divides the result by another vector.
            </summary>
            <param name="vector">The original vector to floor and divide.</param>
            <param name="divisor">The vector by which to divide the floored vector by.</param>
            <returns>A vector with both components floored and divided by the components in the divisor.</returns>
        </member>
        <member name="M:SMLimitless.Extensions.Vector2Extensions.FromString(System.String)">
            <summary>
            Converts a string, formatted as "x,y", into a Vector2.
            </summary>
            <param name="value">The string from which to convert.</param>
            <returns>A Vector2 containing the values of the string.</returns>
        </member>
        <member name="M:SMLimitless.Extensions.Vector2Extensions.GetAngleBetweenVectors(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
            <summary>
            Gets the angle between two given vectors.
            </summary>
            <param name="a">The first vector.</param>
            <param name="b">The second vector.</param>
            <returns>The angle between the vectors.</returns>
        </member>
        <member name="M:SMLimitless.Extensions.Vector2Extensions.GetIntersectionDirection(Microsoft.Xna.Framework.Vector2)">
            <summary>
            Given a <see cref="T:Microsoft.Xna.Framework.Vector2"/> instance, returns a flagged <see cref="T:SMLimitless.Physics.FlaggedDirection"/> value indicating the direction of each component.
            </summary>
            <param name="intersect">The vector to get the directions of.</param>
            <returns>A <see cref="T:SMLimitless.Physics.FlaggedDirection"/> instance. "Left" is set for X &lt; 0, "Right" is set for X &gt; 0, "Up" is set for Y &lt; 0, "Down" is set for Y &gt; 0, "None" is set for X = Y = 0.</returns>
        </member>
        <member name="M:SMLimitless.Extensions.Vector2Extensions.GetResolutionDirection(Microsoft.Xna.Framework.Vector2)">
            <summary>
            Given a resolution distance, gets the direction of the resolution.
            </summary>
            <param name="intersect">A <see cref="T:Microsoft.Xna.Framework.Vector2"/> instance with at least one component equal to zero.</param>
            <returns>The direction in which a resolution occurs, or Direction.None if both components of <paramref name="intersect"/> are zero.</returns>
            <exception cref="T:System.ArgumentException">Thrown if neither component of <paramref name="intersect"/> are zero.</exception>
        </member>
        <member name="M:SMLimitless.Extensions.Vector2Extensions.GreaterThan(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
            <summary>
            Compares the components of one vector to another.
            </summary>
            <param name="left">The first vector.</param>
            <param name="right">The second vector.</param>
            <returns>True if left is greater than right, false if otherwise.</returns>
        </member>
        <member name="M:SMLimitless.Extensions.Vector2Extensions.GreaterThan(Microsoft.Xna.Framework.Vector2,System.Single)">
            <summary>
            Does a greater-than comparison on both components of two <see cref="T:Microsoft.Xna.Framework.Vector2"/> instances.
            </summary>
            <param name="left">The first vector to compare.</param>
            <param name="right">The second vector to compare.</param>
            <returns>True if both components of <paramref name="left"/> are greater than their corresponding components in <paramref name="right"/>.</returns>
        </member>
        <member name="M:SMLimitless.Extensions.Vector2Extensions.GreaterThanOrEqualTo(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
            <summary>
            Compares the components of one vector to another.
            </summary>
            <param name="left">The first vector.</param>
            <param name="right">The second vector.</param>
            <returns>True if left is greater than or equal to right, false if otherwise.</returns>
        </member>
        <member name="M:SMLimitless.Extensions.Vector2Extensions.GreaterThanOrEqualTo(Microsoft.Xna.Framework.Vector2,System.Single)">
            <summary>
            Determines if both components of one vector are greater than or equal to both components of another vector.
            </summary>
            <param name="left">The first vector to compare.</param>
            <param name="right">The second vector to compare.</param>
            <returns>True if both components of <paramref name="left"/> are greater than or equal to both components of <paramref name="right"/>.</returns>
        </member>
        <member name="M:SMLimitless.Extensions.Vector2Extensions.GreatestVectorByX(System.Collections.Generic.IEnumerable{Microsoft.Xna.Framework.Vector2})">
            <summary>
            Returns a vector with the largest X component, given a collection of vectors.
            </summary>
            <param name="vectors">A collection of vectors.</param>
            <returns>The vector with the largest X component.</returns>
        </member>
        <member name="M:SMLimitless.Extensions.Vector2Extensions.GreatestVectorByY(System.Collections.Generic.IEnumerable{Microsoft.Xna.Framework.Vector2})">
            <summary>
            Returns a vector with the largest Y component, given a collection of vectors.
            </summary>
            <param name="vectors">A collection of vectors.</param>
            <returns>The vector with the largest Y component.</returns>
        </member>
        <member name="M:SMLimitless.Extensions.Vector2Extensions.IsNaN(Microsoft.Xna.Framework.Vector2)">
            <summary>
            Checks if one or both of the components of a Vector2 are equal to Single.NaN.
            </summary>
            <param name="vector">The Vector2 to check.</param>
            <returns>True if one or both of the components equal Single.NaN, false if neither do.</returns>
        </member>
        <member name="M:SMLimitless.Extensions.Vector2Extensions.LeastVectorByX(System.Collections.Generic.IEnumerable{Microsoft.Xna.Framework.Vector2})">
            <summary>
            Returns the vector with the lowest X component, given a collection of vectors.
            </summary>
            <param name="vectors">A collection of vectors.</param>
            <returns>The vector with the lowest X component.</returns>
        </member>
        <member name="M:SMLimitless.Extensions.Vector2Extensions.LeastVectorByY(System.Collections.Generic.IEnumerable{Microsoft.Xna.Framework.Vector2})">
            <summary>
            Returns the vector with the lowest Y component, given a collection of vectors.
            </summary>
            <param name="vectors">The collection of vectors.</param>
            <returns>The vector with the lowest Y component.</returns>
        </member>
        <member name="M:SMLimitless.Extensions.Vector2Extensions.LessThan(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
            <summary>
            Compares the components of one vector to another.
            </summary>
            <param name="left">The first vector.</param>
            <param name="right">The second vector.</param>
            <returns>True if left is less than right, false if otherwise.</returns>
        </member>
        <member name="M:SMLimitless.Extensions.Vector2Extensions.LessThanOrEqualTo(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
            <summary>
            Compares the components of one vector to another.
            </summary>
            <param name="left">The first vector.</param>
            <param name="right">The second vector.</param>
            <returns>True if left is less than or equal to right, false if otherwise.</returns>
        </member>
        <member name="M:SMLimitless.Extensions.Vector2Extensions.Mod(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
            <summary>
            Divides the components of a vector by another, and returns the remainder.
            </summary>
            <param name="a">The divisor vector.</param>
            <param name="b">The dividend vector.</param>
            <returns>The remainder of the quotient.</returns>
        </member>
        <member name="M:SMLimitless.Extensions.Vector2Extensions.Move(Microsoft.Xna.Framework.Vector2,SMLimitless.Direction,System.Single)">
            <summary>
            Returns a vector from a given vector moved by a given distance in a given cardinal direction.
            </summary>
            <param name="vector">The original vector.</param>
            <param name="direction">The direction in which the return vector is moved.</param>
            <param name="distance">The distance by which to move the return vector.</param>
            <returns>A vector moved by the given distance in the given direction.</returns>
        </member>
        <member name="M:SMLimitless.Extensions.Vector2Extensions.Parse(System.String)">
            <summary>
            Parses a string containing a vector value formatted "x,y".
            </summary>
            <param name="input">The string, containing only a vector formatted "x,y", to parse.</param>
            <returns>The parsed vector.</returns>
        </member>
        <member name="M:SMLimitless.Extensions.Vector2Extensions.Serialize(Microsoft.Xna.Framework.Vector2)">
            <summary>
            Produces a string representation of this vector usable for serializers and deserializers.
            </summary>
            <param name="value">The vector to serialize.</param>
            <returns>A string in the format of "X, Y".</returns>
        </member>
        <member name="M:SMLimitless.Extensions.Vector2Extensions.Serialize(System.Collections.Generic.List{Microsoft.Xna.Framework.Vector2})">
            <summary>
            Produces a list of strings containing serialized forms of a list of vectors.
            </summary>
            <param name="value">The vectors to serialize.</param>
            <returns>A list of strings in the format of "X, Y".</returns>
        </member>
        <member name="M:SMLimitless.Extensions.Vector2Extensions.Serialize(Microsoft.Xna.Framework.Point)">
            <summary>
            Returns a string representation of a point suitable for JSON serialization.
            </summary>
            <param name="value">The point to serialize.</param>
            <returns>A string in the format "{x}, {y}".</returns>
        </member>
        <member name="M:SMLimitless.Extensions.Vector2Extensions.SerializeCompact(System.Collections.Generic.List{Microsoft.Xna.Framework.Vector2})">
            <summary>
            Converts a list of vectors into a string in which values are compact.
            </summary>
            <param name="values">The values to convert.</param>
            <returns>A string containing all values of the list expressed in "x,y" form.</returns>
        </member>
        <member name="M:SMLimitless.Extensions.Vector2Extensions.ToPoint(Microsoft.Xna.Framework.Vector2)">
            <summary>
            Converts a <see cref="T:Microsoft.Xna.Framework.Vector2"/> instance to a <see cref="T:Microsoft.Xna.Framework.Point"/> instance.
            </summary>
            <param name="vector">The <see cref="T:Microsoft.Xna.Framework.Vector2"/> to convert to a <see cref="T:Microsoft.Xna.Framework.Point"/>.</param>
            <returns>A point with components equal to the integral portion of each vector component.</returns>
        </member>
        <member name="M:SMLimitless.Extensions.Vector2Extensions.ToRectangle(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
            <summary>
            Converts this Vector2 and another Vector2 into a rectangle.
            </summary>
            <param name="position">The Vector2 that will become the X and Y components of the rectangle.</param>
            <param name="size">The Vector2 that will become the Width and Height components of the rectangle.</param>
            <returns>A rectangle constructed from the two vectors.</returns>
            <remarks>As the Rectangle type uses integers for components, any fractional component will be lost.</remarks>
        </member>
        <member name="M:SMLimitless.Extensions.Vector2Extensions.ToVector2(Newtonsoft.Json.Linq.JToken)">
            <summary>
            Converts a JToken value into a Vector2.
            </summary>
            <param name="jsonEntry">A JSON token containing two comma-delimited numbers.</param>
            <returns>A Vector2 converted from the token.</returns>
        </member>
        <member name="T:SMLimitless.Forms.CollisionDebuggerForm">
            <summary>
            A form that displays information about collision detection and resolution.
            </summary>
        </member>
        <member name="P:SMLimitless.Forms.CollisionDebuggerForm.TimeScale">
            <summary>
            Gets a value indicating the time scale applied to physics and collision.
            </summary>
        </member>
        <member name="M:SMLimitless.Forms.CollisionDebuggerForm.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SMLimitless.Forms.CollisionDebuggerForm"/> class.
            </summary>
        </member>
        <member name="M:SMLimitless.Forms.CollisionDebuggerForm.Update(System.Int32,System.Boolean,Microsoft.Xna.Framework.Vector2)">
            <summary>
            Updates the <see cref="F:SMLimitless.Forms.CollisionDebuggerForm.TextCollisionInfo"/> textbox.
            </summary>
            <param name="numberOfCollidingTiles">The number of tiles the selected sprite has collided with this frame.</param>
            <param name="slopeCollisionOccurred">A parameter indicating whether a collision between the selected sprite and the sloped side of a sloped tile occurred.</param>
            <param name="totalOffset">The total distance the selected sprite was moved through collision resolutions.</param>
        </member>
        <member name="M:SMLimitless.Forms.CollisionDebuggerForm.SetTileInfo(SMLimitless.Sprites.Tile)">
            <summary>
            Sets the <see cref="F:SMLimitless.Forms.CollisionDebuggerForm.TextTileInfo"/> textbox.
            </summary>
            <param name="tile">The tile whose information to use.</param>
        </member>
        <member name="F:SMLimitless.Forms.CollisionDebuggerForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:SMLimitless.Forms.CollisionDebuggerForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:SMLimitless.Forms.CollisionDebuggerForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:SMLimitless.Forms.PhysicsSettingsEditorForm">
            <summary>
            A form which contains sliders to adjust various physics properties of objects.
            </summary>
        </member>
        <member name="M:SMLimitless.Forms.PhysicsSettingsEditorForm.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SMLimitless.Forms.PhysicsSettingsEditorForm"/> class.
            </summary>
        </member>
        <member name="M:SMLimitless.Forms.PhysicsSettingsEditorForm.AddSetting``1(SMLimitless.Physics.PhysicsSetting{``0})">
            <summary>
            Adds a new setting to the <see cref="T:SMLimitless.Forms.PhysicsSettingsEditorForm"/>.
            </summary>
            <typeparam name="T">The type of the setting.</typeparam>
            <param name="setting">The setting to add.</param>
        </member>
        <member name="M:SMLimitless.Forms.PhysicsSettingsEditorForm.AddSetting(SMLimitless.Physics.PhysicsSetting{System.Int32})">
            <summary>
            Adds an integer setting.
            </summary>
            <param name="setting">The setting to add.</param>
        </member>
        <member name="M:SMLimitless.Forms.PhysicsSettingsEditorForm.AddSetting(SMLimitless.Physics.PhysicsSetting{System.Single})">
            <summary>
            Adds a floating point setting.
            </summary>
            <param name="setting">The setting to add.</param>
            <remarks>The track bar used to set the value is gradated by a multiple of the <see cref="F:SMLimitless.Forms.PhysicsSettingsEditorForm.FloatingScaleFactor"/> constant.</remarks>
        </member>
        <member name="F:SMLimitless.Forms.PhysicsSettingsEditorForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:SMLimitless.Forms.PhysicsSettingsEditorForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:SMLimitless.Forms.PhysicsSettingsEditorForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:SMLimitless.GameServices">
            <summary>
            Provides global access to game services.
            </summary>
        </member>
        <member name="P:SMLimitless.GameServices.Container">
            <summary>
            Gets the GameServicesContainer that stores references to the services added.
            </summary>
        </member>
        <member name="P:SMLimitless.GameServices.Graphics">
            <summary>
            Gets a reference to the GraphicsDevice.
            </summary>
        </member>
        <member name="P:SMLimitless.GameServices.SpriteBatch">
            <summary>
            Gets a reference to the SpriteBatch.
            </summary>
        </member>
        <member name="P:SMLimitless.GameServices.GameTime">
            <summary>
            Gets a reference to the GameTime instance.
            </summary>
        </member>
        <member name="P:SMLimitless.GameServices.Camera">
            <summary>
            Gets or sets the current camera.
            </summary>
        </member>
        <member name="P:SMLimitless.GameServices.Effects">
            <summary>
            Gets or sets a dictionary containing <see cref="P:SMLimitless.GameServices.Effects"/> instances and their names.
            </summary>
        </member>
        <member name="P:SMLimitless.GameServices.ScreenSize">
            <summary>
            Gets or sets the size of the window in pixels.
            </summary>
        </member>
        <member name="P:SMLimitless.GameServices.DebugFont">
            <summary>
            Gets a bitmap font used for drawing debug text to screen.
            </summary>
        </member>
        <member name="P:SMLimitless.GameServices.DebugForm">
            <summary>
            Gets a debug form used for printing log messages and receiving debug commands.
            </summary>
        </member>
        <member name="P:SMLimitless.GameServices.PhysicsSettingsEditorForm">
            <summary>
            Gets a form used to edit global physics settings for game objects.
            </summary>
        </member>
        <member name="P:SMLimitless.GameServices.QuadTreeCellSize">
            <summary>
            Gets the size, in pixels, of a QuadTree cell.
            </summary>
        </member>
        <member name="P:SMLimitless.GameServices.GameObjectSize">
            <summary>
            Gets the standard size for a game object (tile/sprite/etc). Subject to change.
            </summary>
        </member>
        <member name="P:SMLimitless.GameServices.CollisionDebuggerActive">
            <summary>
            Gets or sets a value indicating whether the collision debugger is active.
            </summary>
        </member>
        <member name="P:SMLimitless.GameServices.CollisionDebuggerForm">
            <summary>
            Gets or sets the current <see cref="T:SMLimitless.Forms.CollisionDebuggerForm"/> instance.
            </summary>
        </member>
        <member name="M:SMLimitless.GameServices.InitializeServices(Microsoft.Xna.Framework.Graphics.GraphicsDevice,Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Content.ContentManager)">
            <summary>
            Initializes the services container with key game services.
            </summary>
            <param name="graphicsDevice">The GraphicsDevice to add to the container.</param>
            <param name="spriteBatch">The SpriteBatch to add to the container.</param>
            <param name="content">The ContentManager to add to the container.</param>
        </member>
        <member name="M:SMLimitless.GameServices.InitializeFont(System.String)">
            <summary>
            Initializes the debug font.
            </summary>
            <param name="contentResourceName">The name of the font's content resource.</param>
        </member>
        <member name="M:SMLimitless.GameServices.GetService``1">
            <summary>
            Returns a game service.
            </summary>
            <typeparam name="T">The type of game service to retrieve.</typeparam>
            <returns>A game service of the specified type.</returns>
        </member>
        <member name="M:SMLimitless.GameServices.AddService``1(``0)">
            <summary>
            Adds a service to the container.
            </summary>
            <typeparam name="T">The type of the service to add.</typeparam>
            <param name="service">The service to add.</param>
        </member>
        <member name="M:SMLimitless.GameServices.RemoveService``1">
            <summary>
            Removes a service from the container.
            </summary>
            <typeparam name="T">The type of the service to remove.</typeparam>
        </member>
        <member name="M:SMLimitless.GameServices.DrawStringDefault(System.String)">
            <summary>
            Draws a given string using the debug font at {X: 16, Y:16} at double scale.
            </summary>
            <param name="text">The text to draw.</param>
        </member>
        <member name="T:SMLimitless.GameSettings">
            <summary>
            Provides access to game settings.
            </summary>
        </member>
        <member name="F:SMLimitless.GameSettings.settingsReader">
            <summary>
            A DataReader containing the game's settings file.
            </summary>
        </member>
        <member name="M:SMLimitless.GameSettings.Initialize">
            <summary>
            Initializes this class and loads the settings file.
            </summary>
        </member>
        <member name="M:SMLimitless.GameSettings.GetSection(System.String)">
            <summary>
            Returns a section of the settings file.
            </summary>
            <param name="sectionName">The name of the section, optionally encased in square brackets.</param>
            <returns>A Dictionary{string, string} containing the keys and their values.</returns>
        </member>
        <member name="T:SMLimitless.Graphics.AnimatedGraphicsObject">
            <summary>
            A graphics object with multiple textures that are drawn in sequence.
            </summary>
        </member>
        <member name="F:SMLimitless.Graphics.AnimatedGraphicsObject.FrameLengthInMilliseconds">
            <summary>
            A constant field equaling 16.67.
            </summary>
        </member>
        <member name="F:SMLimitless.Graphics.AnimatedGraphicsObject.isLoaded">
            <summary>
            Set when the Load method is called successfully.
            </summary>
        </member>
        <member name="F:SMLimitless.Graphics.AnimatedGraphicsObject.isContentLoaded">
            <summary>
            Set when the LoadContent method is called successfully.
            </summary>
        </member>
        <member name="F:SMLimitless.Graphics.AnimatedGraphicsObject.filePath">
            <summary>
            A field containing the path to the image that
            this object was loaded from.
            </summary>
        </member>
        <member name="F:SMLimitless.Graphics.AnimatedGraphicsObject.configFilePath">
            <summary>
            A field containing the path to the configuration
            file that this object was loaded from.
            </summary>
        </member>
        <member name="F:SMLimitless.Graphics.AnimatedGraphicsObject.textures">
            <summary>
            The textures of this object.
            </summary>
        </member>
        <member name="F:SMLimitless.Graphics.AnimatedGraphicsObject.frameCount">
            <summary>
            The zero-based number of textures in this object.
            Set to -1 until the object is loaded.
            </summary>
        </member>
        <member name="F:SMLimitless.Graphics.AnimatedGraphicsObject.renderedFramesElapsed">
            <summary>
            How many rendered frames have been drawn since the last texture change.
            </summary>
        </member>
        <member name="F:SMLimitless.Graphics.AnimatedGraphicsObject.frameIndex">
            <summary>
            The index of the current texture.
            </summary>
        </member>
        <member name="F:SMLimitless.Graphics.AnimatedGraphicsObject.frameWidth">
            <summary>
            The width of each texture, measured in pixels.
            </summary>
        </member>
        <member name="F:SMLimitless.Graphics.AnimatedGraphicsObject.cgoOwner">
            <summary>
            The ComplexGraphicsObject that owns this object.
            </summary>
        </member>
        <member name="F:SMLimitless.Graphics.AnimatedGraphicsObject.animationCycleLength">
            <summary>
            The field containing the animation cycle length.
            </summary>
        </member>
        <member name="P:SMLimitless.Graphics.AnimatedGraphicsObject.IsRunning">
            <summary>
            Gets or sets a value indicating whether the object runs through the textures.
            </summary>
        </member>
        <member name="P:SMLimitless.Graphics.AnimatedGraphicsObject.IsRunOnce">
            <summary>
            Gets a value indicating whether this object will run once.
            Run-once objects will cycle through their textures once,
            and then continuously draw the last texture until the
            Reset method is called.
            </summary>
        </member>
        <member name="P:SMLimitless.Graphics.AnimatedGraphicsObject.AnimationCycleLength">
            <summary>
            Gets or sets the time, measured in seconds, for the animation to play through all the frames.
            </summary>
        </member>
        <member name="P:SMLimitless.Graphics.AnimatedGraphicsObject.CgoSourceRects">
            <summary>
            Gets or sets the list of source rectangles of the textures of this object from the complex graphic texture.
            This field is required by ComplexGraphicsObjects and not to be used otherwise.
            </summary>
        </member>
        <member name="P:SMLimitless.Graphics.AnimatedGraphicsObject.FrameTime">
            <summary>
            Gets the frame time, which is the number of rendered frames that
            each texture is drawn for.
            </summary>
        </member>
        <member name="M:SMLimitless.Graphics.AnimatedGraphicsObject.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SMLimitless.Graphics.AnimatedGraphicsObject"/> class.
            </summary>
        </member>
        <member name="M:SMLimitless.Graphics.AnimatedGraphicsObject.Load(System.String)">
            <summary>
            Loads this AnimatedGraphicsObject from the specified file path.
            This overload is only included to fulfill the IGraphicsObject contract.
            Don't call it.
            </summary>
            <param name="filePath">The file path to the image to use.</param>
        </member>
        <member name="M:SMLimitless.Graphics.AnimatedGraphicsObject.Load(System.String,SMLimitless.IO.DataReader)">
            <summary>
            Loads an instance of an AnimatedGraphicsObject.
            </summary>
            <param name="filePath">The file path to the image to use.</param>
            <param name="config">A DataReader containing the configuration for this file.</param>
        </member>
        <member name="M:SMLimitless.Graphics.AnimatedGraphicsObject.LoadContent">
            <summary>
            Loads the content for this AnimatedGraphicsObject.
            </summary>
        </member>
        <member name="M:SMLimitless.Graphics.AnimatedGraphicsObject.GetEditorGraphics">
            <summary>
            Gets the graphics for this object to be displayed on editor buttons.
            </summary>
            <returns>A <see cref="T:Microsoft.Xna.Framework.Graphics.Texture2D"/> instance of the first frame of the object.</returns>
        </member>
        <member name="M:SMLimitless.Graphics.AnimatedGraphicsObject.Update">
            <summary>
            Updates this AnimatedGraphicsObject.
            </summary>
        </member>
        <member name="M:SMLimitless.Graphics.AnimatedGraphicsObject.Draw(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Color)">
            <summary>
            Draws this AnimatedGraphicsObject to the screen.
            </summary>
            <param name="position">The position to draw this object at.</param>
            <param name="color">The color to shade this object. Use Color.White for no shading.</param>
        </member>
        <member name="M:SMLimitless.Graphics.AnimatedGraphicsObject.Draw(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Color,Microsoft.Xna.Framework.Graphics.SpriteEffects)">
            <summary>
            Draws this AnimatedGraphicsObject to the screen.
            </summary>
            <param name="position">The position to draw this object at.</param>
            <param name="color">The color to shade this object. Use Color.White for no shading.</param>
            <param name="spriteEffects">How to mirror this object.</param>
        </member>
        <member name="M:SMLimitless.Graphics.AnimatedGraphicsObject.Draw(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Color,System.Boolean)">
            <summary>
            Draws this AnimatedGraphicsObject to the screen.
            </summary>
            <param name="position">The position to draw this object at.</param>
            <param name="color">The color to shade this object. Use Color.White for no shading.</param>
            <param name="debug">If true, the frame index will be drawn in the top-left corner of the sprite.</param>
        </member>
        <member name="M:SMLimitless.Graphics.AnimatedGraphicsObject.Draw(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Color,Microsoft.Xna.Framework.Graphics.SpriteEffects,System.Boolean)">
            <summary>
            Draws this AnimatedGraphicsObject to the screen.
            </summary>
            <param name="position">The position to draw this object at.</param>
            <param name="color">The color to shade this object. Use Color.White for no shading.</param>
            <param name="spriteEffects">How to mirror this object.</param>
            /// <param name="debug">If true, the frame index will be drawn in the top-left corner of the sprite.</param>
        </member>
        <member name="M:SMLimitless.Graphics.AnimatedGraphicsObject.SetSpeed(System.Decimal)">
            <summary>
            Adjusts the time it takes for this animated object
            to complete one loop through its frames.
            </summary>
            <param name="newCycleLength">The time, in seconds, each loop takes.</param>
        </member>
        <member name="M:SMLimitless.Graphics.AnimatedGraphicsObject.SetSpeed(System.Int32)">
            <summary>
            Adjusts how many rendered frames each
            frame of this object is shown for.
            </summary>
            <param name="newFrameTime">How many rendered frames each frame is shown for.</param>
        </member>
        <member name="M:SMLimitless.Graphics.AnimatedGraphicsObject.AdjustSpeed(System.Single)">
            <summary>
            Adjusts the speed of the animation of this
            object by percentage. Rounded to the closest
            frame boundary (usually one-sixtieth of a second).
            </summary>
            <param name="percentage">The percentage by which to adjust the animation speed.</param>
        </member>
        <member name="M:SMLimitless.Graphics.AnimatedGraphicsObject.Reset(System.Boolean)">
            <summary>
            Resets this AnimatedGraphicsObject.
            The texture index becomes 0, and
            the rendered frame count also becomes 0.
            </summary>
            <param name="startRunning">If true, the object will restart.</param>
        </member>
        <member name="M:SMLimitless.Graphics.AnimatedGraphicsObject.Clone">
            <summary>
            Returns a deep copy of this object.
            The texture is not cloned, but everything else is.
            </summary>
            <returns>A deep copy of this object.</returns>
        </member>
        <member name="M:SMLimitless.Graphics.AnimatedGraphicsObject.Load(System.Collections.Generic.Dictionary{System.String,System.String},SMLimitless.Graphics.ComplexGraphicsObject)">
            <summary>
            Loads an AnimatedGraphicsObjects from a configuration section in a ComplexGraphicsObject.
            </summary>
            <param name="section">The section from the CGO configuration that specifies this object.</param>
            <param name="owner">The CGO that owns this object.</param>
        </member>
        <member name="M:SMLimitless.Graphics.AnimatedGraphicsObject.LoadContentCGO(Microsoft.Xna.Framework.Graphics.Texture2D)">
            <summary>
            Loads the content for this AnimatedGraphicsObject.
            </summary>
            <param name="fileTexture">The texture of the ComplexGraphicsObject to take the textures from.</param>
        </member>
        <member name="M:SMLimitless.Graphics.AnimatedGraphicsObject.GetSize">
            <summary>
            Returns the size, in pixels, of the frames of this object.
            </summary>
            <returns>The size of the object.</returns>
        </member>
        <member name="T:SMLimitless.Graphics.BitmapFont">
            <summary>
            A font that maps parts of an image to characters.
            </summary>
        </member>
        <member name="F:SMLimitless.Graphics.BitmapFont.characters">
            <summary>
            A mapping between characters and the textures that represent them.
            </summary>
        </member>
        <member name="F:SMLimitless.Graphics.BitmapFont.unknownCharTexture">
            <summary>
            The texture of any character not appearing in the characters dictionary.
            </summary>
        </member>
        <member name="F:SMLimitless.Graphics.BitmapFont.characterSize">
            <summary>
            The size, in pixels, of every character.
            </summary>
        </member>
        <member name="F:SMLimitless.Graphics.BitmapFont.imagePath">
            <summary>
            The absolute file path to the font's image.
            </summary>
        </member>
        <member name="F:SMLimitless.Graphics.BitmapFont.configPath">
            <summary>
            The absolute file path to the font's configuration file.
            </summary>
        </member>
        <member name="M:SMLimitless.Graphics.BitmapFont.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SMLimitless.Graphics.BitmapFont"/> class.
            </summary>
        </member>
        <member name="M:SMLimitless.Graphics.BitmapFont.Initialize(System.String)">
            <summary>
            Initializes this BitmapFont.
            </summary>
            <param name="contentResourceName">The name of the resource to use as the font.</param>
        </member>
        <member name="M:SMLimitless.Graphics.BitmapFont.LoadContent">
            <summary>
            Loads the content for this BitmapFont.
            </summary>
        </member>
        <member name="M:SMLimitless.Graphics.BitmapFont.DrawString(System.String,Microsoft.Xna.Framework.Vector2,System.Single)">
            <summary>
            Draws a string to the screen.
            </summary>
            <param name="text">The string to draw.</param>
            <param name="position">Where, on the screen, to draw the string.</param>
            <param name="scale">The size of the text on the screen. Defaults to 1.</param>
        </member>
        <member name="T:SMLimitless.Graphics.ComplexGraphicsObject">
            <summary>
            A collection of named graphics objects that can
            be switched between at will.
            </summary>
        </member>
        <member name="F:SMLimitless.Graphics.ComplexGraphicsObject.graphicsObjects">
            <summary>
            A collection of the named graphics objects.
            </summary>
        </member>
        <member name="F:SMLimitless.Graphics.ComplexGraphicsObject.currentObjectName">
            <summary>
            The name of the currently active object.
            </summary>
        </member>
        <member name="F:SMLimitless.Graphics.ComplexGraphicsObject.isLoaded">
            <summary>
            A value indicating whether this object is loaded.
            </summary>
        </member>
        <member name="F:SMLimitless.Graphics.ComplexGraphicsObject.isContentLoaded">
            <summary>
            A value indicating whether the content for this object is loaded.
            </summary>
        </member>
        <member name="F:SMLimitless.Graphics.ComplexGraphicsObject.texture">
            <summary>
            The texture of the image for this object.
            </summary>
        </member>
        <member name="F:SMLimitless.Graphics.ComplexGraphicsObject.configFilePath">
            <summary>
            The path to the configuration file.
            </summary>
        </member>
        <member name="M:SMLimitless.Graphics.ComplexGraphicsObject.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SMLimitless.Graphics.ComplexGraphicsObject"/> class.
            </summary>
        </member>
        <member name="P:SMLimitless.Graphics.ComplexGraphicsObject.CurrentObjectName">
            <summary>
            Gets or sets the currently active object.
            </summary>
        </member>
        <member name="P:SMLimitless.Graphics.ComplexGraphicsObject.FilePath">
            <summary>
            Gets the path to the image.
            </summary>
        </member>
        <member name="P:SMLimitless.Graphics.ComplexGraphicsObject.FrameSize">
            <summary>
            Gets the size of each frame in pixels.
            </summary>
        </member>
        <member name="M:SMLimitless.Graphics.ComplexGraphicsObject.Load(System.String)">
            <summary>
            Loads a ComplexGraphicsObject.
            This overload is only present to fulfill the IGraphicsObject contract.
            Do not call it, call the Load(string, DataReader) overload instead.
            </summary>
            <param name="filePath">The file path to the image.</param>
        </member>
        <member name="M:SMLimitless.Graphics.ComplexGraphicsObject.Load(System.String,SMLimitless.IO.DataReader)">
            <summary>
            Loads a ComplexGraphicsObject.
            </summary>
            <param name="filePath">The file path to the image.</param>
            <param name="config">A DataReader containing the configuration file for this object.</param>
        </member>
        <member name="M:SMLimitless.Graphics.ComplexGraphicsObject.LoadContent">
            <summary>
            Loads the content for this object.
            </summary>
        </member>
        <member name="M:SMLimitless.Graphics.ComplexGraphicsObject.GetEditorGraphics">
            <summary>
            Gets a graphic suitable for display in the level editor's object selection window.
            </summary>
            <returns>A <see cref="T:Microsoft.Xna.Framework.Graphics.Texture2D"/> instance containing the graphic to display.</returns>
        </member>
        <member name="M:SMLimitless.Graphics.ComplexGraphicsObject.Update">
            <summary>
            Updates the currently active object in this ComplexGraphicsObject.
            </summary>
        </member>
        <member name="M:SMLimitless.Graphics.ComplexGraphicsObject.Draw(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Color)">
            <summary>
            Draws the currently active object in this ComplexGraphicsObject.
            </summary>
            <param name="position">The position at which to draw the object.</param>
            <param name="color">The color to shade the object. Use Color.White for no shading.</param>
        </member>
        <member name="M:SMLimitless.Graphics.ComplexGraphicsObject.Draw(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Color,System.Boolean)">
            <summary>
            Draws the currently active object in this ComplexGraphicsObject.
            </summary>
            <param name="position">The position at which to draw the object.</param>
            <param name="color">The color to shade the object. Use Color.White for no shading.</param>
            <param name="debug">If true, and the current object is an AnimatedGraphicsObject, the animated object's current frame number is drawn at the top-left corner of the sprite.</param>
        </member>
        <member name="M:SMLimitless.Graphics.ComplexGraphicsObject.Draw(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Color,Microsoft.Xna.Framework.Graphics.SpriteEffects)">
            <summary>
            Draws the currently active object in this ComplexGraphicsObject.
            </summary>
            <param name="position">The position at which to draw the object.</param>
            <param name="color">The color to shade the object. Use Color.White for no shading.</param>
            <param name="spriteEffects">How to mirror this object.</param>
        </member>
        <member name="M:SMLimitless.Graphics.ComplexGraphicsObject.SetSpeed(System.Decimal)">
            <summary>
            If the current object is animated,
            this method calls through to the animated object's
            SetSpeed(decimal) method. Adjusts the cycle length
            of any animated object.
            </summary>
            <param name="newCycleLength">The new cycle length.</param>
        </member>
        <member name="M:SMLimitless.Graphics.ComplexGraphicsObject.SetSpeed(System.Int32)">
            <summary>
            If the current object is animated,
            this method calls through to the animated object's
            SetSpeed method. Adjusts the frame time
            of any animated object.
            </summary>
            <param name="newFrameTime">The new frame time.</param>
        </member>
        <member name="M:SMLimitless.Graphics.ComplexGraphicsObject.AdjustSpeed(System.Single)">
            <summary>
            If the current object is animated,
            this method calls through to the animated object's
            AdjustSpeed(float) method. Adjusts the animation speed
            of any animated object.
            </summary>
            <param name="percentage">The percentage by which to adjust the speed.</param>
        </member>
        <member name="M:SMLimitless.Graphics.ComplexGraphicsObject.Reset(System.Boolean)">
            <summary>
            If the current object is animated,
            this method calls through to the animated object's
            Reset method. Resets the object, and optionally
            starts the animation running again.
            </summary>
            <param name="startRunning">If true, the object will begin running again.</param>
        </member>
        <member name="M:SMLimitless.Graphics.ComplexGraphicsObject.Clone">
            <summary>
            Returns a deep copy of this ComplexGraphicsObject.
            With the texture, only its reference is copied.
            </summary>
            <returns>A deep copy of this object.</returns>
        </member>
        <member name="M:SMLimitless.Graphics.ComplexGraphicsObject.GetSize">
            <summary>
            Returns the size, in pixels, of this object.
            </summary>
            <returns>The size of this object.</returns>
        </member>
        <member name="T:SMLimitless.Graphics.CroppedTextureMetadata">
            <summary>
            Defines metadata information for cropped textures.
            </summary>
        </member>
        <member name="F:SMLimitless.Graphics.CroppedTextureMetadata.SourceTexture">
            <summary>
            A reference to the original texture.
            </summary>
        </member>
        <member name="F:SMLimitless.Graphics.CroppedTextureMetadata.SourceRectangle">
            <summary>
            The area of the original texture that was cropped.
            </summary>
        </member>
        <member name="M:SMLimitless.Graphics.CroppedTextureMetadata.#ctor(Microsoft.Xna.Framework.Graphics.Texture2D,Microsoft.Xna.Framework.Rectangle)">
            <summary>
            Initializes a new instance of the <see cref="T:SMLimitless.Graphics.CroppedTextureMetadata"/> struct.
            </summary>
            <param name="sourceTexture">The original texture.</param>
            <param name="sourceRectangle">The area of the original texture that was cropped.</param>
        </member>
        <member name="T:SMLimitless.Graphics.GraphicsManager">
            <summary>
            Handles low-level graphics loading and caching.
            </summary>
        </member>
        <member name="F:SMLimitless.Graphics.GraphicsManager.loadedTextures">
            <summary>
            A dictionary containing a list of all loaded textures and their file paths.
            </summary>
        </member>
        <member name="F:SMLimitless.Graphics.GraphicsManager.croppedTextures">
            <summary>
            A dictionary containing all cropped textures and their associated metadata.
            </summary>
        </member>
        <member name="F:SMLimitless.Graphics.GraphicsManager.loadedObjects">
            <summary>
            A dictionary containing all loaded graphics objects and their image file paths.
            </summary>
        </member>
        <member name="M:SMLimitless.Graphics.GraphicsManager.#cctor">
            <summary>
            Initializes static members of the <see cref="T:SMLimitless.Graphics.GraphicsManager"/> class.
            </summary>
        </member>
        <member name="M:SMLimitless.Graphics.GraphicsManager.LoadTextureFromFile(System.String)">
            <summary>
            Loads a texture from any PNG image.
            </summary>
            <param name="filePath">The file path to the image.</param>
            <returns>A texture loaded from the image at the file path.</returns>
        </member>
        <member name="M:SMLimitless.Graphics.GraphicsManager.LoadGraphicsObject(System.String)">
            <summary>
            Loads an instance of IGraphicsObject from a given file path.
            If a text file with the same name is in the same folder,
            that will be used to determine what kind of graphics object
            it is. If no text file is present, the object is assumed to
            be static. Otherwise, the type (animated, complex) depends
            on what the first line of the file is.
            </summary>
            <param name="filePath">The path to the image of the graphics object.</param>
            <returns>A loaded IGraphicsObject instance.</returns>
        </member>
        <member name="M:SMLimitless.Graphics.GraphicsManager.Crop(Microsoft.Xna.Framework.Graphics.Texture2D,Microsoft.Xna.Framework.Rectangle)">
            <summary>
            Crops a texture out of another texture.
            </summary>
            <param name="texture">The original texture; the one to crop out of.</param>
            <param name="area">The area from the original to crop out.</param>
            <returns>The cropped texture.</returns>
        </member>
        <member name="T:SMLimitless.Graphics.IGraphicsObject">
            <summary>
            Defines a graphics object that can be drawn to the screen.
            </summary>
        </member>
        <member name="M:SMLimitless.Graphics.IGraphicsObject.Load(System.String)">
            <summary>
            Loads a graphics object.
            </summary>
            <param name="filePath">The file path of the image.</param>
        </member>
        <member name="M:SMLimitless.Graphics.IGraphicsObject.Load(System.String,SMLimitless.IO.DataReader)">
            <summary>
            Loads a graphics object.
            </summary>
            <param name="filePath">The file path of the image.</param>
            <param name="config">A DataReader containing the configuration file for this object.</param>
        </member>
        <member name="M:SMLimitless.Graphics.IGraphicsObject.LoadContent">
            <summary>
            Loads the content for this object.
            </summary>
        </member>
        <member name="M:SMLimitless.Graphics.IGraphicsObject.GetEditorGraphics">
            <summary>
            Loads a frame of this graphics object that can be used in the level editor form.
            </summary>
            <returns>A texture containing a graphic.</returns>
        </member>
        <member name="M:SMLimitless.Graphics.IGraphicsObject.Update">
            <summary>
            Updates this object.
            </summary>
        </member>
        <member name="M:SMLimitless.Graphics.IGraphicsObject.Draw(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Color)">
            <summary>
            Draws this object to the screen.
            </summary>
            <param name="position">The position on the screen to draw this object at.</param>
            <param name="color">The color to shade the object. Use Color.White for no shading.</param>
        </member>
        <member name="M:SMLimitless.Graphics.IGraphicsObject.Draw(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Color,Microsoft.Xna.Framework.Graphics.SpriteEffects)">
            <summary>
            Draws this object to the screen.
            </summary>
            <param name="position">The position on the screen to draw this object at.</param>
            <param name="color">The color to shade the object. Use Color.White for no shading.</param>
            <param name="effects">Defines sprite mirroring options.</param>
        </member>
        <member name="M:SMLimitless.Graphics.IGraphicsObject.Clone">
            <summary>
            Clones this graphics object.
            The texture(s) are not cloned, merely their reference is copied.
            </summary>
            <returns>A cloned object.</returns>
        </member>
        <member name="M:SMLimitless.Graphics.IGraphicsObject.GetSize">
            <summary>
            Gets the size of the texture within this graphics object.
            </summary>
            <returns>A Vector2 representing the size in pixels of the texture.</returns>
        </member>
        <member name="T:SMLimitless.Graphics.StaticGraphicsObject">
            <summary>
            A graphics object with one texture.
            </summary>
        </member>
        <member name="F:SMLimitless.Graphics.StaticGraphicsObject.isLoaded">
            <summary>
            A value indicating whether this object has been loaded.
            </summary>
        </member>
        <member name="F:SMLimitless.Graphics.StaticGraphicsObject.isContentLoaded">
            <summary>
            A value indicating whether this object has had its content loaded.
            </summary>
        </member>
        <member name="F:SMLimitless.Graphics.StaticGraphicsObject.filePath">
            <summary>
            The file path to the image of the texture.
            </summary>
        </member>
        <member name="F:SMLimitless.Graphics.StaticGraphicsObject.texture">
            <summary>
            The texture of this object.
            </summary>
        </member>
        <member name="M:SMLimitless.Graphics.StaticGraphicsObject.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SMLimitless.Graphics.StaticGraphicsObject"/> class.
            </summary>
        </member>
        <member name="P:SMLimitless.Graphics.StaticGraphicsObject.CgoSourceRect">
            <summary>
            Gets or sets a value that, 
            if loaded from a ComplexGraphicsObject,
            this field represents the source rectangle
            of the texture on the CGO's texture.
            </summary>
        </member>
        <member name="P:SMLimitless.Graphics.StaticGraphicsObject.CgoOwner">
            <summary>
            Gets or sets a value that,
            if loaded from a ComplexGraphicsObject,
            this field represents the owner of this object.
            </summary>
        </member>
        <member name="M:SMLimitless.Graphics.StaticGraphicsObject.Load(System.String)">
            <summary>
            Loads this object.
            </summary>
            <param name="filePath">The file path to the image to use.</param>
        </member>
        <member name="M:SMLimitless.Graphics.StaticGraphicsObject.Load(System.String,SMLimitless.IO.DataReader)">
            <summary>
            Loads this object.
            Do not use this overload; use Load(string) instead. This method is only here for the IGraphicsObject contract.
            </summary>
            <param name="filePath">The file path to the image to use.</param>
            <param name="config">A DataReader containing the configuration file for this object.</param>
        </member>
        <member name="M:SMLimitless.Graphics.StaticGraphicsObject.LoadContent">
            <summary>
            Loads the content for this object.
            </summary>
        </member>
        <member name="M:SMLimitless.Graphics.StaticGraphicsObject.GetEditorGraphics">
            <summary>
            Gets a single texture that can be used on a button in the editor.
            </summary>
            <returns>The texture of this graphics object.</returns>
        </member>
        <member name="M:SMLimitless.Graphics.StaticGraphicsObject.Update">
            <summary>
            Updates this object.
            </summary>
        </member>
        <member name="M:SMLimitless.Graphics.StaticGraphicsObject.Draw(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Color)">
            <summary>
            Draws this object to the screen.
            </summary>
            <param name="position">The position on the screen to draw at.</param>
            <param name="color">The color to shade this object. Use Color.White for no shading.</param>
        </member>
        <member name="M:SMLimitless.Graphics.StaticGraphicsObject.Draw(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Color,Microsoft.Xna.Framework.Graphics.SpriteEffects)">
            <summary>
            Draws this object to the screen.
            </summary>
            <param name="position">The position on the screen to draw at.</param>
            <param name="color">The color to shade this object. Use Color.White for no shading.</param>
            <param name="effects">Defines sprite mirroring.</param>
        </member>
        <member name="M:SMLimitless.Graphics.StaticGraphicsObject.Clone">
            <summary>
            Creates a deep copy of this object.
            The texture is only shallow (reference) copied to reduce memory size.
            </summary>
            <returns>A deep copy of this object.</returns>
        </member>
        <member name="M:SMLimitless.Graphics.StaticGraphicsObject.Load(System.Collections.Generic.Dictionary{System.String,System.String},SMLimitless.Graphics.ComplexGraphicsObject)">
            <summary>
            Loads this object from a ComplexGraphicsObject.
            </summary>
            <param name="section">The section of the CGO config file that specifies this object.</param>
            <param name="owner">The CGO that owns this object.</param>
        </member>
        <member name="M:SMLimitless.Graphics.StaticGraphicsObject.LoadContentCGO(Microsoft.Xna.Framework.Graphics.Texture2D)">
            <summary>
            Loads the content for this object 
            if this object was created by a ComplexGraphicsObject.
            </summary>
            <param name="fileTexture">The texture of this object.</param>
        </member>
        <member name="M:SMLimitless.Graphics.StaticGraphicsObject.GetSize">
            <summary>
            Returns the size, in pixels, of this object.
            </summary>
            <returns>The size of this object.</returns>
        </member>
        <member name="T:SMLimitless.Interfaces.ICollidableShape">
            <summary>
            Represents a shape that rectangles can collide with.
            </summary>
        </member>
        <member name="P:SMLimitless.Interfaces.ICollidableShape.Bounds">
            <summary>
            Gets a rectangle which fully contains this collidable shape.
            </summary>
        </member>
        <member name="M:SMLimitless.Interfaces.ICollidableShape.GetCollisionResolution(SMLimitless.Physics.BoundingRectangle)">
            <summary>
            Gets the distance to move a given rectangle by
            so that it won't be colliding with this shape.
            </summary>
            <param name="that">The rectangle to resolve.</param>
            <returns>The distance to move the rectangle by.</returns>
        </member>
        <member name="M:SMLimitless.Interfaces.ICollidableShape.GetIntersectionDepth(SMLimitless.Physics.BoundingRectangle)">
            <summary>
            Gets the depth of an intersection between this shape
            and a rectangle.
            </summary>
            <param name="that">The rectangle to check for.</param>
            <returns>A vector representing the depth.</returns>
        </member>
        <member name="M:SMLimitless.Interfaces.ICollidableShape.Intersects(SMLimitless.Physics.BoundingRectangle)">
            <summary>
            Determines if a rectangle intersects this shape.
            </summary>
            <param name="that">The rectangle to check for intersection.</param>
            <returns>True if the rectangle intersects this shape, false if it doesn't.</returns>
            <remarks>This method returns False if the rectangle is directly against this shape but not within it.</remarks>
        </member>
        <member name="M:SMLimitless.Interfaces.ICollidableShape.Within(Microsoft.Xna.Framework.Vector2,System.Boolean)">
            <summary>
            Determines if a point is within this shape.
            </summary>
            <param name="point">The point to check.</param>
            <param name="adjacentPointsAreWithin">If true, any point on the edge of the shape will be considered within.</param>
            <returns>True if the point is within the shape, false if otherwise.</returns>
        </member>
        <member name="M:SMLimitless.Interfaces.ICollidableShape.GetTopPoint(System.Single)">
            <summary>
            Gets the location of the top of the shape, given an X-coordinate.
            </summary>
            <param name="x">The X-coordinate to get the top of the shape for.</param>
            <returns>A vector with the X position set to the X parameter, and the Y position set to the position of the top of the shape.</returns>
        </member>
        <member name="T:SMLimitless.Interfaces.IEditorObject">
            <summary>
            Defines an object used in the level or world editor. Incomplete.
            </summary>
        </member>
        <member name="P:SMLimitless.Interfaces.IEditorObject.EditorLabel">
            <summary>
            Gets the label for the editor to use for this object.
            </summary>
        </member>
        <member name="T:SMLimitless.Interfaces.EffectCompletedEventHandler">
            <summary>
            An event handler delegate for the effect completed event.
            </summary>
            <param name="sender">The object that raises this event.</param>
            <param name="direction">The "forward" or "backward" direction of the effect.</param>
        </member>
        <member name="T:SMLimitless.Interfaces.EffectDirection">
            <summary>
            Defines a "forward" and "backward" direction for effects.
            Every effect may use this differently, but the general definition
            is that a forward effect changes something on the screen,
            and a backward effect undoes that change.
            </summary>
        </member>
        <member name="F:SMLimitless.Interfaces.EffectDirection.Forward">
            <summary>
            The forward direction.
            </summary>
        </member>
        <member name="F:SMLimitless.Interfaces.EffectDirection.Backward">
            <summary>
            The backward direction.
            </summary>
        </member>
        <member name="T:SMLimitless.Interfaces.IEffect">
            <summary>
            Defines a visual effect.
            These can be used, for example, to switch between screens.
            </summary>
        </member>
        <member name="E:SMLimitless.Interfaces.IEffect.EffectCompletedEvent">
            <summary>
            An event fired when the effect is completed.
            </summary>
        </member>
        <member name="M:SMLimitless.Interfaces.IEffect.Start(System.Int32,SMLimitless.Interfaces.EffectDirection,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Color)">
            <summary>
            Starts an effect.
            </summary>
            <param name="length">The length in frames that this effect will run for.</param>
            <param name="direction">An EffectDirection that defines whether the effect works "forward" or "backward.</param>
            <param name="position">The position on the screen to draw this effect.</param>
            <param name="color">The color of this effect.</param>
        </member>
        <member name="M:SMLimitless.Interfaces.IEffect.Stop">
            <summary>
            Stops an effect and removes all changes.
            </summary>
        </member>
        <member name="M:SMLimitless.Interfaces.IEffect.LoadContent">
            <summary>
            Loads the content for this effect.
            </summary>
        </member>
        <member name="M:SMLimitless.Interfaces.IEffect.Set(SMLimitless.Interfaces.EffectDirection,Microsoft.Xna.Framework.Color)">
            <summary>
            Immediately sets an effect to its final "forward" or "backward" state.
            </summary>
            <param name="direction">The "forward" or "backward" direction.</param>
            <param name="color">The color of this effect.</param>
        </member>
        <member name="M:SMLimitless.Interfaces.IEffect.Update">
            <summary>
            Updates this effect.
            </summary>
        </member>
        <member name="M:SMLimitless.Interfaces.IEffect.Draw">
            <summary>
            Draws this effect to the screen.
            </summary>
        </member>
        <member name="T:SMLimitless.Interfaces.ILevelSerializer">
            <summary>
            A contract fulfilled by types that can load or save level files/instances.
            </summary>
        </member>
        <member name="P:SMLimitless.Interfaces.ILevelSerializer.SerializerVersion">
            <summary>
            Gets a string that contains the serializer version that this type implements.
            </summary>
        </member>
        <member name="M:SMLimitless.Interfaces.ILevelSerializer.Serialize(SMLimitless.Sprites.Collections.Level)">
            <summary>
            Returns a string representing the level as a JSON file.
            This string can be saved to disk as a level file.
            </summary>
            <param name="level">The level to serialize.</param>
            <returns>A string representing the level as a JSON file.</returns>
        </member>
        <member name="M:SMLimitless.Interfaces.ILevelSerializer.Deserialize(System.String)">
            <summary>
            Returns a fully-loaded Level instance given a string containing a level as a JSON file.
            </summary>
            <param name="json">A string containing a level as a JSON file.</param>
            <returns>A fully-loaded level instance.</returns>
        </member>
        <member name="T:SMLimitless.Interfaces.IName">
            <summary>
            Defines an object with a name.
            </summary>
        </member>
        <member name="P:SMLimitless.Interfaces.IName.Name">
            <summary>
            Gets the name of this object.
            </summary>
        </member>
        <member name="T:SMLimitless.Interfaces.IPositionable">
            <summary>
            Defines an object with a position and a size.
            </summary>
        </member>
        <member name="P:SMLimitless.Interfaces.IPositionable.Position">
            <summary>
            Gets the position of this object.
            </summary>
        </member>
        <member name="P:SMLimitless.Interfaces.IPositionable.Size">
            <summary>
            Gets the size of this object.
            </summary>
        </member>
        <member name="T:SMLimitless.Interfaces.IPositionable2">
            <summary>
            Represents an object with a position and size in the world.
            </summary>
        </member>
        <member name="P:SMLimitless.Interfaces.IPositionable2.Position">
            <summary>
            Gets the position of this object in the world.
            </summary>
        </member>
        <member name="P:SMLimitless.Interfaces.IPositionable2.Size">
            <summary>
            Gets the size of this object in the world.
            </summary>
        </member>
        <member name="P:SMLimitless.Interfaces.IPositionable2.HasMoved">
            <summary>
            Gets a value indicating whether this object has moved in the current frame.
            </summary>
        </member>
        <member name="T:SMLimitless.IO.DataReader">
            <summary>
            Provides helper methods for reading data files in an INI-like format.
            </summary>
        </member>
        <member name="F:SMLimitless.IO.DataReader.file">
            <summary>
            A string array containing the loaded file.
            </summary>
        </member>
        <member name="F:SMLimitless.IO.DataReader.linePos">
            <summary>
            The line index that the reader is currently at in the file.
            </summary>
        </member>
        <member name="M:SMLimitless.IO.DataReader.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SMLimitless.IO.DataReader"/> class.
            </summary>
            <param name="filePath">The file to use.</param>
        </member>
        <member name="P:SMLimitless.IO.DataReader.FilePath">
            <summary>
            Gets the path to the file.
            </summary>
        </member>
        <member name="P:SMLimitless.IO.DataReader.Item(System.Int32)">
            <summary>
            Returns the line in the file at the given index.
            </summary>
            <param name="index">The index of the line in the file to return.</param>
            <returns>The line in the file at the given index.</returns>
        </member>
        <member name="M:SMLimitless.IO.DataReader.ReadLine(System.Int32)">
            <summary>
            Reads a line in the file.
            </summary>
            <param name="index">The index of the line to read.</param>
            <returns>The specified line.</returns>
            <remarks>This method will not change the reader's index.</remarks>
        </member>
        <member name="M:SMLimitless.IO.DataReader.ReadNextLine">
            <summary>
            Reads the next line of the file and increments the index.
            </summary>
            <returns>The next line of the file.  Null if we're beyond the end.</returns>
        </member>
        <member name="M:SMLimitless.IO.DataReader.ReadPreviousLine">
            <summary>
            Reads the previous lines of the file.
            </summary>
            <returns>The previous line of the file, or null if the index is at the beginning.</returns>
        </member>
        <member name="M:SMLimitless.IO.DataReader.ReadAllLinesInSection(System.String)">
            <summary>
            Reads all the lines of a given section.
            </summary>
            <param name="sectionName">The name of the section.  Brackets optional.</param>
            <returns>The lines of the section.</returns>
            <remarks>This method will not change the reader's index.</remarks>
        </member>
        <member name="M:SMLimitless.IO.DataReader.ReadNextEntry">
            <summary>
            Reads the next collapsed data entry.
            </summary>
            <returns>The next collapsed data entry, or null if
            there is no next entry.</returns>
        </member>
        <member name="M:SMLimitless.IO.DataReader.ReadPreviousEntry">
            <summary>
            Reads the previous collapsed data entry.
            </summary>
            <returns>The previous collapsed data entry, or null if
            there is no previous entry.</returns>
        </member>
        <member name="M:SMLimitless.IO.DataReader.ReadFullSection(System.String)">
            <summary>
            Reads a section containing one full data entry (i.e. settings).
            </summary>
            <param name="sectionName">The name of the section from which to read the data.</param>
            <returns>A dictionary of the keys and their data.</returns>
        </member>
        <member name="M:SMLimitless.IO.DataReader.ReadFullMultiSection(System.String)">
            <summary>
            Reads a section of multiple full data entries (i.e. world level tiles).
            </summary>
            <param name="sectionName">The name of the section from which to read.</param>
            <returns>A list of dictionaries containing keys and their data.</returns>
        </member>
        <member name="M:SMLimitless.IO.DataReader.ReadFullEntry(System.String,System.String)">
            <summary>
            Reads a single entry of a single full data entry.
            </summary>
            <param name="sectionName">The section of the entry.</param>
            <param name="key">Which key to use.</param>
            <returns>The data relating to the key, or null if there is no matching key or section.</returns>
        </member>
        <member name="M:SMLimitless.IO.DataReader.SetIndexToSection(System.String)">
            <summary>
            Sets the reading index to the start of a section.
            </summary>
            <param name="sectionName">The section to move the index to.</param>
        </member>
        <member name="M:SMLimitless.IO.DataReader.SectionExists(System.String)">
            <summary>
            Determines if a section exists.
            </summary>
            <param name="sectionName">The name of the section to check for.</param>
            <returns>True if the section exists, false if it doesn't.</returns>
        </member>
        <member name="M:SMLimitless.IO.DataReader.SectionEmpty(System.String)">
            <summary>
            Determines if a given section has any entries.
            </summary>
            <param name="sectionName">The name of the section to check.</param>
            <returns>True if the section if empty, false if it is not.</returns>
        </member>
        <member name="M:SMLimitless.IO.DataReader.CompleteSectionName(System.String)">
            <summary>
            Adds square brackets to any section name that lacks them.
            </summary>
            <param name="sectionName">The original section name.</param>
            <returns>The section name, but with brackets.</returns>
        </member>
        <member name="M:SMLimitless.IO.DataReader.IsCollapsedDataEntry(System.String)">
            <summary>
            Determines if a value is a collapsed data entry.
            Collapsed data entries contain commas but no equal signs.
            </summary>
            <param name="value">The value to check.</param>
            <returns>True if a comma is present (but no equal signs), false if otherwise.</returns>
        </member>
        <member name="M:SMLimitless.IO.DataReader.IsFullDataEntry(System.String[])">
            <summary>
            Determines if a string array is a full data entry.
            </summary>
            <param name="value">The value to check.</param>
            <returns>True if the value is a full data entry, false if otherwise.</returns>
        </member>
        <member name="T:SMLimitless.IO.EditorObjectData">
            <summary>
            Contains information about game objects relevant to the level editor.
            </summary>
        </member>
        <member name="P:SMLimitless.IO.EditorObjectData.TileData">
            <summary>
            Gets a read-only list containing the information for all tiles in an assembly.
            </summary>
        </member>
        <member name="P:SMLimitless.IO.EditorObjectData.SpriteData">
            <summary>
            Gets a read-only list containing the information for all sprites in an assembly.
            </summary>
        </member>
        <member name="M:SMLimitless.IO.EditorObjectData.ReadData(System.String)">
            <summary>
            Reads information for game objects from a JSON file.
            </summary>
            <param name="jsonPath">The path to the JSON file.</param>
        </member>
        <member name="T:SMLimitless.Program">
            <summary>
            Contains the entry point to the program.
            </summary>
        </member>
        <member name="M:SMLimitless.Program.Main(System.String[])">
            <summary>
            The main entry point for the application.
            </summary>
            <param name="args">Command-line arguments.</param>
        </member>
        <member name="T:SMLimitless.Screens.BlankScreen">
            <summary>
            A screen that has nothing.
            </summary>
        </member>
        <member name="M:SMLimitless.Screens.BlankScreen.Initialize(SMLimitless.Screens.Screen,System.String)">
            <summary>
            Initializes this screen.
            </summary>
            <param name="owner">The screen that has created this one.</param>
            <param name="parameters">This screen accepts no parameters, use String.Empty.</param>
        </member>
        <member name="M:SMLimitless.Screens.BlankScreen.LoadContent">
            <summary>
            Loads the (lack of) content for this screen.
            </summary>
        </member>
        <member name="M:SMLimitless.Screens.BlankScreen.Update">
            <summary>
            Updates this screen.
            Press X to exit back to the owner screen.
            </summary>
        </member>
        <member name="M:SMLimitless.Screens.BlankScreen.Draw">
            <summary>
            Draws this screen.
            </summary>
        </member>
        <member name="T:SMLimitless.Screens.Effects.FadeEffect">
            <summary>
            A simple fade effect that can fade in and out.
            </summary>
        </member>
        <member name="F:SMLimitless.Screens.Effects.FadeEffect.fadeDelta">
            <summary>
            The amount to increment the transparency level by per frame.
            </summary>
        </member>
        <member name="F:SMLimitless.Screens.Effects.FadeEffect.currentFadeLevel">
            <summary>
            The current transparency level.
            </summary>
        </member>
        <member name="F:SMLimitless.Screens.Effects.FadeEffect.isRunning">
            <summary>
            A value indicating whether the effect is running.
            </summary>
        </member>
        <member name="F:SMLimitless.Screens.Effects.FadeEffect.isInitialized">
            <summary>
            A value indicating whether the effect is initialized.
            </summary>
        </member>
        <member name="F:SMLimitless.Screens.Effects.FadeEffect.dir">
            <summary>
            Defines the effect direction for this effect.
            If the direction is forward, then fade to black.  If backward, fade from black.
            </summary>
        </member>
        <member name="F:SMLimitless.Screens.Effects.FadeEffect.color">
            <summary>
            The color to fade to or from.
            </summary>
        </member>
        <member name="M:SMLimitless.Screens.Effects.FadeEffect.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SMLimitless.Screens.Effects.FadeEffect"/> class.
            </summary>
        </member>
        <member name="E:SMLimitless.Screens.Effects.FadeEffect.EffectCompletedEvent">
            <summary>
            This event is fired when the effect is completed.
            </summary>
        </member>
        <member name="M:SMLimitless.Screens.Effects.FadeEffect.LoadContent">
            <summary>
            Loads the content for this effect.
            </summary>
        </member>
        <member name="M:SMLimitless.Screens.Effects.FadeEffect.Start(System.Int32,SMLimitless.Interfaces.EffectDirection,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Color)">
            <summary>
            Starts this effect.
            </summary>
            <param name="length">The number of frames this effect should run for.</param>
            <param name="direction">The direction to run this effect.</param>
            <param name="position">This parameter is meaningless for this IEffect implementer.</param>
            <param name="color">The color to fade to or from.</param>
        </member>
        <member name="M:SMLimitless.Screens.Effects.FadeEffect.Stop">
            <summary>
            Stops this effect and removes any fade.
            </summary>
        </member>
        <member name="M:SMLimitless.Screens.Effects.FadeEffect.Set(SMLimitless.Interfaces.EffectDirection,Microsoft.Xna.Framework.Color)">
            <summary>
            Instantly changes the fade to fully black or fully transparent.
            </summary>
            <param name="direction">The direction in which to fade. Forward fades to black, backward fades from black.</param>
            <param name="color">The color to set to.</param>
        </member>
        <member name="M:SMLimitless.Screens.Effects.FadeEffect.Update">
            <summary>
            Updates this effect.
            </summary>
        </member>
        <member name="M:SMLimitless.Screens.Effects.FadeEffect.Draw">
            <summary>
            Draws this effect.
            </summary>
        </member>
        <member name="M:SMLimitless.Screens.Effects.FadeEffect.FadeFinished">
            <summary>
            Called when the effect is finished.
            Fires the EffectCompletedEvent.
            </summary>
        </member>
        <member name="T:SMLimitless.Screens.Effects.IrisEffect">
            <summary>
            An iris wipe effect.
            </summary>
        </member>
        <member name="E:SMLimitless.Screens.Effects.IrisEffect.EffectCompletedEvent">
            <summary>
            An event raised when this effect has completed.
            </summary>
        </member>
        <member name="M:SMLimitless.Screens.Effects.IrisEffect.#ctor(Microsoft.Xna.Framework.Vector2)">
            <summary>
            Initializes a new instance of the <see cref="T:SMLimitless.Screens.Effects.IrisEffect"/> class.
            </summary>
            <param name="center">The point at which the iris should close to or open from.</param>
        </member>
        <member name="M:SMLimitless.Screens.Effects.IrisEffect.Draw">
            <summary>
            Draws this effect.
            </summary>
        </member>
        <member name="M:SMLimitless.Screens.Effects.IrisEffect.LoadContent">
            <summary>
            Loads the content for this effect.
            </summary>
        </member>
        <member name="M:SMLimitless.Screens.Effects.IrisEffect.Set(SMLimitless.Interfaces.EffectDirection,Microsoft.Xna.Framework.Color)">
            <summary>
            Sets this effect to be completed in any direction.
            </summary>
            <param name="direction">The direction to be set to.</param>
            <param name="color">The color of the effect.</param>
        </member>
        <member name="M:SMLimitless.Screens.Effects.IrisEffect.Start(System.Int32,SMLimitless.Interfaces.EffectDirection,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Color)">
            <summary>
            Starts this effect.
            </summary>
            <param name="length">How many frames this effect should last.</param>
            <param name="direction">The direction in which to run the effect (forward is iris in, backwards is iris out).</param>
            <param name="position">The position at which the iris should close/open.</param>
            <param name="color">The color of the background after the iris-in.</param>
        </member>
        <member name="M:SMLimitless.Screens.Effects.IrisEffect.Stop">
            <summary>
            Stops the effect, filling the screen with the color specified in the <see cref="M:SMLimitless.Screens.Effects.IrisEffect.Start(System.Int32,SMLimitless.Interfaces.EffectDirection,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Color)"/> method.
            </summary>
        </member>
        <member name="M:SMLimitless.Screens.Effects.IrisEffect.Update">
            <summary>
            Updates this effect.
            </summary>
        </member>
        <member name="T:SMLimitless.Screens.LevelScreen">
            <summary>
            A screen that contains a <see cref="T:SMLimitless.Sprites.Collections.Level"/> instance.
            </summary>
        </member>
        <member name="F:SMLimitless.Screens.LevelScreen.level">
            <summary>
            The level contained within this screen.
            </summary>
        </member>
        <member name="M:SMLimitless.Screens.LevelScreen.Initialize(SMLimitless.Screens.Screen,System.String)">
            <summary>
            Initializes this screen.
            </summary>
            <param name="owner">The screen that is creating this one.</param>
            <param name="parameters">Parameters to specify how the screen should be initialized. Contains a path to the level file to load.</param>
        </member>
        <member name="M:SMLimitless.Screens.LevelScreen.LoadContent">
            <summary>
            Loads the content for this screen.
            </summary>
        </member>
        <member name="M:SMLimitless.Screens.LevelScreen.Update">
            <summary>
            Updates this screen.
            </summary>
        </member>
        <member name="M:SMLimitless.Screens.LevelScreen.Draw">
            <summary>
            Draws this screen.
            </summary>
        </member>
        <member name="T:SMLimitless.Screens.Screen">
            <summary>
            A component that can be drawn and updated. It contains an internal object.
            Must be inherited.
            </summary>
        </member>
        <member name="F:SMLimitless.Screens.Screen.isRunning">
            <summary>
            A backing field for this IsRunning property.
            </summary>
        </member>
        <member name="P:SMLimitless.Screens.Screen.Owner">
            <summary>
            Gets or sets the screen that owns (has created) this one.
            </summary>
        </member>
        <member name="P:SMLimitless.Screens.Screen.IsRunning">
            <summary>
            Gets or sets a value indicating whether this screen is running.
            </summary>
        </member>
        <member name="P:SMLimitless.Screens.Screen.Effect">
            <summary>
            Gets or sets an effect that can be used as a transition between screens.
            </summary>
        </member>
        <member name="P:SMLimitless.Screens.Screen.NextScreen">
            <summary>
            Gets or sets a reference to a screen that is switched to once this screen exits.
            </summary>
        </member>
        <member name="P:SMLimitless.Screens.Screen.IsInitialized">
            <summary>
            Gets or sets a value indicating whether this screen is initialized.
            </summary>
        </member>
        <member name="P:SMLimitless.Screens.Screen.IsContentLoaded">
            <summary>
            Gets or sets a value indicating whether this screen has had its content loaded.
            </summary>
        </member>
        <member name="M:SMLimitless.Screens.Screen.Initialize(SMLimitless.Screens.Screen,System.String)">
            <summary>
            Initializes this screen.
            </summary>
            <param name="owner">The screen that is creating this one.</param>
            <param name="parameters">Parameters that are used to determine certain settings of a screen. Varies by screen; check the documentation.</param>
        </member>
        <member name="M:SMLimitless.Screens.Screen.LoadContent">
            <summary>
            Loads the content for this screen.
            </summary>
        </member>
        <member name="M:SMLimitless.Screens.Screen.Draw">
            <summary>
            Draws this screen.
            </summary>
        </member>
        <member name="M:SMLimitless.Screens.Screen.Update">
            <summary>
            Updates this screen.
            </summary>
        </member>
        <member name="M:SMLimitless.Screens.Screen.UnloadContent">
            <summary>
            Unloads the content for this screen.
            </summary>
        </member>
        <member name="M:SMLimitless.Screens.Screen.Start(System.String)">
            <summary>
            Starts this screen.
            </summary>
            <param name="parameters">Parameters that are used to determine certain settings of a screen. Varies by screen; check the documentation.</param>
        </member>
        <member name="M:SMLimitless.Screens.Screen.Stop">
            <summary>
            Stops this screen.
            </summary>
        </member>
        <member name="M:SMLimitless.Screens.Screen.Exit(System.String)">
            <summary>
            Exits this screen and gives control to the parent screen.
            </summary>
            <param name="parameters">Parameters that are used to determine certain settings of a screen. Varies by screen; check the documentation.</param>
        </member>
        <member name="T:SMLimitless.Screens.ScreenManager">
            <summary>
            Manages loading and running screens for the game.
            </summary>
        </member>
        <member name="F:SMLimitless.Screens.ScreenManager.screens">
            <summary>
            A hierarchal collection of managed screens.
            </summary>
        </member>
        <member name="F:SMLimitless.Screens.ScreenManager.activeScreen">
            <summary>
            The currently running screen.
            </summary>
        </member>
        <member name="M:SMLimitless.Screens.ScreenManager.Initialize">
            <summary>
            Initializes this ScreenManager.
            </summary>
        </member>
        <member name="M:SMLimitless.Screens.ScreenManager.Update">
            <summary>
            Updates the active screen.
            </summary>
        </member>
        <member name="M:SMLimitless.Screens.ScreenManager.Draw">
            <summary>
            Draws the active screen.
            </summary>
        </member>
        <member name="M:SMLimitless.Screens.ScreenManager.SetRootScreen(SMLimitless.Screens.Screen,System.String)">
            <summary>
            Sets the highest screen in the hierarchy.
            This screen has no owner.
            </summary>
            <param name="screen">The screen to set as root.</param>
            <param name="parameters">Parameters that are used to determine certain settings of a screen. Varies by screen; check the documentation.</param>
        </member>
        <member name="M:SMLimitless.Screens.ScreenManager.LoadContent">
            <summary>
            Loads the content for the active screen.
            </summary>
        </member>
        <member name="M:SMLimitless.Screens.ScreenManager.AddScreen(SMLimitless.Screens.Screen,SMLimitless.Screens.Screen)">
            <summary>
            Adds a screen to the manager.
            </summary>
            <param name="parent">The screen that owns the screen to add.</param>
            <param name="child">The screen to add.</param>
        </member>
        <member name="M:SMLimitless.Screens.ScreenManager.RemoveScreen(SMLimitless.Screens.Screen,System.Boolean)">
            <summary>
            Removes a screen from the manager.
            </summary>
            <param name="screen">The screen to remove.</param>
            <param name="removeChildren">If true, all child screens are removed. If false, all child screens are assigned to their grandparent.</param>
        </member>
        <member name="M:SMLimitless.Screens.ScreenManager.SwitchScreen(SMLimitless.Screens.Screen)">
            <summary>
            Switches to another screen.
            </summary>
            <param name="switchTo">The screen to switch to.</param>
        </member>
        <member name="M:SMLimitless.Screens.ScreenManager.ExitScreen(SMLimitless.Screens.Screen,System.String)">
            <summary>
            Exits a screen and switches the active screen to its owner.
            </summary>
            <param name="screen">The screen to exit.</param>
            <param name="exitMessage">An exit message.</param>
        </member>
        <member name="T:SMLimitless.Screens.TestScreen">
            <summary>
            A "scratch pad" screen that can be used
            to test anything. The contents of the screen
            may change without warning.
            </summary>
        </member>
        <member name="M:SMLimitless.Screens.TestScreen.Update">
            <summary>
            Updates the screen.
            </summary>
        </member>
        <member name="M:SMLimitless.Screens.TestScreen.LoadContent">
            <summary>
            Loads the content for this screen.
            </summary>
        </member>
        <member name="M:SMLimitless.Screens.TestScreen.Initialize(SMLimitless.Screens.Screen,System.String)">
            <summary>
            Initializes this screen.
            </summary>
            <param name="owner">The screen that is creating this one.</param>
            <param name="parameters">Parameters are unused.</param>
        </member>
        <member name="M:SMLimitless.Screens.TestScreen.Draw">
            <summary>
            Draws this screen.
            </summary>
        </member>
        <member name="M:SMLimitless.Screens.TestScreen.Start(System.String)">
            <summary>
            Starts this screen.
            </summary>
            <param name="parameters">Parameters are unused.</param>
        </member>
        <member name="M:SMLimitless.Screens.TestScreen.Effect_effectCompletedEvent(System.Object,SMLimitless.Interfaces.EffectDirection)">
            <summary>
            Handles the EffectCompletedEvent.
            </summary>
            <param name="sender">The object sending this event.</param>
            <param name="direction">The direction of the completed effect.</param>
        </member>
        <member name="T:SMLimitless.SmlProgram">
            <summary>
            The main type for the game.
            </summary>
        </member>
        <member name="F:SMLimitless.SmlProgram.graphics">
            <summary>
            Handles the configuration and management of the graphics device.
            </summary>
        </member>
        <member name="F:SMLimitless.SmlProgram.spriteBatch">
            <summary>
            Enables a group of sprites to be drawn using the same settings.
            </summary>
        </member>
        <member name="M:SMLimitless.SmlProgram.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SMLimitless.SmlProgram"/> class.
            </summary>
        </member>
        <member name="M:SMLimitless.SmlProgram.Initialize">
            <summary>
            Initializes the game's resources and managers.
            </summary>
        </member>
        <member name="M:SMLimitless.SmlProgram.LoadContent">
            <summary>
            Loads the content for this game and all its components.
            </summary>
        </member>
        <member name="M:SMLimitless.SmlProgram.UnloadContent">
            <summary>
            Unloads the content for this game and all its components.
            </summary>
        </member>
        <member name="M:SMLimitless.SmlProgram.Update(Microsoft.Xna.Framework.GameTime)">
            <summary>
            Updates the game.
            All calls to the Update() method of every other type should be done here.
            </summary>
            <param name="gameTime">Snapshot of the game timing state expressed in values that can be used by 
            variable-step (real time) or fixed-step (game time) games.</param>
        </member>
        <member name="M:SMLimitless.SmlProgram.Draw(Microsoft.Xna.Framework.GameTime)">
            <summary>
            Draws the game.
            </summary>
            <param name="gameTime">Snapshot of the game timing state expressed in values that can be used by
            variable-step (real time) or fixed-step (game time) games.</param>
        </member>
        <member name="T:SMLimitless.Sounds.AudioPlaybackEngine">
            <summary>
            A fire-and-forget audio player for music and sound effects.
            </summary>
        </member>
        <member name="F:SMLimitless.Sounds.AudioPlaybackEngine.Instance">
            <summary>
            Gets an instance of the <see cref="T:SMLimitless.Sounds.AudioPlaybackEngine"/> for global usage.
            </summary>
        </member>
        <member name="M:SMLimitless.Sounds.AudioPlaybackEngine.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SMLimitless.Sounds.AudioPlaybackEngine"/> class.
            </summary>
            <param name="sampleRate">How many samples should be played in a second.</param>
            <param name="channelCount">How many channels of sound should be played.</param>
        </member>
        <member name="M:SMLimitless.Sounds.AudioPlaybackEngine.PlaySound(System.String,System.EventHandler)">
            <summary>
            Plays a sound given a filename.
            </summary>
            <param name="fileName">The name of the file to play.</param>
            <param name="additionalOnPlaybackEndedHandler">An event handler raised when the playback ends.</param>
        </member>
        <member name="M:SMLimitless.Sounds.AudioPlaybackEngine.PlayFadeableSound(System.String,System.EventHandler,System.Action{System.Double}@,System.Action{System.Double}@)">
            <summary>
            Plays a sound that fades in and/or out from a file.
            </summary>
            <param name="fileName">The name of the file to play.</param>
            <param name="additionalOnPlaybackEndedHandler">An event handler raised when the playback ends.</param>
            <param name="beginFadeInAction">An action called when the fade-in begins.</param>
            <param name="beginFadeOutAction">An action called when the fade-out begins.</param>
        </member>
        <member name="M:SMLimitless.Sounds.AudioPlaybackEngine.PlaySound(SMLimitless.Sounds.CachedSound,System.EventHandler)">
            <summary>
            Plays a <see cref="T:SMLimitless.Sounds.CachedSound"/> instance.
            </summary>
            <param name="sound">The sound to play.</param>
            <param name="additionalOnPlaybackEndedHandler">An event handler raised when the playback ends.</param>
        </member>
        <member name="M:SMLimitless.Sounds.AudioPlaybackEngine.PlayFadeableSound(SMLimitless.Sounds.CachedSound,System.EventHandler,System.Action{System.Double}@,System.Action{System.Double}@)">
            <summary>
            Plays a <see cref="T:SMLimitless.Sounds.CachedSound"/> instance that fades in and/or out.
            </summary>
            <param name="sound">The sound to play.</param>
            <param name="additionalOnPlaybackEndedHandler">An event handler raised when the playback ends.</param>
            <param name="beginFadeInAction">An action called when the fade-in begins.</param>
            <param name="beginFadeOutAction">An action called when the fade-out begins.</param>
        </member>
        <member name="M:SMLimitless.Sounds.AudioPlaybackEngine.Dispose">
            <summary>
            Disposes the members of this class.
            </summary>
        </member>
        <member name="T:SMLimitless.Sounds.AutoDisposeFileReader">
            <summary>
            An automatically-disposing file reader for audio files.
            </summary>
        </member>
        <member name="E:SMLimitless.Sounds.AutoDisposeFileReader.PlaybackEndedEvent">
            <summary>
            An event raised when the playback of this file has ended.
            </summary>
        </member>
        <member name="M:SMLimitless.Sounds.AutoDisposeFileReader.#ctor(NAudio.Wave.AudioFileReader)">
            <summary>
            Initializes a new instance of the <see cref="T:SMLimitless.Sounds.AutoDisposeFileReader"/> class.
            </summary>
            <param name="reader">A reader for an audio file.</param>
        </member>
        <member name="M:SMLimitless.Sounds.AutoDisposeFileReader.Read(System.Single[],System.Int32,System.Int32)">
            <summary>
            Reads a number of samples from the file into a buffer.
            </summary>
            <param name="buffer">A buffer of <see cref="T:System.Single"/> samples.</param>
            <param name="offset">How many samples from the beginning to skip.</param>
            <param name="count">How many samples to read.</param>
            <returns>The number of samples read.</returns>
        </member>
        <member name="P:SMLimitless.Sounds.AutoDisposeFileReader.WaveFormat">
            <summary>
            Gets a value indicating the <see cref="P:SMLimitless.Sounds.AutoDisposeFileReader.WaveFormat"/> of this reader.
            </summary>
        </member>
        <member name="T:SMLimitless.Sounds.CachedSound">
            <summary>
            A sound, consisting of a buffer of <see cref="T:System.Single"/> samples.
            </summary>
        </member>
        <member name="P:SMLimitless.Sounds.CachedSound.AudioData">
            <summary>
            The samples of this sound.
            </summary>
        </member>
        <member name="P:SMLimitless.Sounds.CachedSound.WaveFormat">
            <summary>
            The <see cref="P:SMLimitless.Sounds.CachedSound.WaveFormat"/> of this sound.
            </summary>
        </member>
        <member name="P:SMLimitless.Sounds.CachedSound.Name">
            <summary>
            The name of this sound.
            </summary>
        </member>
        <member name="M:SMLimitless.Sounds.CachedSound.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SMLimitless.Sounds.CachedSound"/> class.
            </summary>
            <param name="audioFileName">The name of the file containing the sound.</param>
        </member>
        <member name="T:SMLimitless.Sounds.CachedSoundSampleProvider">
            <summary>
            Provides audio samples from a <see cref="T:SMLimitless.Sounds.CachedSound"/> instance.
            </summary>
        </member>
        <member name="E:SMLimitless.Sounds.CachedSoundSampleProvider.PlaybackEndedEvent">
            <summary>
            An event raised when playback of this sound has ended.
            </summary>
        </member>
        <member name="M:SMLimitless.Sounds.CachedSoundSampleProvider.#ctor(SMLimitless.Sounds.CachedSound)">
            <summary>
            Initializes a new instance of the <see cref="T:SMLimitless.Sounds.CachedSoundSampleProvider"/> class.
            </summary>
            <param name="cachedSound">The sound to provide samples from.</param>
        </member>
        <member name="M:SMLimitless.Sounds.CachedSoundSampleProvider.Read(System.Single[],System.Int32,System.Int32)">
            <summary>
            Reads a number of samples from the sound.
            </summary>
            <param name="buffer">A buffer to write samples into.</param>
            <param name="offset">How many samples in the sound to skip.</param>
            <param name="count">The number of samples to read.</param>
            <returns>The number of samples read.</returns>
        </member>
        <member name="P:SMLimitless.Sounds.CachedSoundSampleProvider.WaveFormat">
            <summary>
            Gets the <see cref="P:SMLimitless.Sounds.CachedSoundSampleProvider.WaveFormat"/> of this sample provider.
            </summary>
        </member>
        <member name="T:SMLimitless.Sounds.FadeInFadeOutSampleProvider">
            <summary>
            Provides samples for a sound that fades in or fades out.
            </summary>
        </member>
        <member name="M:SMLimitless.Sounds.FadeInFadeOutSampleProvider.#ctor(NAudio.Wave.ISampleProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:SMLimitless.Sounds.FadeInFadeOutSampleProvider"/> class.
            </summary>
            <param name="source">A sample provider.</param>
        </member>
        <member name="M:SMLimitless.Sounds.FadeInFadeOutSampleProvider.BeginFadeIn(System.Double)">
            <summary>
            Begins a fade-in.
            </summary>
            <param name="fadeDurationInMilliseconds">How long the fade should last, in milliseconds.</param>
        </member>
        <member name="M:SMLimitless.Sounds.FadeInFadeOutSampleProvider.BeginFadeOut(System.Double)">
            <summary>
            Begins a fade-out.
            </summary>
            <param name="fadeDurationInMilliseconds">How long the fade should last, in milliseconds.</param>
        </member>
        <member name="M:SMLimitless.Sounds.FadeInFadeOutSampleProvider.Read(System.Single[],System.Int32,System.Int32)">
            <summary>
            Reads samples from this provider into a buffer.
            </summary>
            <param name="buffer">A buffer to write samples into.</param>
            <param name="offset">How many samples in the sound to skip.</param>
            <param name="count">The number of samples to read.</param>
            <returns>The number of samples read.</returns>
        </member>
        <member name="P:SMLimitless.Sounds.FadeInFadeOutSampleProvider.WaveFormat">
            <summary>
            Gets the <see cref="P:SMLimitless.Sounds.FadeInFadeOutSampleProvider.WaveFormat"/> for this provider.
            </summary>
        </member>
        <member name="T:SMLimitless.Sounds.Sound">
            <summary>
            Represents a sound effect or music track.
            </summary>
        </member>
        <member name="P:SMLimitless.Sounds.Sound.FilePath">
            <summary>
            Gets the path to the file that this sound was loaded from.
            </summary>
        </member>
        <member name="M:SMLimitless.Sounds.Sound.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SMLimitless.Sounds.Sound"/> class.
            </summary>
            <param name="filePath">The path to the file containing the sound.</param>
        </member>
        <member name="M:SMLimitless.Sounds.Sound.Initialize">
            <summary>
            Initializes this sound.
            </summary>
        </member>
        <member name="M:SMLimitless.Sounds.Sound.Play">
            <summary>
            Plays this sound.
            </summary>
        </member>
        <member name="M:SMLimitless.Sounds.Sound.Stop">
            <summary>
            Stops playback of this sound.
            </summary>
        </member>
        <member name="M:SMLimitless.Sounds.Sound.UnloadContent">
            <summary>
            Unloads this sound and frees resources associated with it.
            </summary>
        </member>
        <member name="T:SMLimitless.Sounds.SoundManager">
            <summary>
            Loads and manages sound effects and music.
            </summary>
        </member>
        <member name="F:SMLimitless.Sounds.SoundManager.loadedSounds">
            <summary>
            A dictionary of loaded sounds. The string key is the sound's name, and the Sound value is the loaded sound.
            </summary>
        </member>
        <member name="M:SMLimitless.Sounds.SoundManager.#cctor">
            <summary>
            Initializes static members of the <see cref="T:SMLimitless.Sounds.SoundManager"/> class.
            </summary>
        </member>
        <member name="M:SMLimitless.Sounds.SoundManager.AddSound(System.String,System.String)">
            <summary>
            Loads a sound and adds it to the loaded sounds.
            </summary>
            <param name="name">The name of the sound. This will be used to access the sound.</param>
            <param name="filePath">The path to an MP3 file containing the sound.</param>
        </member>
        <member name="M:SMLimitless.Sounds.SoundManager.RemoveSound(System.String)">
            <summary>
            Unloads a sound and removes it from the list of unloaded sounds.
            </summary>
            <param name="name">The name of the sound to unload and remove.</param>
        </member>
        <member name="M:SMLimitless.Sounds.SoundManager.GetSound(System.String)">
            <summary>
            Gets a sound by its name.
            </summary>
            <param name="name">The name of the sound.</param>
            <returns>A sound.</returns>
        </member>
        <member name="M:SMLimitless.Sounds.SoundManager.PlaySound(System.String)">
            <summary>
            Plays a sound given its name.
            </summary>
            <param name="name">The name of the sound.</param>
        </member>
        <member name="M:SMLimitless.Sounds.SoundManager.StopSound(System.String)">
            <summary>
            Stops playback of a sound given its name.
            </summary>
            <param name="name">The name of the sound.</param>
        </member>
        <member name="M:SMLimitless.Sounds.SoundManager.UnloadContent">
            <summary>
            Unloads and frees resources associated with all loaded sounds.
            </summary>
        </member>
        <member name="T:SMLimitless.Testing">
            <summary>
            A class used to test things.
            Subject to change.
            </summary>
        </member>
        <member name="M:SMLimitless.Testing.Time(System.Action)">
            <summary>
            Measures the time it takes to perform a given action once.
            </summary>
            <param name="action">The action to perform.</param>
            <returns>The time it took for the action to run.</returns>
        </member>
        <member name="M:SMLimitless.Testing.Time(System.Action,System.Int32)">
            <summary>
            Measures the time it takes to perform a given action a given number of times.
            </summary>
            <param name="action">The action to perform.</param>
            <param name="iterations">The number of times to perform it.</param>
            <returns>The time it took for the action to run.</returns>
        </member>
    </members>
</doc>
